{
  "version": 3,
  "sources": ["src/env/isNodejs.ts", "src/draw/drawContour.ts", "src/classes/Dimensions.ts", "src/utils/index.ts", "src/classes/Point.ts", "src/classes/Box.ts", "src/classes/BoundingBox.ts", "src/classes/ObjectDetection.ts", "src/classes/FaceDetection.ts", "src/ops/iou.ts", "src/ops/minBbox.ts", "src/ops/nonMaxSuppression.ts", "src/ops/normalize.ts", "src/ops/padToSquare.ts", "src/ops/shuffleArray.ts", "src/ops/index.ts", "src/classes/Rect.ts", "src/classes/FaceLandmarks.ts", "src/classes/FaceLandmarks5.ts", "src/classes/FaceLandmarks68.ts", "src/classes/FaceMatch.ts", "src/classes/LabeledBox.ts", "src/classes/LabeledFaceDescriptors.ts", "src/classes/PredictedBox.ts", "src/factories/WithFaceDetection.ts", "src/env/createBrowserEnv.ts", "src/env/createFileSystem.ts", "src/env/createNodejsEnv.ts", "src/env/isBrowser.ts", "src/env/index.ts", "src/dom/resolveInput.ts", "src/dom/getContext2dOrThrow.ts", "src/draw/DrawTextField.ts", "src/draw/DrawBox.ts", "src/draw/drawDetections.ts", "src/dom/isMediaLoaded.ts", "src/dom/awaitMediaLoaded.ts", "src/dom/bufferToImage.ts", "src/dom/getMediaDimensions.ts", "src/dom/createCanvas.ts", "src/dom/imageTensorToCanvas.ts", "src/dom/isMediaElement.ts", "src/dom/imageToSquare.ts", "src/dom/NetInput.ts", "src/dom/toNetInput.ts", "src/dom/extractFaces.ts", "src/dom/extractFaceTensors.ts", "src/dom/fetchOrThrow.ts", "src/dom/fetchImage.ts", "src/dom/fetchJson.ts", "src/dom/fetchNetWeights.ts", "src/common/getModelUris.ts", "src/dom/loadWeightMap.ts", "src/dom/matchDimensions.ts", "src/NeuralNetwork.ts", "src/common/depthwiseSeparableConv.ts", "src/faceFeatureExtractor/denseBlock.ts", "src/common/convLayer.ts", "src/common/disposeUnusedWeightTensors.ts", "src/common/extractConvParamsFactory.ts", "src/common/extractFCParamsFactory.ts", "src/common/types.ts", "src/common/extractSeparableConvParamsFactory.ts", "src/common/extractWeightEntryFactory.ts", "src/common/extractWeightsFactory.ts", "src/faceFeatureExtractor/extractorsFactory.ts", "src/faceFeatureExtractor/extractParams.ts", "src/common/loadConvParamsFactory.ts", "src/faceFeatureExtractor/loadParamsFactory.ts", "src/faceFeatureExtractor/extractParamsFromWeigthMap.ts", "src/faceFeatureExtractor/FaceFeatureExtractor.ts", "src/common/fullyConnectedLayer.ts", "src/faceProcessor/extractParams.ts", "src/faceProcessor/extractParamsFromWeigthMap.ts", "src/faceProcessor/util.ts", "src/faceProcessor/FaceProcessor.ts", "src/faceExpressionNet/FaceExpressions.ts", "src/faceExpressionNet/FaceExpressionNet.ts", "src/factories/WithFaceExpressions.ts", "src/draw/drawFaceExpressions.ts", "src/factories/WithFaceLandmarks.ts", "src/draw/DrawFaceLandmarks.ts", "src/draw/index.ts", "src/xception/extractParams.ts", "src/xception/extractParamsFromWeigthMap.ts", "src/xception/TinyXception.ts", "src/ageGenderNet/extractParams.ts", "src/ageGenderNet/extractParamsFromWeigthMap.ts", "src/ageGenderNet/types.ts", "src/ageGenderNet/AgeGenderNet.ts", "src/faceLandmarkNet/FaceLandmark68NetBase.ts", "src/faceLandmarkNet/FaceLandmark68Net.ts", "src/faceFeatureExtractor/extractParamsFromWeigthMapTiny.ts", "src/faceFeatureExtractor/extractParamsTiny.ts", "src/faceFeatureExtractor/TinyFaceFeatureExtractor.ts", "src/faceLandmarkNet/FaceLandmark68TinyNet.ts", "src/faceLandmarkNet/index.ts", "src/faceRecognitionNet/scaleLayer.ts", "src/faceRecognitionNet/convLayer.ts", "src/faceRecognitionNet/extractParams.ts", "src/faceRecognitionNet/extractParamsFromWeigthMap.ts", "src/faceRecognitionNet/residualLayer.ts", "src/faceRecognitionNet/FaceRecognitionNet.ts", "src/faceRecognitionNet/index.ts", "src/factories/WithFaceDescriptor.ts", "src/factories/WithAge.ts", "src/factories/WithGender.ts", "src/ssdMobilenetv1/extractParams.ts", "src/ssdMobilenetv1/extractParamsFromWeigthMap.ts", "src/ssdMobilenetv1/pointwiseConvLayer.ts", "src/ssdMobilenetv1/mobileNetV1.ts", "src/ssdMobilenetv1/nonMaxSuppression.ts", "src/ssdMobilenetv1/outputLayer.ts", "src/ssdMobilenetv1/boxPredictionLayer.ts", "src/ssdMobilenetv1/predictionLayer.ts", "src/ssdMobilenetv1/SsdMobilenetv1Options.ts", "src/ssdMobilenetv1/SsdMobilenetv1.ts", "src/ssdMobilenetv1/index.ts", "src/tinyYolov2/const.ts", "src/tinyYolov2/config.ts", "src/tinyYolov2/leaky.ts", "src/tinyYolov2/convWithBatchNorm.ts", "src/tinyYolov2/depthwiseSeparableConv.ts", "src/tinyYolov2/extractParams.ts", "src/tinyYolov2/extractParamsFromWeigthMap.ts", "src/tinyYolov2/TinyYolov2Options.ts", "src/tinyYolov2/TinyYolov2Base.ts", "src/tinyYolov2/TinyYolov2.ts", "src/tinyYolov2/index.ts", "src/tinyFaceDetector/TinyFaceDetectorOptions.ts", "src/globalApi/ComposableTask.ts", "src/globalApi/extractFacesAndComputeResults.ts", "src/tinyFaceDetector/const.ts", "src/tinyFaceDetector/TinyFaceDetector.ts", "src/globalApi/nets.ts", "src/globalApi/PredictFaceExpressionsTask.ts", "src/globalApi/PredictAgeAndGenderTask.ts", "src/globalApi/ComputeFaceDescriptorsTasks.ts", "src/globalApi/DetectFaceLandmarksTasks.ts", "src/globalApi/DetectFacesTasks.ts", "src/globalApi/detectFaces.ts", "src/globalApi/allFaces.ts", "src/euclideanDistance.ts", "src/globalApi/FaceMatcher.ts", "src/tinyFaceDetector/index.ts", "src/resizeResults.ts", "src/index.ts"],
  "sourcesContent": ["export function isNodejs(): boolean {\n  return typeof global === 'object'\n    && typeof require === 'function'\n    && typeof module !== 'undefined'\n    // issues with gatsby.js: module.exports is undefined\n    // && !!module.exports\n    && typeof process !== 'undefined' && !!process.version\n}", "import { Point } from '../classes';\n\nexport function drawContour(\n  ctx: CanvasRenderingContext2D,\n  points: Point[],\n  isClosed: boolean = false\n) {\n  ctx.beginPath()\n\n  points.slice(1).forEach(({ x, y }, prevIdx) => {\n    const from = points[prevIdx]\n    ctx.moveTo(from.x, from.y)\n    ctx.lineTo(x, y)\n  })\n\n  if (isClosed) {\n    const from = points[points.length - 1]\n    const to = points[0]\n    if (!from || !to) {\n      return\n    }\n\n    ctx.moveTo(from.x, from.y)\n    ctx.lineTo(to.x, to.y)\n  }\n\n  ctx.stroke()\n}", "import { isValidNumber } from '../utils';\n\nexport interface IDimensions {\n  width: number\n  height: number\n}\n\nexport class Dimensions implements IDimensions {\n\n  private _width: number\n  private _height: number\n\n  constructor(width: number, height: number) {\n    if (!isValidNumber(width) || !isValidNumber(height)) {\n      throw new Error(`Dimensions.constructor - expected width and height to be valid numbers, instead have ${JSON.stringify({ width, height })}`)\n    }\n\n    this._width = width\n    this._height = height\n  }\n\n  public get width(): number { return this._width }\n  public get height(): number { return this._height }\n\n  public reverse(): Dimensions {\n    return new Dimensions(1 / this.width, 1 / this.height)\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { Point } from '../classes';\nimport { Dimensions, IDimensions } from '../classes/Dimensions';\n\nexport function isTensor(tensor: any, dim: number) {\n  return tensor instanceof tf.Tensor && tensor.shape.length === dim\n}\n\nexport function isTensor1D(tensor: any): tensor is tf.Tensor1D {\n  return isTensor(tensor, 1)\n}\n\nexport function isTensor2D(tensor: any): tensor is tf.Tensor2D {\n  return isTensor(tensor, 2)\n}\n\nexport function isTensor3D(tensor: any): tensor is tf.Tensor3D {\n  return isTensor(tensor, 3)\n}\n\nexport function isTensor4D(tensor: any): tensor is tf.Tensor4D {\n  return isTensor(tensor, 4)\n}\n\nexport function isFloat(num: number) {\n  return num % 1 !== 0\n}\n\nexport function isEven(num: number) {\n  return num % 2 === 0\n}\n\nexport function round(num: number, prec: number = 2) {\n  const f = Math.pow(10, prec)\n  return Math.floor(num * f) / f\n}\n\nexport function isDimensions(obj: any): boolean {\n  return obj && obj.width && obj.height\n}\n\nexport function computeReshapedDimensions({ width, height }: IDimensions, inputSize: number) {\n  const scale = inputSize / Math.max(height, width)\n  return new Dimensions(Math.round(width * scale), Math.round(height * scale))\n}\n\nexport function getCenterPoint(pts: Point[]): Point {\n  return pts.reduce((sum, pt) => sum.add(pt), new Point(0, 0))\n    .div(new Point(pts.length, pts.length))\n}\n\nexport function range(num: number, start: number, step: number): number[] {\n  return Array(num).fill(0).map((_, i) => start + (i * step))\n}\n\nexport function isValidNumber(num: any) {\n  return !!num && num !== Infinity && num !== -Infinity && !isNaN(num) || num === 0\n}\n\nexport function isValidProbablitiy(num: any) {\n  return isValidNumber(num) && 0 <= num && num <= 1.0\n}", "export interface IPoint {\n  x: number\n  y: number\n}\n\nexport class Point implements IPoint {\n  private _x: number\n  private _y: number\n\n  constructor(x: number, y: number) {\n    this._x = x\n    this._y = y\n  }\n\n  get x(): number { return this._x }\n  get y(): number { return this._y }\n\n  public add(pt: IPoint): Point {\n    return new Point(this.x + pt.x, this.y + pt.y)\n  }\n\n  public sub(pt: IPoint): Point {\n    return new Point(this.x - pt.x, this.y - pt.y)\n  }\n\n  public mul(pt: IPoint): Point {\n    return new Point(this.x * pt.x, this.y * pt.y)\n  }\n\n  public div(pt: IPoint): Point {\n    return new Point(this.x / pt.x, this.y / pt.y)\n  }\n\n  public abs(): Point {\n    return new Point(Math.abs(this.x), Math.abs(this.y))\n  }\n\n  public magnitude(): number {\n    return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2))\n  }\n\n  public floor(): Point {\n    return new Point(Math.floor(this.x), Math.floor(this.y))\n  }\n}", "import { isDimensions, isValidNumber } from '../utils';\nimport { IBoundingBox } from './BoundingBox';\nimport { IDimensions } from './Dimensions';\nimport { Point } from './Point';\nimport { IRect } from './Rect';\n\nexport class Box<BoxType = any> implements IBoundingBox, IRect {\n\n  public static isRect(rect: any): boolean {\n    return !!rect && [rect.x, rect.y, rect.width, rect.height].every(isValidNumber)\n  }\n\n  public static assertIsValidBox(box: any, callee: string, allowNegativeDimensions: boolean = false) {\n    if (!Box.isRect(box)) {\n      throw new Error(`${callee} - invalid box: ${JSON.stringify(box)}, expected object with properties x, y, width, height`)\n    }\n\n    if (!allowNegativeDimensions && (box.width < 0 || box.height < 0)) {\n      throw new Error(`${callee} - width (${box.width}) and height (${box.height}) must be positive numbers`)\n    }\n  }\n\n  private _x: number\n  private _y: number\n  private _width: number\n  private _height: number\n\n  constructor(_box: IBoundingBox | IRect, allowNegativeDimensions: boolean = true) {\n    const box = (_box || {}) as any\n\n    const isBbox = [box.left, box.top, box.right, box.bottom].every(isValidNumber)\n    const isRect = [box.x, box.y, box.width, box.height].every(isValidNumber)\n\n    if (!isRect && !isBbox) {\n      throw new Error(`Box.constructor - expected box to be IBoundingBox | IRect, instead have ${JSON.stringify(box)}`)\n    }\n\n    const [x, y, width, height] = isRect\n      ? [box.x, box.y, box.width, box.height]\n      : [box.left, box.top, box.right - box.left, box.bottom - box.top]\n\n    Box.assertIsValidBox({ x, y, width, height }, 'Box.constructor', allowNegativeDimensions)\n\n    this._x = x\n    this._y = y\n    this._width = width\n    this._height = height\n  }\n\n  public get x(): number { return this._x }\n  public get y(): number { return this._y }\n  public get width(): number { return this._width }\n  public get height(): number { return this._height }\n  public get left(): number { return this.x }\n  public get top(): number { return this.y }\n  public get right(): number { return this.x + this.width }\n  public get bottom(): number { return this.y + this.height }\n  public get area(): number { return this.width * this.height }\n  public get topLeft(): Point { return new Point(this.left, this.top) }\n  public get topRight(): Point { return new Point(this.right, this.top) }\n  public get bottomLeft(): Point { return new Point(this.left, this.bottom) }\n  public get bottomRight(): Point { return new Point(this.right, this.bottom) }\n\n  public round(): Box<BoxType> {\n    const [x, y, width, height] = [this.x, this.y, this.width, this.height]\n      .map(val => Math.round(val))\n    return new Box({ x, y, width, height })\n  }\n\n  public floor(): Box<BoxType> {\n    const [x, y, width, height] = [this.x, this.y, this.width, this.height]\n      .map(val => Math.floor(val))\n    return new Box({ x, y, width, height })\n  }\n\n  public toSquare(): Box<BoxType> {\n    let { x, y, width, height } = this\n    const diff = Math.abs(width - height)\n    if (width < height) {\n      x -= (diff / 2)\n      width += diff\n    }\n    if (height < width) {\n      y -= (diff / 2)\n      height += diff\n    }\n\n    return new Box({ x, y, width, height })\n  }\n\n  public rescale(s: IDimensions | number): Box<BoxType> {\n    const scaleX = isDimensions(s) ? (s as IDimensions).width : s as number\n    const scaleY = isDimensions(s) ? (s as IDimensions).height : s as number\n    return new Box({\n      x: this.x * scaleX,\n      y: this.y * scaleY,\n      width: this.width * scaleX,\n      height: this.height * scaleY\n    })\n  }\n\n  public pad(padX: number, padY: number): Box<BoxType> {\n    let [x, y, width, height] = [\n      this.x - (padX / 2),\n      this.y - (padY / 2),\n      this.width + padX,\n      this.height + padY\n    ]\n    return new Box({ x, y, width, height })\n  }\n\n  public clipAtImageBorders(imgWidth: number, imgHeight: number): Box<BoxType> {\n    const { x, y, right, bottom } = this\n    const clippedX = Math.max(x, 0)\n    const clippedY = Math.max(y, 0)\n\n    const newWidth = right - clippedX\n    const newHeight = bottom - clippedY\n    const clippedWidth = Math.min(newWidth, imgWidth - clippedX)\n    const clippedHeight = Math.min(newHeight, imgHeight - clippedY)\n\n    return (new Box({ x: clippedX, y: clippedY, width: clippedWidth, height: clippedHeight})).floor()\n  }\n\n  public shift(sx: number, sy: number): Box<BoxType> {\n    const { width, height } = this\n    const x = this.x + sx\n    const y = this.y + sy\n\n    return new Box({ x, y, width, height })\n  }\n\n  public padAtBorders(imageHeight: number, imageWidth: number) {\n    const w = this.width + 1\n    const h = this.height + 1\n\n    let dx = 1\n    let dy = 1\n    let edx = w\n    let edy = h\n\n    let x = this.left\n    let y = this.top\n    let ex = this.right\n    let ey = this.bottom\n\n    if (ex > imageWidth) {\n      edx = -ex + imageWidth + w\n      ex = imageWidth\n    }\n    if (ey > imageHeight) {\n      edy = -ey + imageHeight + h\n      ey = imageHeight\n    }\n    if (x < 1) {\n      edy = 2 - x\n      x = 1\n    }\n    if (y < 1) {\n      edy = 2 - y\n      y = 1\n    }\n\n    return { dy, edy, dx, edx, y, ey, x, ex, w, h }\n  }\n\n  public calibrate(region: Box) {\n    return new Box({\n      left: this.left + (region.left * this.width),\n      top: this.top + (region.top * this.height),\n      right: this.right + (region.right * this.width),\n      bottom: this.bottom + (region.bottom * this.height)\n    }).toSquare().round()\n  }\n}", "import { Box } from './Box';\n\nexport interface IBoundingBox {\n  left: number\n  top: number\n  right: number\n  bottom: number\n}\n\nexport class BoundingBox extends Box<BoundingBox> implements IBoundingBox {\n  constructor(left: number, top: number, right: number, bottom: number, allowNegativeDimensions: boolean = false) {\n    super({ left, top, right, bottom }, allowNegativeDimensions)\n  }\n}", "import { Box } from './Box';\nimport { Dimensions, IDimensions } from './Dimensions';\nimport { IRect, Rect } from './Rect';\n\nexport class ObjectDetection {\n  private _score: number\n  private _classScore: number\n  private _className: string\n  private _box: Rect\n  private _imageDims: Dimensions\n\n  constructor(\n    score: number,\n    classScore: number,\n    className: string,\n    relativeBox: IRect,\n    imageDims: IDimensions\n  ) {\n    this._imageDims = new Dimensions(imageDims.width, imageDims.height)\n    this._score = score\n    this._classScore = classScore\n    this._className = className\n    this._box = new Box(relativeBox).rescale(this._imageDims)\n  }\n\n  public get score(): number { return this._score }\n  public get classScore(): number { return this._classScore }\n  public get className(): string { return this._className }\n  public get box(): Box { return this._box }\n  public get imageDims(): Dimensions { return this._imageDims }\n  public get imageWidth(): number { return this.imageDims.width }\n  public get imageHeight(): number { return this.imageDims.height }\n  public get relativeBox(): Box { return new Box(this._box).rescale(this.imageDims.reverse()) }\n\n  public forSize(width: number, height: number): ObjectDetection {\n    return new ObjectDetection(\n      this.score,\n      this.classScore,\n      this.className,\n      this.relativeBox,\n      { width, height}\n    )\n  }\n}", "import { Box } from './Box';\nimport { IDimensions } from './Dimensions';\nimport { ObjectDetection } from './ObjectDetection';\nimport { Rect } from './Rect';\n\nexport interface IFaceDetecion {\n  score: number\n  box: Box\n}\n\nexport class FaceDetection extends ObjectDetection implements IFaceDetecion {\n  constructor(\n    score: number,\n    relativeBox: Rect,\n    imageDims: IDimensions\n  ) {\n    super(score, score, '', relativeBox, imageDims)\n  }\n\n  public forSize(width: number, height: number): FaceDetection {\n    const { score, relativeBox, imageDims } = super.forSize(width, height)\n    return new FaceDetection(score, relativeBox, imageDims)\n  }\n}", "import { Box } from '../classes/Box';\n\nexport function iou(box1: Box, box2: Box, isIOU: boolean = true) {\n  const width = Math.max(0.0, Math.min(box1.right, box2.right) - Math.max(box1.left, box2.left))\n  const height = Math.max(0.0, Math.min(box1.bottom, box2.bottom) - Math.max(box1.top, box2.top))\n  const interSection = width * height\n\n  return isIOU\n    ? interSection / (box1.area + box2.area - interSection)\n    : interSection / Math.min(box1.area, box2.area)\n}", "import { BoundingBox, IPoint } from '../classes';\n\nexport function minBbox(pts: IPoint[]): BoundingBox {\n  const xs = pts.map(pt => pt.x)\n  const ys = pts.map(pt => pt.y)\n  const minX = xs.reduce((min, x) => x < min ? x : min, Infinity)\n  const minY = ys.reduce((min, y) => y < min ? y : min, Infinity)\n  const maxX = xs.reduce((max, x) => max < x ? x : max, 0)\n  const maxY = ys.reduce((max, y) => max < y ? y : max, 0)\n\n  return new BoundingBox(minX, minY, maxX, maxY)\n}\n", "import { Box } from '../classes/Box';\nimport { iou } from './iou';\n\nexport function nonMaxSuppression(\n  boxes: Box[],\n  scores: number[],\n  iouThreshold: number,\n  isIOU: boolean = true\n): number[] {\n\n  let indicesSortedByScore = scores\n    .map((score, boxIndex) => ({ score, boxIndex }))\n    .sort((c1, c2) => c1.score - c2.score)\n    .map(c => c.boxIndex)\n\n  const pick: number[] = []\n\n  while(indicesSortedByScore.length > 0) {\n    const curr = indicesSortedByScore.pop() as number\n    pick.push(curr)\n\n    const indices = indicesSortedByScore\n\n    const outputs: number[] = []\n    for (let i = 0; i < indices.length; i++) {\n      const idx = indices[i]\n\n      const currBox = boxes[curr]\n      const idxBox = boxes[idx]\n\n      outputs.push(iou(currBox, idxBox, isIOU))\n    }\n\n    indicesSortedByScore = indicesSortedByScore.filter(\n      (_, j) => outputs[j] <= iouThreshold\n    )\n  }\n\n  return pick\n\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nexport function normalize(x: tf.Tensor4D, meanRgb: number[]): tf.Tensor4D {\n  return tf.tidy(() => {\n    const [r, g, b] = meanRgb\n    const avg_r = tf.fill([...x.shape.slice(0, 3), 1], r)\n    const avg_g = tf.fill([...x.shape.slice(0, 3), 1], g)\n    const avg_b = tf.fill([...x.shape.slice(0, 3), 1], b)\n    const avg_rgb = tf.concat([avg_r, avg_g, avg_b], 3)\n\n    return tf.sub(x, avg_rgb)\n  })\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\n/**\n * Pads the smaller dimension of an image tensor with zeros, such that width === height.\n *\n * @param imgTensor The image tensor.\n * @param isCenterImage (optional, default: false) If true, add an equal amount of padding on\n * both sides of the minor dimension oof the image.\n * @returns The padded tensor with width === height.\n */\nexport function padToSquare(\n  imgTensor: tf.Tensor4D,\n  isCenterImage: boolean = false\n): tf.Tensor4D {\n  return tf.tidy(() => {\n\n    const [height, width] = imgTensor.shape.slice(1)\n    if (height === width) {\n      return imgTensor\n    }\n\n    const dimDiff = Math.abs(height - width)\n    const paddingAmount = Math.round(dimDiff * (isCenterImage ? 0.5 : 1))\n    const paddingAxis = height > width ? 2 : 1\n\n    const createPaddingTensor = (paddingAmount: number): tf.Tensor => {\n      const paddingTensorShape = imgTensor.shape.slice()\n      paddingTensorShape[paddingAxis] = paddingAmount\n      return tf.fill(paddingTensorShape, 0)\n    }\n\n    const paddingTensorAppend = createPaddingTensor(paddingAmount)\n    const remainingPaddingAmount = dimDiff - (paddingTensorAppend.shape[paddingAxis] as number)\n\n    const paddingTensorPrepend = isCenterImage && remainingPaddingAmount\n      ? createPaddingTensor(remainingPaddingAmount)\n      : null\n\n    const tensorsToStack = [\n      paddingTensorPrepend,\n      imgTensor,\n      paddingTensorAppend\n    ]\n      .filter(t => !!t)\n      // .map((t: tf.Tensor) => t.toFloat()) as tf.Tensor4D[]\n      .map((t: tf.Tensor) => tf.cast(t, 'float32')) as tf.Tensor4D[]\n    return tf.concat(tensorsToStack, paddingAxis)\n\n  })\n}", "export function shuffleArray(inputArray: any[]) {\n  const array = inputArray.slice()\n  for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1))\n      const x = array[i]\n      array[i] = array[j]\n      array[j] = x\n  }\n  return array\n}", "export * from './iou'\nexport * from './minBbox'\nexport * from './nonMaxSuppression'\nexport * from './normalize'\nexport * from './padToSquare'\nexport * from './shuffleArray'\n\nexport function sigmoid(x: number) {\n  return 1 / (1 + Math.exp(-x))\n}\n\nexport function inverseSigmoid(x: number) {\n  return Math.log(x / (1 - x))\n}", "import { Box } from './Box';\n\nexport interface IRect {\n  x: number\n  y: number\n  width: number\n  height: number\n}\n\nexport class Rect extends Box<Rect> implements IRect {\n  constructor(x: number, y: number, width: number, height: number, allowNegativeDimensions: boolean = false) {\n    super({ x, y, width, height }, allowNegativeDimensions)\n  }\n}", "import { minBbox } from '../ops';\nimport { getCenterPoint } from '../utils';\nimport { IBoundingBox } from './BoundingBox';\nimport { Box } from './Box';\nimport { Dimensions, IDimensions } from './Dimensions';\nimport { FaceDetection } from './FaceDetection';\nimport { Point } from './Point';\nimport { IRect, Rect } from './Rect';\n\n// face alignment constants\nconst relX = 0.5\nconst relY = 0.43\nconst relScale = 0.45\n\nexport interface IFaceLandmarks {\n  positions: Point[]\n  shift: Point\n}\n\nexport class FaceLandmarks implements IFaceLandmarks {\n  protected _shift: Point\n  protected _positions: Point[]\n  protected _imgDims: Dimensions\n\n  constructor(\n    relativeFaceLandmarkPositions: Point[],\n    imgDims: IDimensions,\n    shift: Point = new Point(0, 0)\n  ) {\n    const { width, height } = imgDims\n    this._imgDims = new Dimensions(width, height)\n    this._shift = shift\n    this._positions = relativeFaceLandmarkPositions.map(\n      pt => pt.mul(new Point(width, height)).add(shift)\n    )\n  }\n\n  public get shift(): Point { return new Point(this._shift.x, this._shift.y) }\n  public get imageWidth(): number { return this._imgDims.width }\n  public get imageHeight(): number { return this._imgDims.height }\n  public get positions(): Point[] { return this._positions }\n  public get relativePositions(): Point[] {\n    return this._positions.map(\n      pt => pt.sub(this._shift).div(new Point(this.imageWidth, this.imageHeight))\n    )\n  }\n\n  public forSize<T extends FaceLandmarks>(width: number, height: number): T {\n    return new (this.constructor as any)(\n      this.relativePositions,\n      { width, height }\n    )\n  }\n\n  public shiftBy<T extends FaceLandmarks>(x: number, y: number): T {\n    return new (this.constructor as any)(\n      this.relativePositions,\n      this._imgDims,\n      new Point(x, y)\n    )\n  }\n\n  public shiftByPoint<T extends FaceLandmarks>(pt: Point): T {\n    return this.shiftBy(pt.x, pt.y)\n  }\n\n  /**\n   * Aligns the face landmarks after face detection from the relative positions of the faces\n   * bounding box, or it's current shift. This function should be used to align the face images\n   * after face detection has been performed, before they are passed to the face recognition net.\n   * This will make the computed face descriptor more accurate.\n   *\n   * @param detection (optional) The bounding box of the face or the face detection result. If\n   * no argument was passed the position of the face landmarks are assumed to be relative to\n   * it's current shift.\n   * @returns The bounding box of the aligned face.\n   */\n  public align(\n    detection?: FaceDetection | IRect | IBoundingBox | null,\n    options: { useDlibAlignment?: boolean, minBoxPadding?: number } = { }\n  ): Box {\n    if (detection) {\n      const box = detection instanceof FaceDetection\n        ? detection.box.floor()\n        : new Box(detection)\n\n      return this.shiftBy(box.x, box.y).align(null, options)\n    }\n\n    const { useDlibAlignment, minBoxPadding } = Object.assign({}, { useDlibAlignment: false, minBoxPadding: 0.2 }, options)\n\n    if (useDlibAlignment) {\n      return this.alignDlib()\n    }\n\n    return this.alignMinBbox(minBoxPadding)\n  }\n\n  private alignDlib(): Box {\n\n    const centers = this.getRefPointsForAlignment()\n\n    const [leftEyeCenter, rightEyeCenter, mouthCenter] = centers\n    const distToMouth = (pt: Point) => mouthCenter.sub(pt).magnitude()\n    const eyeToMouthDist = (distToMouth(leftEyeCenter) + distToMouth(rightEyeCenter)) / 2\n\n    const size = Math.floor(eyeToMouthDist / relScale)\n\n    const refPoint = getCenterPoint(centers)\n    // TODO: pad in case rectangle is out of image bounds\n    const x = Math.floor(Math.max(0, refPoint.x - (relX * size)))\n    const y = Math.floor(Math.max(0, refPoint.y - (relY * size)))\n\n    return new Rect(x, y, Math.min(size, this.imageWidth + x), Math.min(size, this.imageHeight + y))\n  }\n\n  private alignMinBbox(padding: number): Box {\n    const box = minBbox(this.positions)\n    return box.pad(box.width * padding, box.height * padding)\n  }\n\n  protected getRefPointsForAlignment(): Point[] {\n    throw new Error('getRefPointsForAlignment not implemented by base class')\n  }\n}", "import { getCenterPoint } from '../utils';\nimport { FaceLandmarks } from './FaceLandmarks';\nimport { Point } from './Point';\n\n\nexport class FaceLandmarks5 extends FaceLandmarks {\n\n  protected getRefPointsForAlignment(): Point[] {\n    const pts = this.positions\n    return [\n      pts[0],\n      pts[1],\n      getCenterPoint([pts[3], pts[4]])\n    ]\n  }\n}", "import { getCenterPoint } from '../utils';\nimport { FaceLandmarks } from './FaceLandmarks';\nimport { Point } from './Point';\n\nexport class FaceLandmarks68 extends FaceLandmarks {\n  public getJawOutline(): Point[] {\n    return this.positions.slice(0, 17)\n  }\n\n  public getLeftEyeBrow(): Point[] {\n    return this.positions.slice(17, 22)\n  }\n\n  public getRightEyeBrow(): Point[] {\n    return this.positions.slice(22, 27)\n  }\n\n  public getNose(): Point[] {\n    return this.positions.slice(27, 36)\n  }\n\n  public getLeftEye(): Point[] {\n    return this.positions.slice(36, 42)\n  }\n\n  public getRightEye(): Point[] {\n    return this.positions.slice(42, 48)\n  }\n\n  public getMouth(): Point[] {\n    return this.positions.slice(48, 68)\n  }\n\n  protected getRefPointsForAlignment(): Point[] {\n    return [\n      this.getLeftEye(),\n      this.getRightEye(),\n      this.getMouth()\n    ].map(getCenterPoint)\n  }\n}", "import { round } from '../utils';\n\nexport interface IFaceMatch {\n  label: string\n  distance: number\n}\n\nexport class FaceMatch implements IFaceMatch {\n  private _label: string\n  private _distance: number\n\n  constructor(label: string, distance: number) {\n    this._label = label\n    this._distance = distance\n  }\n\n  public get label(): string { return this._label }\n  public get distance(): number { return this._distance }\n\n  public toString(withDistance: boolean = true): string {\n    return `${this.label}${withDistance ? ` (${round(this.distance)})` : ''}`\n  }\n}", "import { isValidNumber } from '../utils';\nimport { IBoundingBox } from './BoundingBox';\nimport { Box } from './Box';\nimport { IRect } from './Rect';\n\nexport class LabeledBox extends Box<LabeledBox> {\n\n  public static assertIsValidLabeledBox(box: any, callee: string) {\n    Box.assertIsValidBox(box, callee)\n\n    if (!isValidNumber(box.label)) {\n      throw new Error(`${callee} - expected property label (${box.label}) to be a number`)\n    }\n  }\n\n  private _label: number\n\n  constructor(box: IBoundingBox | IRect | any, label: number) {\n    super(box)\n    this._label = label\n  }\n\n  public get label(): number { return this._label }\n\n}", "export class LabeledFaceDescriptors {\n  private _label: string\n  private _descriptors: Float32Array[]\n\n  constructor(label: string, descriptors: Float32Array[]) {\n    if (!(typeof label === 'string')) {\n      throw new Error('LabeledFaceDescriptors - constructor expected label to be a string')\n    }\n\n    if (!Array.isArray(descriptors) || descriptors.some(desc => !(desc instanceof Float32Array))) {\n      throw new Error('LabeledFaceDescriptors - constructor expected descriptors to be an array of Float32Array')\n    }\n\n    this._label = label\n    this._descriptors = descriptors\n  }\n\n  public get label(): string { return this._label }\n  public get descriptors(): Float32Array[] { return this._descriptors }\n\n  public toJSON(): any {\n    return {\n      label: this.label,\n      descriptors: this.descriptors.map((d) => Array.from(d))\n    };\n  }\n\n  public static fromJSON(json: any): LabeledFaceDescriptors {\n    const descriptors = json.descriptors.map((d: any) => {\n      return new Float32Array(d);\n    });\n    return new LabeledFaceDescriptors(json.label, descriptors);\n  }\n\n}", "import { isValidProbablitiy } from '../utils';\nimport { IBoundingBox } from './BoundingBox';\nimport { LabeledBox } from './LabeledBox';\nimport { IRect } from './Rect';\n\nexport class PredictedBox extends LabeledBox {\n\n  public static assertIsValidPredictedBox(box: any, callee: string) {\n    LabeledBox.assertIsValidLabeledBox(box, callee)\n\n    if (\n      !isValidProbablitiy(box.score)\n      || !isValidProbablitiy(box.classScore)\n    ) {\n      throw new Error(`${callee} - expected properties score (${box.score}) and (${box.classScore}) to be a number between [0, 1]`)\n    }\n  }\n\n  private _score: number\n  private _classScore: number\n\n  constructor(box: IBoundingBox | IRect | any, label: number, score: number, classScore: number) {\n    super(box, label)\n    this._score = score\n    this._classScore = classScore\n  }\n\n  public get score(): number { return this._score }\n  public get classScore(): number { return this._classScore }\n\n}", "import { FaceDetection } from '../classes/FaceDetection';\n\nexport type WithFaceDetection<TSource> = TSource & {\n  detection: FaceDetection\n}\n\nexport function isWithFaceDetection(obj: any): obj is WithFaceDetection<{}> {\n  return obj['detection'] instanceof FaceDetection\n}\n\nexport function extendWithFaceDetection<\n  TSource\n> (\n  sourceObj: TSource,\n  detection: FaceDetection\n): WithFaceDetection<TSource> {\n\n  const extension = { detection }\n  return Object.assign({}, sourceObj, extension)\n}\n", "import { Environment } from './types';\n\nexport function createBrowserEnv(): Environment {\n\n  const fetch = window['fetch'] || function() {\n    throw new Error('fetch - missing fetch implementation for browser environment')\n  }\n\n  const readFile = function() {\n    throw new Error('readFile - filesystem not available for browser environment')\n  }\n\n  return {\n    Canvas: HTMLCanvasElement,\n    CanvasRenderingContext2D: CanvasRenderingContext2D,\n    Image: HTMLImageElement,\n    ImageData: ImageData,\n    Video: HTMLVideoElement,\n    createCanvasElement: () => document.createElement('canvas'),\n    createImageElement: () => document.createElement('img'),\n    fetch,\n    readFile\n  }\n}", "import { FileSystem } from './types';\n\nexport function createFileSystem(fs?: any): FileSystem {\n\n  let requireFsError = ''\n\n  if (!fs) {\n    try {\n      fs = require('fs')\n    } catch (err) {\n      requireFsError = err.toString()\n    }\n  }\n\n  const readFile = fs\n    ? function(filePath: string) {\n      return new Promise<Buffer>((res, rej) => {\n        fs.readFile(filePath, function(err: any, buffer: Buffer) {\n          return err ? rej(err) : res(buffer)\n        })\n      })\n    }\n    : function() {\n      throw new Error(`readFile - failed to require fs in nodejs environment with error: ${requireFsError}`)\n    }\n\n  return {\n    readFile\n  }\n}", "import { createFileSystem } from './createFileSystem';\nimport { Environment } from './types';\n\nexport function createNodejsEnv(): Environment {\n\n  const Canvas = global['Canvas'] || global['HTMLCanvasElement']\n  const Image = global['Image'] || global['HTMLImageElement']\n\n  const createCanvasElement = function() {\n    if (Canvas) {\n      return new Canvas()\n    }\n    throw new Error('createCanvasElement - missing Canvas implementation for nodejs environment')\n  }\n\n  const createImageElement = function() {\n    if (Image) {\n      return new Image()\n    }\n    throw new Error('createImageElement - missing Image implementation for nodejs environment')\n  }\n\n  const fetch = global['fetch'] || function() {\n    throw new Error('fetch - missing fetch implementation for nodejs environment')\n  }\n\n  const fileSystem = createFileSystem()\n\n  return {\n    Canvas: Canvas || class {},\n    CanvasRenderingContext2D: global['CanvasRenderingContext2D'] || class {},\n    Image: Image || class {},\n    ImageData: global['ImageData'] || class {},\n    Video: global['HTMLVideoElement'] || class {},\n    createCanvasElement,\n    createImageElement,\n    fetch,\n    ...fileSystem\n  }\n}", "export function isBrowser(): boolean {\n  return typeof window === 'object'\n    && typeof document !== 'undefined'\n    && typeof HTMLImageElement !== 'undefined'\n    && typeof HTMLCanvasElement !== 'undefined'\n    && typeof HTMLVideoElement !== 'undefined'\n    && typeof ImageData !== 'undefined'\n    && typeof CanvasRenderingContext2D !== 'undefined'\n}", "import { createBrowserEnv } from './createBrowserEnv';\nimport { createFileSystem } from './createFileSystem';\nimport { createNodejsEnv } from './createNodejsEnv';\nimport { isBrowser } from './isBrowser';\nimport { isNodejs } from './isNodejs';\nimport { Environment } from './types';\n\nlet environment: Environment | null\n\nfunction getEnv(): Environment {\n  if (!environment) {\n    throw new Error('getEnv - environment is not defined, check isNodejs() and isBrowser()')\n  }\n  return environment\n}\n\nfunction setEnv(env: Environment) {\n  environment = env\n}\n\nfunction initialize() {\n  // check for isBrowser() first to prevent electron renderer process\n  // to be initialized with wrong environment due to isNodejs() returning true\n  if (isBrowser()) {\n    return setEnv(createBrowserEnv())\n  }\n  if (isNodejs()) {\n    return setEnv(createNodejsEnv())\n  }\n}\n\nfunction monkeyPatch(env: Partial<Environment>) {\n  if (!environment) {\n    initialize()\n  }\n\n  if (!environment) {\n    throw new Error('monkeyPatch - environment is not defined, check isNodejs() and isBrowser()')\n  }\n\n  const { Canvas = environment.Canvas, Image = environment.Image } = env\n  environment.Canvas = Canvas\n  environment.Image = Image\n  environment.createCanvasElement = env.createCanvasElement || (() => new Canvas())\n  environment.createImageElement = env.createImageElement || (() => new Image())\n\n  environment.ImageData = env.ImageData || environment.ImageData\n  environment.Video = env.Video || environment.Video\n  environment.fetch = env.fetch || environment.fetch\n  environment.readFile = env.readFile || environment.readFile\n}\n\nexport const env = {\n  getEnv,\n  setEnv,\n  initialize,\n  createBrowserEnv,\n  createFileSystem,\n  createNodejsEnv,\n  monkeyPatch,\n  isBrowser,\n  isNodejs\n}\n\ninitialize()\n\nexport * from './types'\n", "import { env } from '../env';\n\nexport function resolveInput(arg: string | any) {\n  if (!env.isNodejs() && typeof arg === 'string') {\n    return document.getElementById(arg)\n  }\n  return arg\n}", "import { env } from '../env';\nimport { resolveInput } from './resolveInput';\n\nexport function getContext2dOrThrow(canvasArg: string | HTMLCanvasElement | CanvasRenderingContext2D): CanvasRenderingContext2D {\n\n  const { Canvas, CanvasRenderingContext2D } = env.getEnv()\n\n  if (canvasArg instanceof CanvasRenderingContext2D) {\n    return canvasArg\n  }\n\n  const canvas = resolveInput(canvasArg)\n\n  if (!(canvas instanceof Canvas)) {\n    throw new Error('resolveContext2d - expected canvas to be of instance of Canvas')\n  }\n\n  const ctx = canvas.getContext('2d')\n  if (!ctx) {\n    throw new Error('resolveContext2d - canvas 2d context is null')\n  }\n\n  return ctx\n}", "import { IDimensions, IPoint } from '../classes';\nimport { getContext2dOrThrow } from '../dom/getContext2dOrThrow';\nimport { resolveInput } from '../dom/resolveInput';\n\nexport enum AnchorPosition {\n  TOP_LEFT = 'TOP_LEFT',\n  TOP_RIGHT = 'TOP_RIGHT',\n  BOTTOM_LEFT = 'BOTTOM_LEFT',\n  BOTTOM_RIGHT = 'BOTTOM_RIGHT'\n}\n\nexport interface IDrawTextFieldOptions {\n  anchorPosition?: AnchorPosition\n  backgroundColor?: string\n  fontColor?: string\n  fontSize?: number\n  fontStyle?: string\n  padding?: number\n}\n\nexport class DrawTextFieldOptions implements IDrawTextFieldOptions {\n  public anchorPosition: AnchorPosition\n  public backgroundColor: string\n  public fontColor: string\n  public fontSize: number\n  public fontStyle: string\n  public padding: number\n\n  constructor(options: IDrawTextFieldOptions = {}) {\n    const { anchorPosition, backgroundColor, fontColor, fontSize, fontStyle, padding } = options\n    this.anchorPosition = anchorPosition || AnchorPosition.TOP_LEFT\n    this.backgroundColor = backgroundColor || 'rgba(0, 0, 0, 0.5)'\n    this.fontColor = fontColor || 'rgba(255, 255, 255, 1)'\n    this.fontSize = fontSize || 14\n    this.fontStyle = fontStyle || 'Georgia'\n    this.padding = padding || 4\n  }\n}\n\nexport class DrawTextField {\n  public text: string[]\n  public anchor : IPoint\n  public options: DrawTextFieldOptions\n\n  constructor(\n    text: string | string[] | DrawTextField,\n    anchor: IPoint,\n    options: IDrawTextFieldOptions = {}\n  ) {\n    this.text = typeof text === 'string'\n      ? [text]\n      : (text instanceof DrawTextField ? text.text : text)\n    this.anchor = anchor\n    this.options = new DrawTextFieldOptions(options)\n  }\n\n  measureWidth(ctx: CanvasRenderingContext2D): number {\n    const { padding } = this.options\n    return this.text.map(l => ctx.measureText(l).width).reduce((w0, w1) => w0 < w1 ? w1 : w0, 0) + (2 * padding)\n  }\n\n  measureHeight(): number {\n    const { fontSize, padding } = this.options\n    return this.text.length * fontSize + (2 * padding)\n  }\n\n  getUpperLeft(ctx: CanvasRenderingContext2D, canvasDims?: IDimensions): IPoint {\n    const { anchorPosition } = this.options\n    const isShiftLeft = anchorPosition === AnchorPosition.BOTTOM_RIGHT || anchorPosition === AnchorPosition.TOP_RIGHT\n    const isShiftTop = anchorPosition === AnchorPosition.BOTTOM_LEFT || anchorPosition === AnchorPosition.BOTTOM_RIGHT\n\n    const textFieldWidth = this.measureWidth(ctx)\n    const textFieldHeight = this.measureHeight()\n    const x = (isShiftLeft ? this.anchor.x - textFieldWidth : this.anchor.x)\n    const y = isShiftTop ? this.anchor.y - textFieldHeight : this.anchor.y\n\n    // adjust anchor if text box exceeds canvas borders\n    if (canvasDims) {\n      const { width, height } = canvasDims\n      const newX = Math.max(Math.min(x, width - textFieldWidth), 0)\n      const newY = Math.max(Math.min(y, height - textFieldHeight), 0)\n      return { x: newX, y: newY }\n    }\n    return { x, y }\n  }\n\n  draw(canvasArg: string | HTMLCanvasElement | CanvasRenderingContext2D) {\n    const canvas = resolveInput(canvasArg)\n    const ctx = getContext2dOrThrow(canvas)\n\n    const { backgroundColor, fontColor, fontSize, fontStyle, padding } = this.options\n\n    ctx.font = `${fontSize}px ${fontStyle}`\n    const maxTextWidth = this.measureWidth(ctx)\n    const textHeight = this.measureHeight()\n\n    ctx.fillStyle = backgroundColor\n    const upperLeft = this.getUpperLeft(ctx, canvas)\n    ctx.fillRect(upperLeft.x, upperLeft.y, maxTextWidth, textHeight)\n\n    ctx.fillStyle = fontColor;\n    this.text.forEach((textLine, i) => {\n      const x = padding + upperLeft.x\n      const y = padding + upperLeft.y + ((i + 1) * fontSize)\n      ctx.fillText(textLine, x, y)\n    })\n  }\n}", "import { Box, IBoundingBox, IRect } from '../classes';\nimport { getContext2dOrThrow } from '../dom/getContext2dOrThrow';\nimport { AnchorPosition, DrawTextField, DrawTextFieldOptions, IDrawTextFieldOptions } from './DrawTextField';\n\nexport interface IDrawBoxOptions {\n  boxColor?: string\n  lineWidth?: number\n  drawLabelOptions?: IDrawTextFieldOptions\n  label?: string\n}\n\nexport class DrawBoxOptions {\n  public boxColor: string\n  public lineWidth: number\n  public drawLabelOptions: DrawTextFieldOptions\n  public label?: string\n\n  constructor(options: IDrawBoxOptions = {}) {\n    const { boxColor, lineWidth, label, drawLabelOptions } = options\n    this.boxColor = boxColor || 'rgba(0, 0, 255, 1)'\n    this.lineWidth = lineWidth || 2\n    this.label = label\n\n    const defaultDrawLabelOptions = {\n      anchorPosition: AnchorPosition.BOTTOM_LEFT,\n      backgroundColor: this.boxColor\n    }\n    this.drawLabelOptions = new DrawTextFieldOptions(Object.assign({}, defaultDrawLabelOptions, drawLabelOptions))\n  }\n}\n\nexport class DrawBox {\n  public box: Box\n  public options: DrawBoxOptions\n\n  constructor(\n    box: IBoundingBox | IRect,\n    options: IDrawBoxOptions = {}\n  ) {\n    this.box = new Box(box)\n    this.options = new DrawBoxOptions(options)\n  }\n\n  draw(canvasArg: string | HTMLCanvasElement | CanvasRenderingContext2D) {\n    const ctx = getContext2dOrThrow(canvasArg)\n\n    const { boxColor, lineWidth } = this.options\n\n    const { x, y, width, height } = this.box\n    ctx.strokeStyle = boxColor\n    ctx.lineWidth = lineWidth\n    ctx.strokeRect(x, y, width, height)\n\n    const { label } = this.options\n    if (label) {\n      new DrawTextField([label], { x: x - (lineWidth / 2), y }, this.options.drawLabelOptions).draw(canvasArg)\n    }\n  }\n}", "import { Box, IBoundingBox, IRect } from '../classes';\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { isWithFaceDetection, WithFaceDetection } from '../factories/WithFaceDetection';\nimport { round } from '../utils';\nimport { DrawBox } from './DrawBox';\n\nexport type TDrawDetectionsInput = IRect | IBoundingBox | FaceDetection | WithFaceDetection<{}>\n\nexport function drawDetections(\n  canvasArg: string | HTMLCanvasElement,\n  detections: TDrawDetectionsInput | Array<TDrawDetectionsInput>\n) {\n  const detectionsArray = Array.isArray(detections) ? detections : [detections]\n\n  detectionsArray.forEach(det => {\n    const score = det instanceof FaceDetection\n      ? det.score\n      : (isWithFaceDetection(det) ? det.detection.score : undefined)\n\n    const box = det instanceof FaceDetection\n      ? det.box\n      : (isWithFaceDetection(det) ? det.detection.box : new Box(det))\n\n    const label = score ? `${round(score)}` : undefined\n    new DrawBox(box, { label }).draw(canvasArg)\n  })\n}", "import { env } from '../env';\n\nexport function isMediaLoaded(media: HTMLImageElement | HTMLVideoElement) : boolean {\n\n  const { Image, Video } = env.getEnv()\n\n  return (media instanceof Image && media.complete)\n    || (media instanceof Video && media.readyState >= 3)\n}\n", "import { env } from '../env';\nimport { isMediaLoaded } from './isMediaLoaded';\n\nexport function awaitMediaLoaded(media: HTMLImageElement | HTMLVideoElement | HTMLCanvasElement) {\n\n  return new Promise((resolve, reject) => {\n    if (media instanceof env.getEnv().Canvas || isMediaLoaded(media)) {\n      return resolve(null)\n    }\n\n    function onLoad(e: Event) {\n      if (!e.currentTarget) return\n      e.currentTarget.removeEventListener('load', onLoad)\n      e.currentTarget.removeEventListener('error', onError)\n      resolve(e)\n    }\n\n    function onError(e: Event) {\n      if (!e.currentTarget) return\n      e.currentTarget.removeEventListener('load', onLoad)\n      e.currentTarget.removeEventListener('error', onError)\n      reject(e)\n    }\n\n    media.addEventListener('load', onLoad)\n    media.addEventListener('error', onError)\n  })\n}", "import { env } from '../env';\n\nexport function bufferToImage(buf: Blob): Promise<HTMLImageElement> {\n  return new Promise((resolve, reject) => {\n    if (!(buf instanceof Blob)) {\n      return reject('bufferToImage - expected buf to be of type: Blob')\n    }\n\n    const reader = new FileReader()\n    reader.onload = () => {\n      if (typeof reader.result !== 'string') {\n        return reject('bufferToImage - expected reader.result to be a string, in onload')\n      }\n\n      const img = env.getEnv().createImageElement()\n      img.onload = () => resolve(img)\n      img.onerror = reject\n      img.src = reader.result\n    }\n    reader.onerror = reject\n    reader.readAsDataURL(buf)\n  })\n}", "import { Dimensions, IDimensions } from '../classes/Dimensions';\nimport { env } from '../env';\n\nexport function getMediaDimensions(input: HTMLImageElement | HTMLCanvasElement | HTMLVideoElement | IDimensions): Dimensions {\n\n  const { Image, Video } = env.getEnv()\n\n  if (input instanceof Image) {\n    return new Dimensions(input.naturalWidth, input.naturalHeight)\n  }\n  if (input instanceof Video) {\n    return new Dimensions(input.videoWidth, input.videoHeight)\n  }\n  return new Dimensions(input.width, input.height)\n}\n", "import { IDimensions } from '../classes/Dimensions';\nimport { env } from '../env';\nimport { getContext2dOrThrow } from './getContext2dOrThrow';\nimport { getMediaDimensions } from './getMediaDimensions';\nimport { isMediaLoaded } from './isMediaLoaded';\n\nexport function createCanvas({ width, height }: IDimensions): HTMLCanvasElement {\n\n  const { createCanvasElement } = env.getEnv()\n  const canvas = createCanvasElement()\n  canvas.width = width\n  canvas.height = height\n  return canvas\n}\n\nexport function createCanvasFromMedia(media: HTMLImageElement | HTMLVideoElement | ImageData, dims?: IDimensions): HTMLCanvasElement {\n\n  const { ImageData } = env.getEnv()\n\n  if (!(media instanceof ImageData) && !isMediaLoaded(media)) {\n    throw new Error('createCanvasFromMedia - media has not finished loading yet')\n  }\n\n  const { width, height } = dims || getMediaDimensions(media)\n  const canvas = createCanvas({ width, height })\n\n  if (media instanceof ImageData) {\n    getContext2dOrThrow(canvas).putImageData(media, 0, 0)\n  } else {\n    getContext2dOrThrow(canvas).drawImage(media, 0, 0, width, height)\n  }\n  return canvas\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { env } from '../env';\nimport { isTensor4D } from '../utils';\n\nexport async function imageTensorToCanvas(\n  imgTensor: tf.Tensor,\n  canvas?: HTMLCanvasElement\n): Promise<HTMLCanvasElement> {\n\n  const targetCanvas = canvas || env.getEnv().createCanvasElement()\n\n  const [height, width, numChannels] = imgTensor.shape.slice(isTensor4D(imgTensor) ? 1 : 0)\n  const imgTensor3D = tf.tidy(() => imgTensor.as3D(height, width, numChannels).toInt())\n  await tf.browser.toPixels(imgTensor3D, targetCanvas)\n\n  imgTensor3D.dispose()\n\n  return targetCanvas\n}", "import { env } from '../env';\n\nexport function isMediaElement(input: any) {\n\n  const { Image, Canvas, Video } = env.getEnv()\n\n  return input instanceof Image\n    || input instanceof Canvas\n    || input instanceof Video\n}", "import { env } from '../env';\nimport { createCanvas, createCanvasFromMedia } from './createCanvas';\nimport { getContext2dOrThrow } from './getContext2dOrThrow';\nimport { getMediaDimensions } from './getMediaDimensions';\n\nexport function imageToSquare(input: HTMLImageElement | HTMLCanvasElement, inputSize: number, centerImage: boolean = false) {\n\n  const { Image, Canvas } = env.getEnv()\n\n  if (!(input instanceof Image || input instanceof Canvas)) {\n    throw new Error('imageToSquare - expected arg0 to be HTMLImageElement | HTMLCanvasElement')\n  }\n\n  const dims = getMediaDimensions(input)\n  const scale = inputSize / Math.max(dims.height, dims.width)\n  const width = scale * dims.width\n  const height = scale * dims.height\n\n  const targetCanvas = createCanvas({ width: inputSize, height: inputSize })\n  const inputCanvas = input instanceof Canvas ? input : createCanvasFromMedia(input)\n\n  const offset = Math.abs(width - height) / 2\n  const dx = centerImage && width < height ? offset : 0\n  const dy = centerImage && height < width ? offset : 0\n  getContext2dOrThrow(targetCanvas).drawImage(inputCanvas, dx, dy, width, height)\n\n  return targetCanvas\n}", "import * as tf from '@tensorflow/tfjs-core';\n\nimport { Dimensions } from '../classes/Dimensions';\nimport { env } from '../env';\nimport { padToSquare } from '../ops/padToSquare';\nimport { computeReshapedDimensions, isTensor3D, isTensor4D, range } from '../utils';\nimport { createCanvasFromMedia } from './createCanvas';\nimport { imageToSquare } from './imageToSquare';\nimport { TResolvedNetInput } from './types';\n\nexport class NetInput {\n  private _imageTensors: Array<tf.Tensor3D | tf.Tensor4D> = []\n  private _canvases: HTMLCanvasElement[] = []\n  private _batchSize: number\n  private _treatAsBatchInput: boolean = false\n\n  private _inputDimensions: number[][] = []\n  private _inputSize: number\n\n  constructor(\n    inputs: Array<TResolvedNetInput>,\n    treatAsBatchInput: boolean = false\n  ) {\n    if (!Array.isArray(inputs)) {\n      throw new Error(`NetInput.constructor - expected inputs to be an Array of TResolvedNetInput or to be instanceof tf.Tensor4D, instead have ${inputs}`)\n    }\n\n    this._treatAsBatchInput = treatAsBatchInput\n    this._batchSize = inputs.length\n\n    inputs.forEach((input, idx) => {\n\n      if (isTensor3D(input)) {\n        this._imageTensors[idx] = input\n        this._inputDimensions[idx] = input.shape\n        return\n      }\n\n      if (isTensor4D(input)) {\n        const batchSize = (input as any).shape[0]\n        if (batchSize !== 1) {\n          throw new Error(`NetInput - tf.Tensor4D with batchSize ${batchSize} passed, but not supported in input array`)\n        }\n\n        this._imageTensors[idx] = input\n        this._inputDimensions[idx] = (input as any).shape.slice(1)\n        return\n      }\n\n      const canvas = (input as any) instanceof env.getEnv().Canvas ? input : createCanvasFromMedia(input)\n      this._canvases[idx] = canvas\n      this._inputDimensions[idx] = [canvas.height, canvas.width, 3]\n    })\n  }\n\n  public get imageTensors(): Array<tf.Tensor3D | tf.Tensor4D> {\n    return this._imageTensors\n  }\n\n  public get canvases(): HTMLCanvasElement[] {\n    return this._canvases\n  }\n\n  public get isBatchInput(): boolean {\n    return this.batchSize > 1 || this._treatAsBatchInput\n  }\n\n  public get batchSize(): number {\n    return this._batchSize\n  }\n\n  public get inputDimensions(): number[][] {\n    return this._inputDimensions\n  }\n\n  public get inputSize(): number | undefined {\n    return this._inputSize\n  }\n\n  public get reshapedInputDimensions(): Dimensions[] {\n    return range(this.batchSize, 0, 1).map(\n      (_, batchIdx) => this.getReshapedInputDimensions(batchIdx)\n    )\n  }\n\n  public getInput(batchIdx: number): tf.Tensor3D  | tf.Tensor4D | HTMLCanvasElement {\n    return this.canvases[batchIdx] || this.imageTensors[batchIdx]\n  }\n\n  public getInputDimensions(batchIdx: number): number[] {\n    return this._inputDimensions[batchIdx]\n  }\n\n  public getInputHeight(batchIdx: number): number {\n    return this._inputDimensions[batchIdx][0]\n  }\n\n  public getInputWidth(batchIdx: number): number {\n    return this._inputDimensions[batchIdx][1]\n  }\n\n  public getReshapedInputDimensions(batchIdx: number): Dimensions {\n    if (typeof this.inputSize !== 'number') {\n      throw new Error('getReshapedInputDimensions - inputSize not set, toBatchTensor has not been called yet')\n    }\n\n    const width = this.getInputWidth(batchIdx)\n    const height = this.getInputHeight(batchIdx)\n    return computeReshapedDimensions({ width, height }, this.inputSize)\n  }\n\n  /**\n   * Create a batch tensor from all input canvases and tensors\n   * with size [batchSize, inputSize, inputSize, 3].\n   *\n   * @param inputSize Height and width of the tensor.\n   * @param isCenterImage (optional, default: false) If true, add an equal amount of padding on\n   * both sides of the minor dimension oof the image.\n   * @returns The batch tensor.\n   */\n  public toBatchTensor(inputSize: number, isCenterInputs: boolean = true): tf.Tensor4D {\n\n    this._inputSize = inputSize\n\n    return tf.tidy(() => {\n\n      const inputTensors = range(this.batchSize, 0, 1).map(batchIdx => {\n        const input = this.getInput(batchIdx)\n\n        if (input instanceof tf.Tensor) {\n          // @ts-ignore: error TS2344: Type 'Rank.R4' does not satisfy the constraint 'Tensor<Rank>'.\n          let imgTensor = isTensor4D(input) ? input : input.expandDims<tf.Rank.R4>()\n          // @ts-ignore: error TS2344: Type 'Rank.R4' does not satisfy the constraint 'Tensor<Rank>'.\n          imgTensor = padToSquare(imgTensor, isCenterInputs)\n\n          if (imgTensor.shape[1] !== inputSize || imgTensor.shape[2] !== inputSize) {\n            imgTensor = tf.image.resizeBilinear(imgTensor, [inputSize, inputSize])\n          }\n\n          return imgTensor.as3D(inputSize, inputSize, 3)\n        }\n\n        if (input instanceof env.getEnv().Canvas) {\n          return tf.browser.fromPixels(imageToSquare(input, inputSize, isCenterInputs))\n        }\n\n        throw new Error(`toBatchTensor - at batchIdx ${batchIdx}, expected input to be instanceof tf.Tensor or instanceof HTMLCanvasElement, instead have ${input}`)\n      })\n\n      // const batchTensor = tf.stack(inputTensors.map(t => t.toFloat())).as4D(this.batchSize, inputSize, inputSize, 3)\n      const batchTensor = tf.stack(inputTensors.map(t => tf.cast(t, 'float32'))).as4D(this.batchSize, inputSize, inputSize, 3)\n      // const batchTensor = tf.stack(inputTensors.map(t => tf.Tensor.as4D(tf.cast(t, 'float32'))), this.batchSize, inputSize, inputSize, 3);\n      \n      return batchTensor\n    })\n  }\n}", "import { isTensor3D, isTensor4D } from '../utils';\nimport { awaitMediaLoaded } from './awaitMediaLoaded';\nimport { isMediaElement } from './isMediaElement';\nimport { NetInput } from './NetInput';\nimport { resolveInput } from './resolveInput';\nimport { TNetInput } from './types';\n\n/**\n * Validates the input to make sure, they are valid net inputs and awaits all media elements\n * to be finished loading.\n *\n * @param input The input, which can be a media element or an array of different media elements.\n * @returns A NetInput instance, which can be passed into one of the neural networks.\n */\nexport async function toNetInput(inputs: TNetInput): Promise<NetInput> {\n  if (inputs instanceof NetInput) {\n    return inputs\n  }\n\n  let inputArgArray = Array.isArray(inputs)\n      ? inputs\n      : [inputs]\n\n  if (!inputArgArray.length) {\n    throw new Error('toNetInput - empty array passed as input')\n  }\n\n  const getIdxHint = (idx: number) => Array.isArray(inputs) ? ` at input index ${idx}:` : ''\n\n  const inputArray = inputArgArray.map(resolveInput)\n\n  inputArray.forEach((input, i) => {\n    if (!isMediaElement(input) && !isTensor3D(input) && !isTensor4D(input)) {\n\n      if (typeof inputArgArray[i] === 'string') {\n        throw new Error(`toNetInput -${getIdxHint(i)} string passed, but could not resolve HTMLElement for element id ${inputArgArray[i]}`)\n      }\n\n      throw new Error(`toNetInput -${getIdxHint(i)} expected media to be of type HTMLImageElement | HTMLVideoElement | HTMLCanvasElement | tf.Tensor3D, or to be an element id`)\n    }\n\n    if (isTensor4D(input)) {\n      // if tf.Tensor4D is passed in the input array, the batch size has to be 1\n      const batchSize = input.shape[0]\n      if (batchSize !== 1) {\n        throw new Error(`toNetInput -${getIdxHint(i)} tf.Tensor4D with batchSize ${batchSize} passed, but not supported in input array`)\n      }\n    }\n  })\n\n  // wait for all media elements being loaded\n  await Promise.all(\n    inputArray.map(input => isMediaElement(input) && awaitMediaLoaded(input))\n  )\n\n  return new NetInput(inputArray, Array.isArray(inputs))\n}", "import { FaceDetection } from '../classes/FaceDetection';\nimport { Rect } from '../classes/Rect';\nimport { env } from '../env';\nimport { createCanvas } from './createCanvas';\nimport { getContext2dOrThrow } from './getContext2dOrThrow';\nimport { imageTensorToCanvas } from './imageTensorToCanvas';\nimport { toNetInput } from './toNetInput';\nimport { TNetInput } from './types';\n\n/**\n * Extracts the image regions containing the detected faces.\n *\n * @param input The image that face detection has been performed on.\n * @param detections The face detection results or face bounding boxes for that image.\n * @returns The Canvases of the corresponding image region for each detected face.\n */\nexport async function extractFaces(\n  input: TNetInput,\n  detections: Array<FaceDetection | Rect>\n): Promise<HTMLCanvasElement[]> {\n\n  const { Canvas } = env.getEnv()\n\n  let canvas = input as HTMLCanvasElement\n\n  if (!(input instanceof Canvas)) {\n    const netInput = await toNetInput(input)\n\n    if (netInput.batchSize > 1) {\n      throw new Error('extractFaces - batchSize > 1 not supported')\n    }\n\n    const tensorOrCanvas = netInput.getInput(0)\n    canvas = tensorOrCanvas instanceof Canvas\n      ? tensorOrCanvas\n      : await imageTensorToCanvas(tensorOrCanvas)\n  }\n\n  const ctx = getContext2dOrThrow(canvas)\n  const boxes = detections.map(\n    det => det instanceof FaceDetection\n      ? det.forSize(canvas.width, canvas.height).box.floor()\n      : det\n  )\n    .map(box => box.clipAtImageBorders(canvas.width, canvas.height))\n\n  return boxes.map(({ x, y, width, height }) => {\n    const faceImg = createCanvas({ width, height })\n    getContext2dOrThrow(faceImg)\n      .putImageData(ctx.getImageData(x, y, width, height), 0, 0)\n    return faceImg\n  })\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { Rect } from '../classes';\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { isTensor3D, isTensor4D } from '../utils';\n\n/**\n * Extracts the tensors of the image regions containing the detected faces.\n * Useful if you want to compute the face descriptors for the face images.\n * Using this method is faster then extracting a canvas for each face and\n * converting them to tensors individually.\n *\n * @param imageTensor The image tensor that face detection has been performed on.\n * @param detections The face detection results or face bounding boxes for that image.\n * @returns Tensors of the corresponding image region for each detected face.\n */\nexport async function extractFaceTensors(\n  imageTensor: tf.Tensor3D | tf.Tensor4D,\n  detections: Array<FaceDetection | Rect>\n): Promise<tf.Tensor3D[]> {\n\n  if (!isTensor3D(imageTensor) && !isTensor4D(imageTensor)) {\n    throw new Error('extractFaceTensors - expected image tensor to be 3D or 4D')\n  }\n\n  if (isTensor4D(imageTensor) && imageTensor.shape[0] > 1) {\n    throw new Error('extractFaceTensors - batchSize > 1 not supported')\n  }\n\n  return tf.tidy(() => {\n    const [imgHeight, imgWidth, numChannels] = imageTensor.shape.slice(isTensor4D(imageTensor) ? 1 : 0)\n\n    const boxes = detections.map(\n      det => det instanceof FaceDetection\n        ? det.forSize(imgWidth, imgHeight).box\n        : det\n    )\n      .map(box => box.clipAtImageBorders(imgWidth, imgHeight))\n\n    const faceTensors = boxes.map(({ x, y, width, height }) =>\n      tf.slice3d(imageTensor.as3D(imgHeight, imgWidth, numChannels), [y, x, 0], [height, width, numChannels])\n    )\n\n    return faceTensors\n  })\n}", "import { env } from '../env';\n\nexport async function fetchOrThrow(\n  url: string,\n  init?: RequestInit\n): Promise<Response> {\n\n  const fetch = env.getEnv().fetch\n  const res = await fetch(url, init)\n  if (!(res.status < 400)) {\n    throw new Error(`failed to fetch: (${res.status}) ${res.statusText}, from url: ${res.url}`)\n  }\n  return res\n}", "import { bufferToImage } from './bufferToImage';\nimport { fetchOrThrow } from './fetchOrThrow';\n\nexport async function fetchImage(uri: string): Promise<HTMLImageElement> {\n  const res = await fetchOrThrow(uri)\n  const blob = await (res).blob()\n\n  if (!blob.type.startsWith('image/')) {\n    throw new Error(`fetchImage - expected blob type to be of type image/*, instead have: ${blob.type}, for url: ${res.url}`)\n  }\n  return bufferToImage(blob)\n}\n", "import { fetchOrThrow } from './fetchOrThrow';\n\nexport async function fetchJson<T>(uri: string): Promise<T> {\n  return (await fetchOrThrow(uri)).json()\n}\n", "import { fetchOrThrow } from './fetchOrThrow';\n\nexport async function fetchNetWeights(uri: string): Promise<Float32Array> {\n  return new Float32Array(await (await fetchOrThrow(uri)).arrayBuffer())\n}\n", "export function getModelUris(uri: string | undefined, defaultModelName: string) {\n  const defaultManifestFilename = `${defaultModelName}-weights_manifest.json`\n\n  if (!uri) {\n    return {\n      modelBaseUri: '',\n      manifestUri: defaultManifestFilename\n    }\n  }\n\n  if (uri === '/') {\n    return {\n      modelBaseUri: '/',\n      manifestUri: `/${defaultManifestFilename}`\n    }\n  }\n  const protocol = uri.startsWith('http://') ? 'http://' : uri.startsWith('https://') ? 'https://' : '';\n  uri = uri.replace(protocol, '');\n\n  const parts = uri.split('/').filter(s => s)\n\n  const manifestFile = uri.endsWith('.json')\n    ? parts[parts.length - 1]\n    : defaultManifestFilename\n\n  let modelBaseUri = protocol + (uri.endsWith('.json') ? parts.slice(0, parts.length - 1) : parts).join('/')\n  modelBaseUri = uri.startsWith('/') ? `/${modelBaseUri}` : modelBaseUri\n\n  return {\n    modelBaseUri,\n    manifestUri: modelBaseUri === '/' ? `/${manifestFile}` : `${modelBaseUri}/${manifestFile}`\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { getModelUris } from '../common/getModelUris';\nimport { fetchJson } from './fetchJson';\n\nexport async function loadWeightMap(\n  uri: string | undefined,\n  defaultModelName: string,\n): Promise<tf.NamedTensorMap> {\n  const { manifestUri, modelBaseUri } = getModelUris(uri, defaultModelName)\n  let manifest = await fetchJson<tf.io.WeightsManifestConfig>(manifestUri)\n  // if (manifest['weightsManifest']) manifest = manifest['weightsManifest'];\n  return tf.io.loadWeights(manifest, modelBaseUri)\n}", "import { IDimensions } from '../classes';\nimport { getMediaDimensions } from './getMediaDimensions';\n\nexport function matchDimensions(input: IDimensions, reference: IDimensions, useMediaDimensions: boolean = false) {\n  const { width, height } = useMediaDimensions\n    ? getMediaDimensions(reference)\n    : reference\n  input.width = width\n  input.height = height\n  return { width, height }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { ParamMapping } from './common';\nimport { getModelUris } from './common/getModelUris';\nimport { loadWeightMap } from './dom';\nimport { env } from './env';\n\nexport abstract class NeuralNetwork<TNetParams> {\n\n  protected _params: TNetParams | undefined = undefined\n  protected _paramMappings: ParamMapping[] = []\n\n  constructor(protected _name: string) {\n    /*\n    try {\n      const testTensor = tf.tensor([0]);\n      testTensor.toFloat();\n    } catch (err) {\n      throw new Error(`tfjs module not loaded: load '@tensorflow/tfjs' or '@tensorflow/tfjs-core' with appropriate backend explicitly`);\n    }\n    */\n  }\n\n  public get params(): TNetParams | undefined { return this._params }\n  public get paramMappings(): ParamMapping[] { return this._paramMappings }\n  public get isLoaded(): boolean { return !!this.params }\n\n  public getParamFromPath(paramPath: string): tf.Tensor {\n    const { obj, objProp } = this.traversePropertyPath(paramPath)\n    return obj[objProp]\n  }\n\n  public reassignParamFromPath(paramPath: string, tensor: tf.Tensor) {\n    const { obj, objProp } = this.traversePropertyPath(paramPath)\n    obj[objProp].dispose()\n    obj[objProp] = tensor\n  }\n\n  public getParamList() {\n    return this._paramMappings.map(({ paramPath }) => ({\n      path: paramPath,\n      tensor: this.getParamFromPath(paramPath)\n    }))\n  }\n\n  public getTrainableParams() {\n    return this.getParamList().filter(param => param.tensor instanceof tf.Variable)\n  }\n\n  public getFrozenParams() {\n    return this.getParamList().filter(param => !(param.tensor instanceof tf.Variable))\n  }\n\n  public variable() {\n    this.getFrozenParams().forEach(({ path, tensor }) => {\n      this.reassignParamFromPath(path, tensor.variable())\n    })\n  }\n\n  public freeze() {\n    this.getTrainableParams().forEach(({ path, tensor: variable }) => {\n      const tensor = tf.tensor(variable.dataSync())\n      variable.dispose()\n      this.reassignParamFromPath(path, tensor)\n    })\n  }\n\n  public dispose(throwOnRedispose: boolean = true) {\n    this.getParamList().forEach(param => {\n      if (throwOnRedispose && param.tensor.isDisposed) {\n        throw new Error(`param tensor has already been disposed for path ${param.path}`)\n      }\n      param.tensor.dispose()\n    })\n    this._params = undefined\n  }\n\n  public serializeParams(): Float32Array {\n    return new Float32Array(\n      this.getParamList()\n        .map(({ tensor }) => Array.from(tensor.dataSync()) as number[])\n        .reduce((flat, arr) => flat.concat(arr))\n    )\n  }\n\n  public async load(weightsOrUrl: Float32Array | string | undefined): Promise<void> {\n    if (weightsOrUrl instanceof Float32Array) {\n      this.extractWeights(weightsOrUrl)\n      return\n    }\n\n    await this.loadFromUri(weightsOrUrl)\n  }\n\n  public async loadFromUri(uri: string | undefined) {\n    if (uri && typeof uri !== 'string') {\n      throw new Error(`${this._name}.loadFromUri - expected model uri`)\n    }\n\n    const weightMap = await loadWeightMap(uri, this.getDefaultModelName())\n    this.loadFromWeightMap(weightMap)\n  }\n\n  public async loadFromDisk(filePath: string | undefined) {\n    if (filePath && typeof filePath !== 'string') {\n      throw new Error(`${this._name}.loadFromDisk - expected model file path`)\n    }\n\n    const { readFile } = env.getEnv()\n\n    const { manifestUri, modelBaseUri } = getModelUris(filePath, this.getDefaultModelName())\n\n    const fetchWeightsFromDisk = (filePaths: string[]) => Promise.all(\n      filePaths.map(filePath => readFile(filePath).then(buf => buf.buffer))\n    )\n    const loadWeights = tf.io.weightsLoaderFactory(fetchWeightsFromDisk)\n    const manifest = JSON.parse((await readFile(manifestUri)).toString())\n    const weightMap = await loadWeights(manifest, modelBaseUri)\n\n    this.loadFromWeightMap(weightMap)\n  }\n\n  public loadFromWeightMap(weightMap: tf.NamedTensorMap) {\n    const {\n      paramMappings,\n      params\n    } = this.extractParamsFromWeigthMap(weightMap)\n\n    this._paramMappings = paramMappings\n    this._params = params\n  }\n\n  public extractWeights(weights: Float32Array) {\n    const {\n      paramMappings,\n      params\n    } = this.extractParams(weights)\n\n    this._paramMappings = paramMappings\n    this._params = params\n  }\n\n  private traversePropertyPath(paramPath: string) {\n    if (!this.params) {\n      throw new Error(`traversePropertyPath - model has no loaded params`)\n    }\n\n    const result = paramPath.split('/').reduce((res: { nextObj: any, obj?: any, objProp?: string }, objProp) => {\n      if (!res.nextObj.hasOwnProperty(objProp)) {\n        throw new Error(`traversePropertyPath - object does not have property ${objProp}, for path ${paramPath}`)\n      }\n\n      return { obj: res.nextObj, objProp, nextObj: res.nextObj[objProp] }\n    }, { nextObj: this.params })\n\n    const { obj, objProp } = result\n    if (!obj || !objProp || !(obj[objProp] instanceof tf.Tensor)) {\n      throw new Error(`traversePropertyPath - parameter is not a tensor, for path ${paramPath}`)\n    }\n\n    return { obj, objProp }\n  }\n\n  protected abstract getDefaultModelName(): string\n  protected abstract extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap): { params: TNetParams, paramMappings: ParamMapping[] }\n  protected abstract extractParams(weights: Float32Array): { params: TNetParams, paramMappings: ParamMapping[] }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { SeparableConvParams } from './types';\n\nexport function depthwiseSeparableConv(\n  x: tf.Tensor4D,\n  params: SeparableConvParams,\n  stride: [number, number]\n): tf.Tensor4D {\n  return tf.tidy(() => {\n    let out = tf.separableConv2d(x, params.depthwise_filter, params.pointwise_filter, stride, 'same')\n    out = tf.add(out, params.bias)\n    return out\n  })\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { ConvParams, SeparableConvParams } from '../common';\nimport { depthwiseSeparableConv } from '../common/depthwiseSeparableConv';\nimport { DenseBlock3Params, DenseBlock4Params } from './types';\n\nexport function denseBlock3(\n  x: tf.Tensor4D,\n  denseBlockParams: DenseBlock3Params,\n  isFirstLayer: boolean = false\n): tf.Tensor4D {\n  return tf.tidy(() => {\n    const out1 = tf.relu(\n      isFirstLayer\n        ? tf.add(\n          tf.conv2d(x, (denseBlockParams.conv0 as ConvParams).filters, [2, 2], 'same'),\n          denseBlockParams.conv0.bias\n        )\n        : depthwiseSeparableConv(x, denseBlockParams.conv0 as SeparableConvParams, [2, 2])\n    ) as tf.Tensor4D\n    const out2 = depthwiseSeparableConv(out1, denseBlockParams.conv1, [1, 1])\n\n    const in3 = tf.relu(tf.add(out1, out2)) as tf.Tensor4D\n    const out3 = depthwiseSeparableConv(in3, denseBlockParams.conv2, [1, 1])\n\n    return tf.relu(tf.add(out1, tf.add(out2, out3))) as tf.Tensor4D\n  })\n}\n\nexport function denseBlock4(\n  x: tf.Tensor4D,\n  denseBlockParams: DenseBlock4Params,\n  isFirstLayer: boolean = false,\n  isScaleDown: boolean = true\n): tf.Tensor4D {\n  return tf.tidy(() => {\n    const out1 = tf.relu(\n      isFirstLayer\n        ? tf.add(\n          tf.conv2d(x, (denseBlockParams.conv0 as ConvParams).filters, isScaleDown ? [2, 2] : [1, 1], 'same'),\n          denseBlockParams.conv0.bias\n        )\n        : depthwiseSeparableConv(x, denseBlockParams.conv0 as SeparableConvParams, isScaleDown ? [2, 2] : [1, 1])\n    ) as tf.Tensor4D\n    const out2 = depthwiseSeparableConv(out1, denseBlockParams.conv1, [1, 1])\n\n    const in3 = tf.relu(tf.add(out1, out2)) as tf.Tensor4D\n    const out3 = depthwiseSeparableConv(in3, denseBlockParams.conv2, [1, 1])\n\n    const in4 = tf.relu(tf.add(out1, tf.add(out2, out3))) as tf.Tensor4D\n    const out4 = depthwiseSeparableConv(in4, denseBlockParams.conv3, [1, 1])\n\n    return tf.relu(tf.add(out1, tf.add(out2, tf.add(out3, out4)))) as tf.Tensor4D\n  })\n}\n", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { ConvParams } from './types';\n\nexport function convLayer(\n  x: tf.Tensor4D,\n  params: ConvParams,\n  padding: 'valid' | 'same' = 'same',\n  withRelu: boolean = false\n): tf.Tensor4D {\n  return tf.tidy(() => {\n    const out = tf.add(\n      tf.conv2d(x, params.filters, [1, 1], padding),\n      params.bias\n    ) as tf.Tensor4D\n\n    return withRelu ? tf.relu(out) : out\n  })\n}", "import { ParamMapping } from './types';\n\nexport function disposeUnusedWeightTensors(weightMap: any, paramMappings: ParamMapping[]) {\n  Object.keys(weightMap).forEach(path => {\n    if (!paramMappings.some(pm => pm.originalPath === path)) {\n      weightMap[path].dispose()\n    }\n  })\n}\n", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { ConvParams, ExtractWeightsFunction, ParamMapping } from './types';\n\nexport function extractConvParamsFactory(\n  extractWeights: ExtractWeightsFunction,\n  paramMappings: ParamMapping[]\n) {\n\n  return function(\n    channelsIn: number,\n    channelsOut: number,\n    filterSize: number,\n    mappedPrefix: string\n  ): ConvParams {\n\n    const filters = tf.tensor4d(\n      extractWeights(channelsIn * channelsOut * filterSize * filterSize),\n      [filterSize, filterSize, channelsIn, channelsOut]\n    )\n    const bias = tf.tensor1d(extractWeights(channelsOut))\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/filters` },\n      { paramPath: `${mappedPrefix}/bias` }\n    )\n\n    return { filters, bias }\n  }\n\n}\n", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { ExtractWeightsFunction, FCParams, ParamMapping } from './types';\n\n\nexport function extractFCParamsFactory(\n  extractWeights: ExtractWeightsFunction,\n  paramMappings: ParamMapping[]\n) {\n\n  return function(\n    channelsIn: number,\n    channelsOut: number,\n    mappedPrefix: string\n  ): FCParams {\n\n    const fc_weights = tf.tensor2d(extractWeights(channelsIn * channelsOut), [channelsIn, channelsOut])\n    const fc_bias = tf.tensor1d(extractWeights(channelsOut))\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/weights` },\n      { paramPath: `${mappedPrefix}/bias` }\n    )\n\n    return {\n      weights: fc_weights,\n      bias: fc_bias\n    }\n  }\n\n}\n", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nexport type ExtractWeightsFunction = (numWeights: number) => Float32Array\n\nexport type ParamMapping = {\n  originalPath?: string\n  paramPath: string\n}\n\nexport type ConvParams = {\n  filters: tf.Tensor4D\n  bias: tf.Tensor1D\n}\n\nexport type FCParams = {\n  weights: tf.Tensor2D\n  bias: tf.Tensor1D\n}\n\nexport class SeparableConvParams {\n  constructor(\n    public depthwise_filter: tf.Tensor4D,\n    public pointwise_filter: tf.Tensor4D,\n    public bias: tf.Tensor1D\n  ) {}\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { ExtractWeightsFunction, ParamMapping, SeparableConvParams } from './types';\n\nexport function extractSeparableConvParamsFactory(\n  extractWeights: ExtractWeightsFunction,\n  paramMappings: ParamMapping[]\n) {\n\n  return function(channelsIn: number, channelsOut: number, mappedPrefix: string): SeparableConvParams {\n    const depthwise_filter = tf.tensor4d(extractWeights(3 * 3 * channelsIn), [3, 3, channelsIn, 1])\n    const pointwise_filter = tf.tensor4d(extractWeights(channelsIn * channelsOut), [1, 1, channelsIn, channelsOut])\n    const bias = tf.tensor1d(extractWeights(channelsOut))\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/depthwise_filter` },\n      { paramPath: `${mappedPrefix}/pointwise_filter` },\n      { paramPath: `${mappedPrefix}/bias` }\n    )\n\n    return new SeparableConvParams(\n      depthwise_filter,\n      pointwise_filter,\n      bias\n    )\n  }\n\n}\n\nexport function loadSeparableConvParamsFactory(\n  extractWeightEntry: <T>(originalPath: string, paramRank: number) => T\n) {\n\n  return function (prefix: string): SeparableConvParams {\n    const depthwise_filter = extractWeightEntry<tf.Tensor4D>(`${prefix}/depthwise_filter`, 4)\n    const pointwise_filter = extractWeightEntry<tf.Tensor4D>(`${prefix}/pointwise_filter`, 4)\n    const bias = extractWeightEntry<tf.Tensor1D>(`${prefix}/bias`, 1)\n\n    return new SeparableConvParams(\n      depthwise_filter,\n      pointwise_filter,\n      bias\n    )\n  }\n\n}\n", "import { isTensor } from '../utils';\nimport { ParamMapping } from './types';\n\nexport function extractWeightEntryFactory(weightMap: any, paramMappings: ParamMapping[]) {\n\n  return function<T> (originalPath: string, paramRank: number, mappedPath?: string): T {\n    const tensor = weightMap[originalPath]\n\n    if (!isTensor(tensor, paramRank)) {\n      throw new Error(`expected weightMap[${originalPath}] to be a Tensor${paramRank}D, instead have ${tensor}`)\n    }\n\n    paramMappings.push(\n      { originalPath, paramPath: mappedPath || originalPath }\n    )\n\n    return tensor\n  }\n\n}\n", "export function extractWeightsFactory(weights: Float32Array) {\n  let remainingWeights = weights\n\n  function extractWeights(numWeights: number): Float32Array {\n    const ret = remainingWeights.slice(0, numWeights)\n    remainingWeights = remainingWeights.slice(numWeights)\n    return ret\n  }\n\n  function getRemainingWeights(): Float32Array {\n    return remainingWeights\n  }\n\n  return {\n    extractWeights,\n    getRemainingWeights\n  }\n}", "import {\n  extractConvParamsFactory,\n  extractSeparableConvParamsFactory,\n  ExtractWeightsFunction,\n  ParamMapping,\n} from '../common';\nimport { DenseBlock3Params, DenseBlock4Params } from './types';\n\nexport function extractorsFactory(extractWeights: ExtractWeightsFunction, paramMappings: ParamMapping[]) {\n\n  const extractConvParams = extractConvParamsFactory(extractWeights, paramMappings)\n  const extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings)\n\n  function extractDenseBlock3Params(channelsIn: number, channelsOut: number, mappedPrefix: string, isFirstLayer: boolean = false): DenseBlock3Params {\n\n    const conv0 = isFirstLayer\n      ? extractConvParams(channelsIn, channelsOut, 3, `${mappedPrefix}/conv0`)\n      : extractSeparableConvParams(channelsIn, channelsOut, `${mappedPrefix}/conv0`)\n    const conv1 = extractSeparableConvParams(channelsOut, channelsOut, `${mappedPrefix}/conv1`)\n    const conv2 = extractSeparableConvParams(channelsOut, channelsOut, `${mappedPrefix}/conv2`)\n\n    return { conv0, conv1, conv2 }\n  }\n\n  function extractDenseBlock4Params(channelsIn: number, channelsOut: number, mappedPrefix: string, isFirstLayer: boolean = false): DenseBlock4Params {\n\n    const { conv0, conv1, conv2 } = extractDenseBlock3Params(channelsIn, channelsOut, mappedPrefix, isFirstLayer)\n    const conv3 = extractSeparableConvParams(channelsOut, channelsOut, `${mappedPrefix}/conv3`)\n\n    return { conv0, conv1, conv2, conv3 }\n  }\n\n  return {\n    extractDenseBlock3Params,\n    extractDenseBlock4Params\n  }\n\n}", "import { extractWeightsFactory, ParamMapping } from '../common';\nimport { extractorsFactory } from './extractorsFactory';\nimport { FaceFeatureExtractorParams } from './types';\n\n\nexport function extractParams(weights: Float32Array): { params: FaceFeatureExtractorParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractWeights,\n    getRemainingWeights\n  } = extractWeightsFactory(weights)\n\n  const {\n    extractDenseBlock4Params\n  } = extractorsFactory(extractWeights, paramMappings)\n\n  const dense0 = extractDenseBlock4Params(3, 32, 'dense0', true)\n  const dense1 = extractDenseBlock4Params(32, 64, 'dense1')\n  const dense2 = extractDenseBlock4Params(64, 128, 'dense2')\n  const dense3 = extractDenseBlock4Params(128, 256, 'dense3')\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`)\n  }\n\n  return {\n    paramMappings,\n    params: { dense0, dense1, dense2, dense3 }\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { ConvParams } from './types';\n\nexport function loadConvParamsFactory(extractWeightEntry: <T>(originalPath: string, paramRank: number) => T) {\n  return function(prefix: string): ConvParams {\n    const filters = extractWeightEntry<tf.Tensor4D>(`${prefix}/filters`, 4)\n    const bias = extractWeightEntry<tf.Tensor1D>(`${prefix}/bias`, 1)\n\n    return { filters, bias }\n  }\n}", "import { extractWeightEntryFactory, loadSeparableConvParamsFactory, ParamMapping } from '../common';\nimport { loadConvParamsFactory } from '../common/loadConvParamsFactory';\nimport { DenseBlock3Params, DenseBlock4Params } from './types';\n\nexport function loadParamsFactory(weightMap: any, paramMappings: ParamMapping[]) {\n\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings)\n\n  const extractConvParams = loadConvParamsFactory(extractWeightEntry)\n  const extractSeparableConvParams = loadSeparableConvParamsFactory(extractWeightEntry)\n\n  function extractDenseBlock3Params(prefix: string, isFirstLayer: boolean = false): DenseBlock3Params {\n    const conv0 = isFirstLayer\n      ? extractConvParams(`${prefix}/conv0`)\n      : extractSeparableConvParams(`${prefix}/conv0`)\n    const conv1 = extractSeparableConvParams(`${prefix}/conv1`)\n    const conv2 = extractSeparableConvParams(`${prefix}/conv2`)\n\n    return { conv0, conv1, conv2 }\n  }\n\n  function extractDenseBlock4Params(prefix: string, isFirstLayer: boolean = false): DenseBlock4Params {\n    const conv0 = isFirstLayer\n      ? extractConvParams(`${prefix}/conv0`)\n      : extractSeparableConvParams(`${prefix}/conv0`)\n    const conv1 = extractSeparableConvParams(`${prefix}/conv1`)\n    const conv2 = extractSeparableConvParams(`${prefix}/conv2`)\n    const conv3 = extractSeparableConvParams(`${prefix}/conv3`)\n\n    return { conv0, conv1, conv2, conv3 }\n  }\n\n  return {\n    extractDenseBlock3Params,\n    extractDenseBlock4Params\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { disposeUnusedWeightTensors, ParamMapping } from '../common';\nimport { loadParamsFactory } from './loadParamsFactory';\nimport { FaceFeatureExtractorParams } from './types';\n\nexport function extractParamsFromWeigthMap(\n  weightMap: tf.NamedTensorMap\n): { params: FaceFeatureExtractorParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractDenseBlock4Params\n  } = loadParamsFactory(weightMap, paramMappings)\n\n  const params = {\n    dense0: extractDenseBlock4Params('dense0', true),\n    dense1: extractDenseBlock4Params('dense1'),\n    dense2: extractDenseBlock4Params('dense2'),\n    dense3: extractDenseBlock4Params('dense3')\n  }\n\n  disposeUnusedWeightTensors(weightMap, paramMappings)\n\n  return { params, paramMappings }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { NetInput, TNetInput, toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { denseBlock4 } from './denseBlock';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { FaceFeatureExtractorParams, IFaceFeatureExtractor } from './types';\n\nexport class FaceFeatureExtractor extends NeuralNetwork<FaceFeatureExtractorParams> implements IFaceFeatureExtractor<FaceFeatureExtractorParams> {\n\n  constructor() {\n    super('FaceFeatureExtractor')\n  }\n\n  public forwardInput(input: NetInput): tf.Tensor4D {\n\n    const { params } = this\n\n    if (!params) {\n      throw new Error('FaceFeatureExtractor - load model before inference')\n    }\n\n    return tf.tidy(() => {\n      const batchTensor = input.toBatchTensor(112, true)\n      const meanRgb = [122.782, 117.001, 104.298]\n      const normalized = normalize(batchTensor, meanRgb).div(tf.scalar(255)) as tf.Tensor4D\n\n      let out = denseBlock4(normalized, params.dense0, true)\n      out = denseBlock4(out, params.dense1)\n      out = denseBlock4(out, params.dense2)\n      out = denseBlock4(out, params.dense3)\n      out = tf.avgPool(out, [7, 7], [2, 2], 'valid')\n\n      return out\n    })\n  }\n\n  public async forward(input: TNetInput): Promise<tf.Tensor4D> {\n    return this.forwardInput(await toNetInput(input))\n  }\n\n  protected getDefaultModelName(): string {\n    return 'face_feature_extractor_model'\n  }\n\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap) {\n    return extractParamsFromWeigthMap(weightMap)\n  }\n\n  protected extractParams(weights: Float32Array) {\n    return extractParams(weights)\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { FCParams } from './types';\n\nexport function fullyConnectedLayer(\n  x: tf.Tensor2D,\n  params: FCParams\n): tf.Tensor2D {\n  return tf.tidy(() =>\n    tf.add(\n      tf.matMul(x, params.weights),\n      params.bias\n    )\n  )\n}", "import { extractFCParamsFactory, extractWeightsFactory, ParamMapping } from '../common';\nimport { NetParams } from './types';\n\nexport function extractParams(weights: Float32Array, channelsIn: number, channelsOut: number): { params: NetParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractWeights,\n    getRemainingWeights\n  } = extractWeightsFactory(weights)\n\n  const extractFCParams = extractFCParamsFactory(extractWeights, paramMappings)\n\n  const fc = extractFCParams(channelsIn, channelsOut, 'fc')\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`)\n  }\n\n  return {\n    paramMappings,\n    params: { fc }\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { disposeUnusedWeightTensors, extractWeightEntryFactory, FCParams, ParamMapping } from '../common';\nimport { NetParams } from './types';\n\nexport function extractParamsFromWeigthMap(\n  weightMap: tf.NamedTensorMap\n): { params: NetParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings)\n\n  function extractFcParams(prefix: string): FCParams {\n    const weights = extractWeightEntry<tf.Tensor2D>(`${prefix}/weights`, 2)\n    const bias = extractWeightEntry<tf.Tensor1D>(`${prefix}/bias`, 1)\n    return { weights, bias }\n  }\n\n  const params = {\n    fc: extractFcParams('fc')\n  }\n\n  disposeUnusedWeightTensors(weightMap, paramMappings)\n\n  return { params, paramMappings }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nexport function seperateWeightMaps(weightMap: tf.NamedTensorMap) {\n\n  const featureExtractorMap: tf.NamedTensorMap = {}\n  const classifierMap: tf.NamedTensorMap = {}\n\n  Object.keys(weightMap).forEach(key => {\n    const map = key.startsWith('fc') ? classifierMap : featureExtractorMap\n    map[key] = weightMap[key]\n  })\n\n  return { featureExtractorMap, classifierMap }\n\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { NetInput } from '../dom';\nimport {\n  FaceFeatureExtractorParams,\n  IFaceFeatureExtractor,\n  TinyFaceFeatureExtractorParams,\n} from '../faceFeatureExtractor/types';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { NetParams } from './types';\nimport { seperateWeightMaps } from './util';\n\nexport abstract class FaceProcessor<\n  TExtractorParams extends FaceFeatureExtractorParams | TinyFaceFeatureExtractorParams\n>\n  extends NeuralNetwork<NetParams> {\n\n  protected _faceFeatureExtractor: IFaceFeatureExtractor<TExtractorParams>\n\n  constructor(_name: string, faceFeatureExtractor: IFaceFeatureExtractor<TExtractorParams>) {\n    super(_name)\n    this._faceFeatureExtractor = faceFeatureExtractor\n  }\n\n  public get faceFeatureExtractor(): IFaceFeatureExtractor<TExtractorParams> {\n    return this._faceFeatureExtractor\n  }\n\n  protected abstract getDefaultModelName(): string\n  protected abstract getClassifierChannelsIn(): number\n  protected abstract getClassifierChannelsOut(): number\n\n  public runNet(input: NetInput | tf.Tensor4D): tf.Tensor2D {\n\n    const { params } = this\n\n    if (!params) {\n      throw new Error(`${this._name} - load model before inference`)\n    }\n\n    return tf.tidy(() => {\n      const bottleneckFeatures = input instanceof NetInput\n        ? this.faceFeatureExtractor.forwardInput(input)\n        : input\n      return fullyConnectedLayer(bottleneckFeatures.as2D(bottleneckFeatures.shape[0], -1), params.fc)\n    })\n  }\n\n  public dispose(throwOnRedispose: boolean = true) {\n    this.faceFeatureExtractor.dispose(throwOnRedispose)\n    super.dispose(throwOnRedispose)\n  }\n\n  public loadClassifierParams(weights: Float32Array) {\n    const { params, paramMappings } = this.extractClassifierParams(weights)\n    this._params = params\n    this._paramMappings = paramMappings\n  }\n\n  public extractClassifierParams(weights: Float32Array) {\n    return extractParams(weights, this.getClassifierChannelsIn(), this.getClassifierChannelsOut())\n  }\n\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap) {\n\n    const { featureExtractorMap, classifierMap } = seperateWeightMaps(weightMap)\n\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap)\n\n    return extractParamsFromWeigthMap(classifierMap)\n  }\n\n  protected extractParams(weights: Float32Array) {\n\n    const cIn = this.getClassifierChannelsIn()\n    const cOut = this.getClassifierChannelsOut()\n    const classifierWeightSize = (cOut * cIn ) + cOut\n\n    const featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize)\n    const classifierWeights = weights.slice(weights.length - classifierWeightSize)\n\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights)\n    return this.extractClassifierParams(classifierWeights)\n  }\n}", "export const FACE_EXPRESSION_LABELS = ['neutral', 'happy', 'sad', 'angry', 'fearful', 'disgusted', 'surprised']\n\nexport class FaceExpressions {\n  public neutral: number\n  public happy: number\n  public sad: number\n  public angry: number\n  public fearful: number\n  public disgusted: number\n  public surprised: number\n\n  constructor(probabilities: number[] | Float32Array) {\n    if (probabilities.length !== 7) {\n      throw new Error(`FaceExpressions.constructor - expected probabilities.length to be 7, have: ${probabilities.length}`)\n    }\n\n    FACE_EXPRESSION_LABELS.forEach((expression, idx) => {\n      this[expression] = probabilities[idx]\n    })\n  }\n\n  asSortedArray() {\n    return FACE_EXPRESSION_LABELS\n      .map(expression => ({ expression, probability: this[expression] as number }))\n      .sort((e0, e1) => e1.probability - e0.probability)\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { NetInput, TNetInput, toNetInput } from '../dom';\nimport { FaceFeatureExtractor } from '../faceFeatureExtractor/FaceFeatureExtractor';\nimport { FaceFeatureExtractorParams } from '../faceFeatureExtractor/types';\nimport { FaceProcessor } from '../faceProcessor/FaceProcessor';\nimport { FaceExpressions } from './FaceExpressions';\n\nexport class FaceExpressionNet extends FaceProcessor<FaceFeatureExtractorParams> {\n\n  constructor(faceFeatureExtractor: FaceFeatureExtractor = new FaceFeatureExtractor()) {\n    super('FaceExpressionNet', faceFeatureExtractor)\n  }\n\n  public forwardInput(input: NetInput | tf.Tensor4D): tf.Tensor2D {\n    return tf.tidy(() => tf.softmax(this.runNet(input)))\n  }\n\n  public async forward(input: TNetInput): Promise<tf.Tensor2D> {\n    return this.forwardInput(await toNetInput(input))\n  }\n\n  public async predictExpressions(input: TNetInput) {\n    const netInput = await toNetInput(input)\n    const out = await this.forwardInput(netInput)\n    const probabilitesByBatch = await Promise.all(tf.unstack(out).map(async t => {\n      const data = await t.data()\n      t.dispose()\n      return data\n    }))\n    out.dispose()\n\n    const predictionsByBatch = probabilitesByBatch\n      .map(probabilites => new FaceExpressions(probabilites as Float32Array))\n\n    return netInput.isBatchInput\n      ? predictionsByBatch\n      : predictionsByBatch[0]\n  }\n\n  protected getDefaultModelName(): string {\n    return 'face_expression_model'\n  }\n\n  protected getClassifierChannelsIn(): number {\n    return 256\n  }\n\n  protected getClassifierChannelsOut(): number {\n    return 7\n  }\n}", "import { FaceExpressions } from '../faceExpressionNet/FaceExpressions';\n\nexport type WithFaceExpressions<TSource> = TSource & {\n  expressions: FaceExpressions\n}\n\nexport function isWithFaceExpressions(obj: any): obj is WithFaceExpressions<{}> {\n  return obj['expressions'] instanceof FaceExpressions\n}\n\nexport function extendWithFaceExpressions<\n  TSource\n> (\n  sourceObj: TSource,\n  expressions: FaceExpressions\n): WithFaceExpressions<TSource> {\n\n  const extension = { expressions }\n  return Object.assign({}, sourceObj, extension)\n}", "import { IPoint, Point } from '../classes';\nimport { FaceExpressions } from '../faceExpressionNet';\nimport { isWithFaceDetection } from '../factories/WithFaceDetection';\nimport { isWithFaceExpressions, WithFaceExpressions } from '../factories/WithFaceExpressions';\nimport { round } from '../utils';\nimport { DrawTextField } from './DrawTextField';\n\nexport type DrawFaceExpressionsInput = FaceExpressions | WithFaceExpressions<{}>\n\nexport function drawFaceExpressions(\n  canvasArg: string | HTMLCanvasElement,\n  faceExpressions: DrawFaceExpressionsInput | Array<DrawFaceExpressionsInput>,\n  minConfidence = 0.1,\n  textFieldAnchor?: IPoint\n) {\n  const faceExpressionsArray = Array.isArray(faceExpressions) ? faceExpressions : [faceExpressions]\n\n  faceExpressionsArray.forEach(e => {\n    const expr = e instanceof FaceExpressions\n      ? e\n      : (isWithFaceExpressions(e) ? e.expressions : undefined)\n    if (!expr) {\n      throw new Error('drawFaceExpressions - expected faceExpressions to be FaceExpressions | WithFaceExpressions<{}> or array thereof')\n    }\n\n    const sorted = expr.asSortedArray()\n    const resultsToDisplay = sorted.filter(expr => expr.probability > minConfidence)\n\n    const anchor = isWithFaceDetection(e)\n      ? e.detection.box.bottomLeft\n      : (textFieldAnchor || new Point(0, 0))\n\n    const drawTextField = new DrawTextField(\n      resultsToDisplay.map(expr => `${expr.expression} (${round(expr.probability)})`),\n      anchor\n    )\n    drawTextField.draw(canvasArg)\n  })\n}", "import { FaceDetection } from '../classes/FaceDetection';\nimport { FaceLandmarks } from '../classes/FaceLandmarks';\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { isWithFaceDetection, WithFaceDetection } from './WithFaceDetection';\n\nexport type WithFaceLandmarks<\n  TSource extends WithFaceDetection<{}>,\n  TFaceLandmarks extends FaceLandmarks = FaceLandmarks68\n> = TSource & {\n  landmarks: TFaceLandmarks\n  unshiftedLandmarks: TFaceLandmarks\n  alignedRect: FaceDetection\n}\n\nexport function isWithFaceLandmarks(obj: any): obj is WithFaceLandmarks<WithFaceDetection<{}>, FaceLandmarks> {\n  return isWithFaceDetection(obj)\n    && obj['landmarks'] instanceof FaceLandmarks\n    && obj['unshiftedLandmarks'] instanceof FaceLandmarks\n    && obj['alignedRect'] instanceof FaceDetection\n}\n\nexport function extendWithFaceLandmarks<\n  TSource extends WithFaceDetection<{}>,\n  TFaceLandmarks extends FaceLandmarks = FaceLandmarks68\n> (\n  sourceObj: TSource,\n  unshiftedLandmarks: TFaceLandmarks\n): WithFaceLandmarks<TSource, TFaceLandmarks> {\n\n  const { box: shift } = sourceObj.detection\n  const landmarks = unshiftedLandmarks.shiftBy<TFaceLandmarks>(shift.x, shift.y)\n\n  const rect = landmarks.align()\n  const { imageDims } = sourceObj.detection\n  const alignedRect = new FaceDetection(sourceObj.detection.score, rect.rescale(imageDims.reverse()), imageDims)\n\n  const extension = {\n    landmarks,\n    unshiftedLandmarks,\n    alignedRect\n  }\n\n  return Object.assign({}, sourceObj, extension)\n}", "import { IPoint } from '../classes';\nimport { FaceLandmarks } from '../classes/FaceLandmarks';\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { getContext2dOrThrow } from '../dom/getContext2dOrThrow';\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\nimport { isWithFaceLandmarks, WithFaceLandmarks } from '../factories/WithFaceLandmarks';\nimport { drawContour } from './drawContour';\n\nexport interface IDrawFaceLandmarksOptions {\n  drawLines?: boolean\n  drawPoints?: boolean\n  lineWidth?: number\n  pointSize?: number\n  lineColor?: string\n  pointColor?: string\n}\n\nexport class DrawFaceLandmarksOptions {\n  public drawLines: boolean\n  public drawPoints: boolean\n  public lineWidth: number\n  public pointSize: number\n  public lineColor: string\n  public pointColor: string\n\n  constructor(options: IDrawFaceLandmarksOptions = {}) {\n    const { drawLines = true, drawPoints = true, lineWidth, lineColor, pointSize, pointColor } = options\n    this.drawLines = drawLines\n    this.drawPoints = drawPoints\n    this.lineWidth = lineWidth || 1\n    this.pointSize = pointSize || 2\n    this.lineColor = lineColor || 'rgba(0, 255, 255, 1)'\n    this.pointColor = pointColor || 'rgba(255, 0, 255, 1)'\n  }\n}\n\nexport class DrawFaceLandmarks {\n  public faceLandmarks: FaceLandmarks\n  public options: DrawFaceLandmarksOptions\n\n  constructor(\n    faceLandmarks: FaceLandmarks,\n    options: IDrawFaceLandmarksOptions = {}\n  ) {\n    this.faceLandmarks = faceLandmarks\n    this.options = new DrawFaceLandmarksOptions(options)\n  }\n\n  draw(canvasArg: string | HTMLCanvasElement | CanvasRenderingContext2D) {\n    const ctx = getContext2dOrThrow(canvasArg)\n\n    const { drawLines, drawPoints, lineWidth, lineColor, pointSize, pointColor } = this.options\n\n    if (drawLines && this.faceLandmarks instanceof FaceLandmarks68) {\n      ctx.strokeStyle = lineColor\n      ctx.lineWidth = lineWidth\n      drawContour(ctx, this.faceLandmarks.getJawOutline())\n      drawContour(ctx, this.faceLandmarks.getLeftEyeBrow())\n      drawContour(ctx, this.faceLandmarks.getRightEyeBrow())\n      drawContour(ctx, this.faceLandmarks.getNose())\n      drawContour(ctx, this.faceLandmarks.getLeftEye(), true)\n      drawContour(ctx, this.faceLandmarks.getRightEye(), true)\n      drawContour(ctx, this.faceLandmarks.getMouth(), true)\n    }\n\n    if (drawPoints) {\n      ctx.strokeStyle = pointColor\n      ctx.fillStyle = pointColor\n\n      const drawPoint = (pt: IPoint) => {\n        ctx.beginPath()\n        ctx.arc(pt.x, pt.y, pointSize, 0, 2 * Math.PI)\n        ctx.fill()\n      }\n      this.faceLandmarks.positions.forEach(drawPoint)\n    }\n  }\n}\n\nexport type DrawFaceLandmarksInput = FaceLandmarks | WithFaceLandmarks<WithFaceDetection<{}>>\n\nexport function drawFaceLandmarks(\n  canvasArg: string | HTMLCanvasElement,\n  faceLandmarks: DrawFaceLandmarksInput | Array<DrawFaceLandmarksInput>\n) {\n  const faceLandmarksArray = Array.isArray(faceLandmarks) ? faceLandmarks : [faceLandmarks]\n  faceLandmarksArray.forEach(f => {\n    const landmarks = f instanceof FaceLandmarks\n      ? f\n      : (isWithFaceLandmarks(f) ? f.landmarks : undefined)\n    if (!landmarks) {\n      throw new Error('drawFaceLandmarks - expected faceExpressions to be FaceLandmarks | WithFaceLandmarks<WithFaceDetection<{}>> or array thereof')\n    }\n\n    new DrawFaceLandmarks(landmarks).draw(canvasArg)\n  })\n}", "export * from './drawContour'\nexport * from './drawDetections'\nexport * from './drawFaceExpressions'\nexport * from './DrawBox'\nexport * from './DrawFaceLandmarks'\nexport * from './DrawTextField'", "import { extractConvParamsFactory, extractSeparableConvParamsFactory, extractWeightsFactory } from '../common';\nimport { ExtractWeightsFunction, ParamMapping } from '../common/types';\nimport { range } from '../utils';\nimport { MainBlockParams, ReductionBlockParams, TinyXceptionParams } from './types';\n\nfunction extractorsFactory(extractWeights: ExtractWeightsFunction, paramMappings: ParamMapping[]) {\n\n  const extractConvParams = extractConvParamsFactory(extractWeights, paramMappings)\n  const extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings)\n\n  function extractReductionBlockParams(channelsIn: number, channelsOut: number, mappedPrefix: string): ReductionBlockParams {\n\n    const separable_conv0 = extractSeparableConvParams(channelsIn, channelsOut, `${mappedPrefix}/separable_conv0`)\n    const separable_conv1 = extractSeparableConvParams(channelsOut, channelsOut, `${mappedPrefix}/separable_conv1`)\n    const expansion_conv = extractConvParams(channelsIn, channelsOut, 1, `${mappedPrefix}/expansion_conv`)\n\n    return { separable_conv0, separable_conv1, expansion_conv }\n  }\n\n  function extractMainBlockParams(channels: number, mappedPrefix: string): MainBlockParams {\n\n    const separable_conv0 = extractSeparableConvParams(channels, channels, `${mappedPrefix}/separable_conv0`)\n    const separable_conv1 = extractSeparableConvParams(channels, channels, `${mappedPrefix}/separable_conv1`)\n    const separable_conv2 = extractSeparableConvParams(channels, channels, `${mappedPrefix}/separable_conv2`)\n\n    return { separable_conv0, separable_conv1, separable_conv2 }\n  }\n\n  return {\n    extractConvParams,\n    extractSeparableConvParams,\n    extractReductionBlockParams,\n    extractMainBlockParams\n  }\n\n}\n\nexport function extractParams(weights: Float32Array, numMainBlocks: number): { params: TinyXceptionParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractWeights,\n    getRemainingWeights\n  } = extractWeightsFactory(weights)\n\n  const {\n    extractConvParams,\n    extractSeparableConvParams,\n    extractReductionBlockParams,\n    extractMainBlockParams\n  } = extractorsFactory(extractWeights, paramMappings)\n\n  const entry_flow_conv_in = extractConvParams(3, 32, 3, 'entry_flow/conv_in')\n  const entry_flow_reduction_block_0 = extractReductionBlockParams(32, 64, 'entry_flow/reduction_block_0')\n  const entry_flow_reduction_block_1 = extractReductionBlockParams(64, 128, 'entry_flow/reduction_block_1')\n\n  const entry_flow = {\n    conv_in: entry_flow_conv_in,\n    reduction_block_0: entry_flow_reduction_block_0,\n    reduction_block_1: entry_flow_reduction_block_1\n  }\n\n  const middle_flow = {}\n  range(numMainBlocks, 0, 1).forEach((idx) => {\n    middle_flow[`main_block_${idx}`] = extractMainBlockParams(128, `middle_flow/main_block_${idx}`)\n  })\n\n  const exit_flow_reduction_block = extractReductionBlockParams(128, 256, 'exit_flow/reduction_block')\n  const exit_flow_separable_conv = extractSeparableConvParams(256, 512, 'exit_flow/separable_conv')\n\n  const exit_flow = {\n    reduction_block: exit_flow_reduction_block,\n    separable_conv: exit_flow_separable_conv\n  }\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`)\n  }\n\n  return {\n    paramMappings,\n    params: { entry_flow, middle_flow, exit_flow }\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport {\n  disposeUnusedWeightTensors,\n  extractWeightEntryFactory,\n  loadSeparableConvParamsFactory,\n  ParamMapping,\n} from '../common';\nimport { loadConvParamsFactory } from '../common/loadConvParamsFactory';\nimport { range } from '../utils';\nimport { MainBlockParams, ReductionBlockParams, TinyXceptionParams } from './types';\n\nfunction loadParamsFactory(weightMap: any, paramMappings: ParamMapping[]) {\n\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings)\n\n  const extractConvParams = loadConvParamsFactory(extractWeightEntry)\n  const extractSeparableConvParams = loadSeparableConvParamsFactory(extractWeightEntry)\n\n  function extractReductionBlockParams(mappedPrefix: string): ReductionBlockParams {\n\n    const separable_conv0 = extractSeparableConvParams(`${mappedPrefix}/separable_conv0`)\n    const separable_conv1 = extractSeparableConvParams(`${mappedPrefix}/separable_conv1`)\n    const expansion_conv = extractConvParams(`${mappedPrefix}/expansion_conv`)\n\n    return { separable_conv0, separable_conv1, expansion_conv }\n  }\n\n  function extractMainBlockParams(mappedPrefix: string): MainBlockParams {\n\n    const separable_conv0 = extractSeparableConvParams(`${mappedPrefix}/separable_conv0`)\n    const separable_conv1 = extractSeparableConvParams(`${mappedPrefix}/separable_conv1`)\n    const separable_conv2 = extractSeparableConvParams(`${mappedPrefix}/separable_conv2`)\n\n    return { separable_conv0, separable_conv1, separable_conv2 }\n  }\n\n  return {\n    extractConvParams,\n    extractSeparableConvParams,\n    extractReductionBlockParams,\n    extractMainBlockParams\n  }\n}\n\nexport function extractParamsFromWeigthMap(\n  weightMap: tf.NamedTensorMap,\n  numMainBlocks: number\n): { params: TinyXceptionParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractConvParams,\n    extractSeparableConvParams,\n    extractReductionBlockParams,\n    extractMainBlockParams\n  } = loadParamsFactory(weightMap, paramMappings)\n\n  const entry_flow_conv_in = extractConvParams('entry_flow/conv_in')\n  const entry_flow_reduction_block_0 = extractReductionBlockParams('entry_flow/reduction_block_0')\n  const entry_flow_reduction_block_1 = extractReductionBlockParams('entry_flow/reduction_block_1')\n\n  const entry_flow = {\n    conv_in: entry_flow_conv_in,\n    reduction_block_0: entry_flow_reduction_block_0,\n    reduction_block_1: entry_flow_reduction_block_1\n  }\n\n  const middle_flow = {}\n  range(numMainBlocks, 0, 1).forEach((idx) => {\n    middle_flow[`main_block_${idx}`] = extractMainBlockParams(`middle_flow/main_block_${idx}`)\n  })\n\n  const exit_flow_reduction_block = extractReductionBlockParams('exit_flow/reduction_block')\n  const exit_flow_separable_conv = extractSeparableConvParams('exit_flow/separable_conv')\n\n  const exit_flow = {\n    reduction_block: exit_flow_reduction_block,\n    separable_conv: exit_flow_separable_conv\n  }\n\n  disposeUnusedWeightTensors(weightMap, paramMappings)\n\n  return { params: { entry_flow, middle_flow, exit_flow }, paramMappings }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { ConvParams, depthwiseSeparableConv } from '../common';\nimport { NetInput, TNetInput, toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { range } from '../utils';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { MainBlockParams, ReductionBlockParams, TinyXceptionParams } from './types';\n\nfunction conv(x: tf.Tensor4D, params: ConvParams, stride: [number, number]): tf.Tensor4D {\n  return tf.add(tf.conv2d(x, params.filters, stride, 'same'), params.bias)\n}\n\nfunction reductionBlock(x: tf.Tensor4D, params: ReductionBlockParams, isActivateInput: boolean = true): tf.Tensor4D {\n  let out = isActivateInput ? tf.relu(x) : x\n  out = depthwiseSeparableConv(out, params.separable_conv0, [1, 1])\n  out = depthwiseSeparableConv(tf.relu(out),  params.separable_conv1, [1, 1])\n  out = tf.maxPool(out, [3, 3], [2, 2], 'same')\n  out = tf.add(out, conv(x,  params.expansion_conv, [2, 2]))\n  return out\n}\n\nfunction mainBlock(x: tf.Tensor4D, params: MainBlockParams): tf.Tensor4D {\n  let out = depthwiseSeparableConv(tf.relu(x), params.separable_conv0, [1, 1])\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv1, [1, 1])\n  out = depthwiseSeparableConv(tf.relu(out), params.separable_conv2, [1, 1])\n  out = tf.add(out, x)\n  return out\n}\n\nexport class TinyXception extends NeuralNetwork<TinyXceptionParams> {\n\n  private _numMainBlocks: number\n\n  constructor(numMainBlocks: number) {\n    super('TinyXception')\n    this._numMainBlocks = numMainBlocks\n  }\n\n  public forwardInput(input: NetInput): tf.Tensor4D {\n\n    const { params } = this\n\n    if (!params) {\n      throw new Error('TinyXception - load model before inference')\n    }\n\n    return tf.tidy(() => {\n      const batchTensor = input.toBatchTensor(112, true)\n      const meanRgb = [122.782, 117.001, 104.298]\n      const normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256)) as tf.Tensor4D\n\n      let out = tf.relu(conv(normalized, params.entry_flow.conv_in, [2, 2]))\n      out = reductionBlock(out, params.entry_flow.reduction_block_0, false)\n      out = reductionBlock(out, params.entry_flow.reduction_block_1)\n\n      range(this._numMainBlocks, 0, 1).forEach((idx) => {\n        out = mainBlock(out, params.middle_flow[`main_block_${idx}`])\n      })\n\n      out = reductionBlock(out, params.exit_flow.reduction_block)\n      out = tf.relu(depthwiseSeparableConv(out, params.exit_flow.separable_conv, [1, 1]))\n      return out\n    })\n  }\n\n  public async forward(input: TNetInput): Promise<tf.Tensor4D> {\n    return this.forwardInput(await toNetInput(input))\n  }\n\n  protected getDefaultModelName(): string {\n    return 'tiny_xception_model'\n  }\n\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap) {\n    return extractParamsFromWeigthMap(weightMap, this._numMainBlocks)\n  }\n\n  protected extractParams(weights: Float32Array) {\n    return extractParams(weights, this._numMainBlocks)\n  }\n}", "import { extractFCParamsFactory, extractWeightsFactory, ParamMapping } from '../common';\nimport { NetParams } from './types';\n\nexport function extractParams(weights: Float32Array): { params: NetParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractWeights,\n    getRemainingWeights\n  } = extractWeightsFactory(weights)\n\n  const extractFCParams = extractFCParamsFactory(extractWeights, paramMappings)\n\n  const age = extractFCParams(512, 1, 'fc/age')\n  const gender = extractFCParams(512, 2, 'fc/gender')\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`)\n  }\n\n  return {\n    paramMappings,\n    params: { fc: { age, gender } }\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { disposeUnusedWeightTensors, extractWeightEntryFactory, FCParams, ParamMapping } from '../common';\nimport { NetParams } from './types';\n\nexport function extractParamsFromWeigthMap(\n  weightMap: tf.NamedTensorMap\n): { params: NetParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings)\n\n  function extractFcParams(prefix: string): FCParams {\n    const weights = extractWeightEntry<tf.Tensor2D>(`${prefix}/weights`, 2)\n    const bias = extractWeightEntry<tf.Tensor1D>(`${prefix}/bias`, 1)\n    return { weights, bias }\n  }\n\n  const params = {\n    fc: {\n      age: extractFcParams('fc/age'),\n      gender: extractFcParams('fc/gender')\n    }\n  }\n\n  disposeUnusedWeightTensors(weightMap, paramMappings)\n\n  return { params, paramMappings }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { FCParams } from '../common';\n\nexport type AgeAndGenderPrediction = {\n  age: number\n  gender: Gender\n  genderProbability: number\n}\n\nexport enum Gender {\n  FEMALE = 'female',\n  MALE = 'male'\n}\n\nexport type NetOutput = { age: tf.Tensor1D, gender: tf.Tensor2D }\n\nexport type NetParams = {\n  fc: {\n    age: FCParams\n    gender: FCParams\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { fullyConnectedLayer } from '../common/fullyConnectedLayer';\nimport { seperateWeightMaps } from '../faceProcessor/util';\nimport { TinyXception } from '../xception/TinyXception';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { AgeAndGenderPrediction, Gender, NetOutput, NetParams } from './types';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { NetInput, TNetInput, toNetInput } from '../dom';\n\nexport class AgeGenderNet extends NeuralNetwork<NetParams> {\n\n  private _faceFeatureExtractor: TinyXception\n\n  constructor(faceFeatureExtractor: TinyXception = new TinyXception(2)) {\n    super('AgeGenderNet')\n    this._faceFeatureExtractor = faceFeatureExtractor\n  }\n\n  public get faceFeatureExtractor(): TinyXception {\n    return this._faceFeatureExtractor\n  }\n\n  public runNet(input: NetInput | tf.Tensor4D): NetOutput {\n\n    const { params } = this\n\n    if (!params) {\n      throw new Error(`${this._name} - load model before inference`)\n    }\n\n    return tf.tidy(() => {\n      const bottleneckFeatures = input instanceof NetInput\n        ? this.faceFeatureExtractor.forwardInput(input)\n        : input\n\n      const pooled = tf.avgPool(bottleneckFeatures, [7, 7], [2, 2], 'valid').as2D(bottleneckFeatures.shape[0], -1)\n      const age = fullyConnectedLayer(pooled, params.fc.age).as1D()\n      const gender = fullyConnectedLayer(pooled, params.fc.gender)\n      return { age, gender }\n    })\n  }\n\n  public forwardInput(input: NetInput | tf.Tensor4D): NetOutput {\n    return tf.tidy(() => {\n      const { age, gender } = this.runNet(input)\n      return { age, gender: tf.softmax(gender) }\n    })\n  }\n\n  public async forward(input: TNetInput): Promise<NetOutput> {\n    return this.forwardInput(await toNetInput(input))\n  }\n\n  public async predictAgeAndGender(input: TNetInput): Promise<AgeAndGenderPrediction | AgeAndGenderPrediction[]> {\n    const netInput = await toNetInput(input)\n    const out = await this.forwardInput(netInput)\n\n    const ages = tf.unstack(out.age)\n    const genders = tf.unstack(out.gender)\n    const ageAndGenderTensors = ages.map((ageTensor, i) => ({\n      ageTensor,\n      genderTensor: genders[i]\n    }))\n\n    const predictionsByBatch = await Promise.all(\n      ageAndGenderTensors.map(async ({ ageTensor, genderTensor }) => {\n        const age = (await ageTensor.data())[0]\n        const probMale = (await genderTensor.data())[0]\n        const isMale = probMale > 0.5\n        const gender = isMale ? Gender.MALE : Gender.FEMALE\n        const genderProbability = isMale ? probMale : (1 - probMale)\n\n        ageTensor.dispose()\n        genderTensor.dispose()\n        return { age, gender, genderProbability }\n      })\n    )\n    out.age.dispose()\n    out.gender.dispose()\n\n    return netInput.isBatchInput ? predictionsByBatch as AgeAndGenderPrediction[] : predictionsByBatch[0] as AgeAndGenderPrediction\n  }\n\n  protected getDefaultModelName(): string {\n    return 'age_gender_model'\n  }\n\n  public dispose(throwOnRedispose: boolean = true) {\n    this.faceFeatureExtractor.dispose(throwOnRedispose)\n    super.dispose(throwOnRedispose)\n  }\n\n  public loadClassifierParams(weights: Float32Array) {\n    const { params, paramMappings } = this.extractClassifierParams(weights)\n    this._params = params\n    this._paramMappings = paramMappings\n  }\n\n  public extractClassifierParams(weights: Float32Array) {\n    return extractParams(weights)\n  }\n\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap) {\n\n    const { featureExtractorMap, classifierMap } = seperateWeightMaps(weightMap)\n\n    this.faceFeatureExtractor.loadFromWeightMap(featureExtractorMap)\n\n    return extractParamsFromWeigthMap(classifierMap)\n  }\n\n  protected extractParams(weights: Float32Array) {\n\n    const classifierWeightSize = (512 * 1 + 1) + (512 * 2 + 2)\n\n    const featureExtractorWeights = weights.slice(0, weights.length - classifierWeightSize)\n    const classifierWeights = weights.slice(weights.length - classifierWeightSize)\n\n    this.faceFeatureExtractor.extractWeights(featureExtractorWeights)\n    return this.extractClassifierParams(classifierWeights)\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { IDimensions, Point } from '../classes';\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { NetInput, TNetInput, toNetInput } from '../dom';\nimport { FaceFeatureExtractorParams, TinyFaceFeatureExtractorParams } from '../faceFeatureExtractor/types';\nimport { FaceProcessor } from '../faceProcessor/FaceProcessor';\nimport { isEven } from '../utils';\n\nexport abstract class FaceLandmark68NetBase<\n  TExtractorParams extends FaceFeatureExtractorParams | TinyFaceFeatureExtractorParams\n>\n  extends FaceProcessor<TExtractorParams> {\n\n  public postProcess(output: tf.Tensor2D, inputSize: number, originalDimensions: IDimensions[]): tf.Tensor2D {\n\n    const inputDimensions = originalDimensions.map(({ width, height }) => {\n      const scale = inputSize / Math.max(height, width)\n      return {\n        width: width * scale,\n        height: height * scale\n      }\n    })\n\n    const batchSize = inputDimensions.length\n\n    return tf.tidy(() => {\n      const createInterleavedTensor = (fillX: number, fillY: number) =>\n        tf.stack([\n          tf.fill([68], fillX),\n          tf.fill([68], fillY)\n        ], 1).as2D(1, 136).as1D()\n\n      const getPadding = (batchIdx: number, cond: (w: number, h: number) => boolean): number => {\n        const { width, height } = inputDimensions[batchIdx]\n        return cond(width, height) ? Math.abs(width - height) / 2 : 0\n      }\n      const getPaddingX = (batchIdx: number) => getPadding(batchIdx, (w, h) => w < h)\n      const getPaddingY = (batchIdx: number) => getPadding(batchIdx, (w, h) => h < w)\n\n      const landmarkTensors = output\n        .mul(tf.fill([batchSize, 136], inputSize))\n        .sub(tf.stack(Array.from(Array(batchSize), (_, batchIdx) =>\n          createInterleavedTensor(\n            getPaddingX(batchIdx),\n            getPaddingY(batchIdx)\n          )\n        )))\n        .div(tf.stack(Array.from(Array(batchSize), (_, batchIdx) =>\n          createInterleavedTensor(\n            inputDimensions[batchIdx].width,\n            inputDimensions[batchIdx].height\n          )\n        )))\n\n      return landmarkTensors as tf.Tensor2D\n    })\n  }\n\n  public forwardInput(input: NetInput): tf.Tensor2D {\n    return tf.tidy(() => {\n      const out = this.runNet(input)\n      return this.postProcess(\n        out,\n        input.inputSize as number,\n        input.inputDimensions.map(([height, width]) => ({ height, width }))\n      )\n    })\n  }\n\n  public async forward(input: TNetInput): Promise<tf.Tensor2D> {\n    return this.forwardInput(await toNetInput(input))\n  }\n\n  public async detectLandmarks(input: TNetInput): Promise<FaceLandmarks68 | FaceLandmarks68[]> {\n    const netInput = await toNetInput(input)\n    const landmarkTensors = tf.tidy(\n      () => tf.unstack(this.forwardInput(netInput))\n    )\n\n    const landmarksForBatch = await Promise.all(landmarkTensors.map(\n      async (landmarkTensor, batchIdx) => {\n        const landmarksArray = Array.from(await landmarkTensor.data())\n        const xCoords = landmarksArray.filter((_, i) => isEven(i))\n        const yCoords = landmarksArray.filter((_, i) => !isEven(i))\n\n        return new FaceLandmarks68(\n          Array(68).fill(0).map((_, i) => new Point(xCoords[i] as number, yCoords[i] as number)),\n          {\n            height: netInput.getInputHeight(batchIdx),\n            width : netInput.getInputWidth(batchIdx),\n          }\n        )\n      }\n    ))\n\n    landmarkTensors.forEach(t => t.dispose())\n\n    return netInput.isBatchInput ? landmarksForBatch as FaceLandmarks68[] : landmarksForBatch[0] as FaceLandmarks68;\n  }\n\n  protected getClassifierChannelsOut(): number {\n    return 136\n  }\n}", "import { FaceFeatureExtractor } from '../faceFeatureExtractor/FaceFeatureExtractor';\nimport { FaceFeatureExtractorParams } from '../faceFeatureExtractor/types';\nimport { FaceLandmark68NetBase } from './FaceLandmark68NetBase';\n\nexport class FaceLandmark68Net extends FaceLandmark68NetBase<FaceFeatureExtractorParams> {\n\n  constructor(faceFeatureExtractor: FaceFeatureExtractor = new FaceFeatureExtractor()) {\n    super('FaceLandmark68Net', faceFeatureExtractor)\n  }\n\n  protected getDefaultModelName(): string {\n    return 'face_landmark_68_model'\n  }\n\n  protected getClassifierChannelsIn(): number {\n    return 256\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { disposeUnusedWeightTensors, ParamMapping } from '../common';\nimport { loadParamsFactory } from './loadParamsFactory';\nimport { TinyFaceFeatureExtractorParams } from './types';\n\nexport function extractParamsFromWeigthMapTiny(\n  weightMap: tf.NamedTensorMap\n): { params: TinyFaceFeatureExtractorParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractDenseBlock3Params\n  } = loadParamsFactory(weightMap, paramMappings)\n\n  const params = {\n    dense0: extractDenseBlock3Params('dense0', true),\n    dense1: extractDenseBlock3Params('dense1'),\n    dense2: extractDenseBlock3Params('dense2')\n  }\n\n  disposeUnusedWeightTensors(weightMap, paramMappings)\n\n  return { params, paramMappings }\n}", "import { extractWeightsFactory, ParamMapping } from '../common';\nimport { extractorsFactory } from './extractorsFactory';\nimport { TinyFaceFeatureExtractorParams } from './types';\n\n\n\nexport function extractParamsTiny(weights: Float32Array): { params: TinyFaceFeatureExtractorParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractWeights,\n    getRemainingWeights\n  } = extractWeightsFactory(weights)\n\n  const {\n    extractDenseBlock3Params\n  } = extractorsFactory(extractWeights, paramMappings)\n\n  const dense0 = extractDenseBlock3Params(3, 32, 'dense0', true)\n  const dense1 = extractDenseBlock3Params(32, 64, 'dense1')\n  const dense2 = extractDenseBlock3Params(64, 128, 'dense2')\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`)\n  }\n\n  return {\n    paramMappings,\n    params: { dense0, dense1, dense2 }\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { NetInput, TNetInput, toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { denseBlock3 } from './denseBlock';\nimport { extractParamsFromWeigthMapTiny } from './extractParamsFromWeigthMapTiny';\nimport { extractParamsTiny } from './extractParamsTiny';\nimport { IFaceFeatureExtractor, TinyFaceFeatureExtractorParams } from './types';\n\nexport class TinyFaceFeatureExtractor extends NeuralNetwork<TinyFaceFeatureExtractorParams> implements IFaceFeatureExtractor<TinyFaceFeatureExtractorParams> {\n\n  constructor() {\n    super('TinyFaceFeatureExtractor')\n  }\n\n  public forwardInput(input: NetInput): tf.Tensor4D {\n\n    const { params } = this\n\n    if (!params) {\n      throw new Error('TinyFaceFeatureExtractor - load model before inference')\n    }\n\n    return tf.tidy(() => {\n      const batchTensor = input.toBatchTensor(112, true)\n      const meanRgb = [122.782, 117.001, 104.298]\n      const normalized = normalize(batchTensor, meanRgb).div(tf.scalar(255)) as tf.Tensor4D\n\n      let out = denseBlock3(normalized, params.dense0, true)\n      out = denseBlock3(out, params.dense1)\n      out = denseBlock3(out, params.dense2)\n      out = tf.avgPool(out, [14, 14], [2, 2], 'valid')\n\n      return out\n    })\n  }\n\n  public async forward(input: TNetInput): Promise<tf.Tensor4D> {\n    return this.forwardInput(await toNetInput(input))\n  }\n\n  protected getDefaultModelName(): string {\n    return 'face_feature_extractor_tiny_model'\n  }\n\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap) {\n    return extractParamsFromWeigthMapTiny(weightMap)\n  }\n\n  protected extractParams(weights: Float32Array) {\n    return extractParamsTiny(weights)\n  }\n}", "import { TinyFaceFeatureExtractor } from '../faceFeatureExtractor/TinyFaceFeatureExtractor';\nimport { TinyFaceFeatureExtractorParams } from '../faceFeatureExtractor/types';\nimport { FaceLandmark68NetBase } from './FaceLandmark68NetBase';\n\nexport class FaceLandmark68TinyNet extends FaceLandmark68NetBase<TinyFaceFeatureExtractorParams> {\n\n  constructor(faceFeatureExtractor: TinyFaceFeatureExtractor = new TinyFaceFeatureExtractor()) {\n    super('FaceLandmark68TinyNet', faceFeatureExtractor)\n  }\n\n  protected getDefaultModelName(): string {\n    return 'face_landmark_68_tiny_model'\n  }\n\n  protected getClassifierChannelsIn(): number {\n    return 128\n  }\n}", "import { FaceLandmark68Net } from './FaceLandmark68Net';\n\nexport * from './FaceLandmark68Net';\nexport * from './FaceLandmark68TinyNet';\n\nexport class FaceLandmarkNet extends FaceLandmark68Net {}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { ScaleLayerParams } from './types';\n\nexport function scale(x: tf.Tensor4D, params: ScaleLayerParams): tf.Tensor4D {\n  return tf.add(tf.mul(x, params.weights), params.biases)\n}\n", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { scale } from './scaleLayer';\nimport { ConvLayerParams } from './types';\n\n\nfunction convLayer(\n  x: tf.Tensor4D,\n  params: ConvLayerParams,\n  strides: [number, number],\n  withRelu: boolean,\n  padding: 'valid' | 'same' = 'same'\n): tf.Tensor4D {\n  const { filters, bias } = params.conv\n\n  let out = tf.conv2d(x, filters, strides, padding)\n  out = tf.add(out, bias)\n  out = scale(out, params.scale)\n  return withRelu ? tf.relu(out) : out\n}\n\nexport function conv(x: tf.Tensor4D, params: ConvLayerParams) {\n  return convLayer(x, params, [1, 1], true)\n}\n\nexport function convNoRelu(x: tf.Tensor4D, params: ConvLayerParams) {\n  return convLayer(x, params, [1, 1], false)\n}\n\nexport function convDown(x: tf.Tensor4D, params: ConvLayerParams) {\n  return convLayer(x, params, [2, 2], true, 'valid')\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { ConvParams, extractWeightsFactory, ExtractWeightsFunction, ParamMapping } from '../common';\nimport { isFloat } from '../utils';\nimport { ConvLayerParams, NetParams, ResidualLayerParams, ScaleLayerParams } from './types';\n\nfunction extractorsFactory(extractWeights: ExtractWeightsFunction, paramMappings: ParamMapping[]) {\n\n  function extractFilterValues(numFilterValues: number, numFilters: number, filterSize: number): tf.Tensor4D {\n    const weights = extractWeights(numFilterValues)\n    const depth = weights.length / (numFilters * filterSize * filterSize)\n\n    if (isFloat(depth)) {\n      throw new Error(`depth has to be an integer: ${depth}, weights.length: ${weights.length}, numFilters: ${numFilters}, filterSize: ${filterSize}`)\n    }\n\n    return tf.tidy(\n      () => tf.transpose(\n        tf.tensor4d(weights, [numFilters, depth, filterSize, filterSize]),\n        [2, 3, 1, 0]\n      )\n    )\n  }\n\n  function extractConvParams(\n    numFilterValues: number,\n    numFilters: number,\n    filterSize: number,\n    mappedPrefix: string\n  ): ConvParams {\n\n    const filters = extractFilterValues(numFilterValues, numFilters, filterSize)\n    const bias = tf.tensor1d(extractWeights(numFilters))\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/filters` },\n      { paramPath: `${mappedPrefix}/bias` }\n    )\n\n    return { filters, bias }\n  }\n\n  function extractScaleLayerParams(numWeights: number, mappedPrefix: string): ScaleLayerParams {\n\n    const weights = tf.tensor1d(extractWeights(numWeights))\n    const biases = tf.tensor1d(extractWeights(numWeights))\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/weights` },\n      { paramPath: `${mappedPrefix}/biases` }\n    )\n\n    return {\n      weights,\n      biases\n    }\n  }\n\n  function extractConvLayerParams(\n    numFilterValues: number,\n    numFilters: number,\n    filterSize: number,\n    mappedPrefix: string\n  ): ConvLayerParams {\n\n    const conv = extractConvParams(numFilterValues, numFilters, filterSize, `${mappedPrefix}/conv`)\n    const scale = extractScaleLayerParams(numFilters, `${mappedPrefix}/scale`)\n\n    return { conv, scale }\n  }\n\n  function extractResidualLayerParams(\n    numFilterValues: number,\n    numFilters: number,\n    filterSize: number,\n    mappedPrefix: string,\n    isDown: boolean = false\n  ): ResidualLayerParams {\n\n    const conv1 = extractConvLayerParams((isDown ? 0.5 : 1) * numFilterValues, numFilters, filterSize, `${mappedPrefix}/conv1`)\n    const conv2 = extractConvLayerParams(numFilterValues, numFilters, filterSize, `${mappedPrefix}/conv2`)\n\n    return { conv1, conv2 }\n  }\n\n  return {\n    extractConvLayerParams,\n    extractResidualLayerParams\n  }\n\n}\n\nexport function extractParams(weights: Float32Array): { params: NetParams, paramMappings: ParamMapping[] } {\n\n  const {\n    extractWeights,\n    getRemainingWeights\n  } = extractWeightsFactory(weights)\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractConvLayerParams,\n    extractResidualLayerParams\n  } = extractorsFactory(extractWeights, paramMappings)\n\n  const conv32_down = extractConvLayerParams(4704, 32, 7, 'conv32_down')\n  const conv32_1 = extractResidualLayerParams(9216, 32, 3, 'conv32_1')\n  const conv32_2 = extractResidualLayerParams(9216, 32, 3, 'conv32_2')\n  const conv32_3 = extractResidualLayerParams(9216, 32, 3, 'conv32_3')\n\n  const conv64_down = extractResidualLayerParams(36864, 64, 3, 'conv64_down', true)\n  const conv64_1 = extractResidualLayerParams(36864, 64, 3, 'conv64_1')\n  const conv64_2 = extractResidualLayerParams(36864, 64, 3, 'conv64_2')\n  const conv64_3 = extractResidualLayerParams(36864, 64, 3, 'conv64_3')\n\n  const conv128_down = extractResidualLayerParams(147456, 128, 3, 'conv128_down', true)\n  const conv128_1 = extractResidualLayerParams(147456, 128, 3, 'conv128_1')\n  const conv128_2 = extractResidualLayerParams(147456, 128, 3, 'conv128_2')\n\n  const conv256_down = extractResidualLayerParams(589824, 256, 3, 'conv256_down', true)\n  const conv256_1 = extractResidualLayerParams(589824, 256, 3, 'conv256_1')\n  const conv256_2 = extractResidualLayerParams(589824, 256, 3, 'conv256_2')\n  const conv256_down_out = extractResidualLayerParams(589824, 256, 3, 'conv256_down_out')\n\n  const fc = tf.tidy(\n    () => tf.transpose(tf.tensor2d(extractWeights(256 * 128), [128, 256]), [1, 0])\n  )\n  paramMappings.push({ paramPath: `fc` })\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`)\n  }\n\n  const params = {\n    conv32_down,\n    conv32_1,\n    conv32_2,\n    conv32_3,\n    conv64_down,\n    conv64_1,\n    conv64_2,\n    conv64_3,\n    conv128_down,\n    conv128_1,\n    conv128_2,\n    conv256_down,\n    conv256_1,\n    conv256_2,\n    conv256_down_out,\n    fc\n  }\n\n  return { params, paramMappings }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { disposeUnusedWeightTensors, extractWeightEntryFactory, ParamMapping } from '../common';\nimport { isTensor2D } from '../utils';\nimport { ConvLayerParams, NetParams, ResidualLayerParams, ScaleLayerParams } from './types';\n\nfunction extractorsFactory(weightMap: any, paramMappings: ParamMapping[]) {\n\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings)\n\n  function extractScaleLayerParams(prefix: string): ScaleLayerParams {\n\n    const weights = extractWeightEntry<tf.Tensor1D>(`${prefix}/scale/weights`, 1)\n    const biases = extractWeightEntry<tf.Tensor1D>(`${prefix}/scale/biases`, 1)\n\n    return { weights, biases }\n  }\n\n  function extractConvLayerParams(prefix: string): ConvLayerParams {\n\n    const filters = extractWeightEntry<tf.Tensor4D>(`${prefix}/conv/filters`, 4)\n    const bias = extractWeightEntry<tf.Tensor1D>(`${prefix}/conv/bias`, 1)\n    const scale = extractScaleLayerParams(prefix)\n\n    return { conv: { filters, bias }, scale }\n  }\n\n  function extractResidualLayerParams(prefix: string): ResidualLayerParams {\n    return {\n      conv1: extractConvLayerParams(`${prefix}/conv1`),\n      conv2: extractConvLayerParams(`${prefix}/conv2`)\n    }\n  }\n\n  return {\n    extractConvLayerParams,\n    extractResidualLayerParams\n  }\n\n}\n\nexport function extractParamsFromWeigthMap(\n  weightMap: tf.NamedTensorMap\n): { params: NetParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractConvLayerParams,\n    extractResidualLayerParams\n  } = extractorsFactory(weightMap, paramMappings)\n\n  const conv32_down = extractConvLayerParams('conv32_down')\n  const conv32_1 = extractResidualLayerParams('conv32_1')\n  const conv32_2 = extractResidualLayerParams('conv32_2')\n  const conv32_3 = extractResidualLayerParams('conv32_3')\n\n  const conv64_down = extractResidualLayerParams('conv64_down')\n  const conv64_1 = extractResidualLayerParams('conv64_1')\n  const conv64_2 = extractResidualLayerParams('conv64_2')\n  const conv64_3 = extractResidualLayerParams('conv64_3')\n\n  const conv128_down = extractResidualLayerParams('conv128_down')\n  const conv128_1 = extractResidualLayerParams('conv128_1')\n  const conv128_2 = extractResidualLayerParams('conv128_2')\n\n  const conv256_down = extractResidualLayerParams('conv256_down')\n  const conv256_1 = extractResidualLayerParams('conv256_1')\n  const conv256_2 = extractResidualLayerParams('conv256_2')\n  const conv256_down_out = extractResidualLayerParams('conv256_down_out')\n\n  const fc = weightMap['fc']\n  paramMappings.push({ originalPath: 'fc', paramPath: 'fc' })\n\n  if (!isTensor2D(fc)) {\n    throw new Error(`expected weightMap[fc] to be a Tensor2D, instead have ${fc}`)\n  }\n\n  const params = {\n    conv32_down,\n    conv32_1,\n    conv32_2,\n    conv32_3,\n    conv64_down,\n    conv64_1,\n    conv64_2,\n    conv64_3,\n    conv128_down,\n    conv128_1,\n    conv128_2,\n    conv256_down,\n    conv256_1,\n    conv256_2,\n    conv256_down_out,\n    fc\n  }\n\n  disposeUnusedWeightTensors(weightMap, paramMappings)\n\n  return { params, paramMappings }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { conv, convDown, convNoRelu } from './convLayer';\nimport { ResidualLayerParams } from './types';\n\nexport function residual(x: tf.Tensor4D, params: ResidualLayerParams): tf.Tensor4D {\n  let out = conv(x, params.conv1)\n  out = convNoRelu(out, params.conv2)\n  out = tf.add(out, x)\n  out = tf.relu(out)\n  return out\n}\n\nexport function residualDown(x: tf.Tensor4D, params: ResidualLayerParams): tf.Tensor4D {\n  let out = convDown(x, params.conv1)\n  out = convNoRelu(out, params.conv2)\n\n  let pooled = tf.avgPool(x, 2, 2, 'valid') as tf.Tensor4D\n  const zeros = tf.zeros<tf.Rank.R4>(pooled.shape)\n  const isPad = pooled.shape[3] !== out.shape[3]\n  const isAdjustShape = pooled.shape[1] !== out.shape[1] || pooled.shape[2] !== out.shape[2]\n\n  if (isAdjustShape) {\n    const padShapeX = [...out.shape] as [number, number, number, number]\n    padShapeX[1] = 1\n    const zerosW = tf.zeros<tf.Rank.R4>(padShapeX)\n    out = tf.concat([out, zerosW], 1)\n\n    const padShapeY = [...out.shape] as [number, number, number, number]\n    padShapeY[2] = 1\n    const zerosH = tf.zeros<tf.Rank.R4>(padShapeY)\n    out = tf.concat([out, zerosH], 2)\n  }\n\n  pooled = isPad ? tf.concat([pooled, zeros], 3) : pooled\n  out = tf.add(pooled, out) as tf.Tensor4D\n\n  out = tf.relu(out)\n  return out\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { NetInput, TNetInput, toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { normalize } from '../ops';\nimport { convDown } from './convLayer';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { residual, residualDown } from './residualLayer';\nimport { NetParams } from './types';\n\n\nexport class FaceRecognitionNet extends NeuralNetwork<NetParams> {\n\n  constructor() {\n    super('FaceRecognitionNet')\n  }\n\n  public forwardInput(input: NetInput): tf.Tensor2D {\n\n    const { params } = this\n\n    if (!params) {\n      throw new Error('FaceRecognitionNet - load model before inference')\n    }\n\n    return tf.tidy(() => {\n      // const batchTensor = input.toBatchTensor(150, true).toFloat()\n      const batchTensor = tf.cast(input.toBatchTensor(150, true), 'float32');\n\n      const meanRgb = [122.782, 117.001, 104.298]\n      const normalized = normalize(batchTensor, meanRgb).div(tf.scalar(256)) as tf.Tensor4D\n\n      let out = convDown(normalized, params.conv32_down)\n      out = tf.maxPool(out, 3, 2, 'valid')\n\n      out = residual(out, params.conv32_1)\n      out = residual(out, params.conv32_2)\n      out = residual(out, params.conv32_3)\n\n      out = residualDown(out, params.conv64_down)\n      out = residual(out, params.conv64_1)\n      out = residual(out, params.conv64_2)\n      out = residual(out, params.conv64_3)\n\n      out = residualDown(out, params.conv128_down)\n      out = residual(out, params.conv128_1)\n      out = residual(out, params.conv128_2)\n\n      out = residualDown(out, params.conv256_down)\n      out = residual(out, params.conv256_1)\n      out = residual(out, params.conv256_2)\n      out = residualDown(out, params.conv256_down_out)\n\n      const globalAvg = out.mean([1, 2]) as tf.Tensor2D\n      const fullyConnected = tf.matMul(globalAvg, params.fc)\n\n      return fullyConnected\n    })\n  }\n\n  public async forward(input: TNetInput): Promise<tf.Tensor2D> {\n    return this.forwardInput(await toNetInput(input))\n  }\n\n  public async computeFaceDescriptor(input: TNetInput): Promise<Float32Array|Float32Array[]> {\n    const netInput = await toNetInput(input)\n\n    const faceDescriptorTensors = tf.tidy(\n      () => tf.unstack(this.forwardInput(netInput))\n    )\n\n    const faceDescriptorsForBatch = await Promise.all(faceDescriptorTensors.map(\n      t => t.data()\n    )) as Float32Array[]\n\n    faceDescriptorTensors.forEach(t => t.dispose())\n\n    return netInput.isBatchInput\n      ? faceDescriptorsForBatch\n      : faceDescriptorsForBatch[0]\n  }\n\n  protected getDefaultModelName(): string {\n    return 'face_recognition_model'\n  }\n\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap) {\n    return extractParamsFromWeigthMap(weightMap)\n  }\n\n  protected extractParams(weights: Float32Array) {\n    return extractParams(weights)\n  }\n}", "import { FaceRecognitionNet } from './FaceRecognitionNet';\n\nexport * from './FaceRecognitionNet';\n\nexport function createFaceRecognitionNet(weights: Float32Array) {\n  const net = new FaceRecognitionNet()\n  net.extractWeights(weights)\n  return net\n}", "export type WithFaceDescriptor<TSource> = TSource & {\n  descriptor: Float32Array\n}\n\nexport function extendWithFaceDescriptor<\n  TSource\n> (\n  sourceObj: TSource,\n  descriptor: Float32Array\n): WithFaceDescriptor<TSource> {\n\n  const extension = { descriptor }\n  return Object.assign({}, sourceObj, extension)\n}\n\n", "export type WithAge<TSource> = TSource & {\n  age: number\n}\n\nexport function isWithAge(obj: any): obj is WithAge<{}> {\n  return typeof obj['age'] === 'number'\n}\n\nexport function extendWithAge<\n  TSource\n> (\n  sourceObj: TSource,\n  age: number\n): WithAge<TSource> {\n\n  const extension = { age }\n  return Object.assign({}, sourceObj, extension)\n}", "import { Gender } from '../ageGenderNet/types';\nimport { isValidProbablitiy } from '../utils';\n\nexport type WithGender<TSource> = TSource & {\n  gender: Gender\n  genderProbability: number\n}\n\nexport function isWithGender(obj: any): obj is WithGender<{}> {\n  return (obj['gender'] === Gender.MALE || obj['gender'] === Gender.FEMALE)\n    && isValidProbablitiy(obj['genderProbability'])\n}\n\nexport function extendWithGender<\n  TSource\n> (\n  sourceObj: TSource,\n  gender: Gender,\n  genderProbability: number\n): WithGender<TSource> {\n\n  const extension = { gender, genderProbability }\n  return Object.assign({}, sourceObj, extension)\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { ExtractWeightsFunction, ParamMapping, ConvParams, extractWeightsFactory } from '../common';\nimport { MobileNetV1, NetParams, PointwiseConvParams, PredictionLayerParams } from './types';\n\nfunction extractorsFactory(extractWeights: ExtractWeightsFunction, paramMappings: ParamMapping[]) {\n\n  function extractDepthwiseConvParams(numChannels: number, mappedPrefix: string): MobileNetV1.DepthwiseConvParams {\n\n    const filters = tf.tensor4d(extractWeights(3 * 3 * numChannels), [3, 3, numChannels, 1])\n    const batch_norm_scale = tf.tensor1d(extractWeights(numChannels))\n    const batch_norm_offset = tf.tensor1d(extractWeights(numChannels))\n    const batch_norm_mean = tf.tensor1d(extractWeights(numChannels))\n    const batch_norm_variance = tf.tensor1d(extractWeights(numChannels))\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/filters` },\n      { paramPath: `${mappedPrefix}/batch_norm_scale` },\n      { paramPath: `${mappedPrefix}/batch_norm_offset` },\n      { paramPath: `${mappedPrefix}/batch_norm_mean` },\n      { paramPath: `${mappedPrefix}/batch_norm_variance` }\n    )\n\n    return {\n      filters,\n      batch_norm_scale,\n      batch_norm_offset,\n      batch_norm_mean,\n      batch_norm_variance\n    }\n  }\n\n  function extractConvParams(\n    channelsIn: number,\n    channelsOut: number,\n    filterSize: number,\n    mappedPrefix: string,\n    isPointwiseConv?: boolean\n  ): ConvParams {\n\n    const filters = tf.tensor4d(\n      extractWeights(channelsIn * channelsOut * filterSize * filterSize),\n      [filterSize, filterSize, channelsIn, channelsOut]\n    )\n    const bias = tf.tensor1d(extractWeights(channelsOut))\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/filters` },\n      { paramPath: `${mappedPrefix}/${isPointwiseConv ? 'batch_norm_offset' : 'bias'}` }\n    )\n\n    return { filters, bias }\n  }\n\n  function extractPointwiseConvParams(\n    channelsIn: number,\n    channelsOut: number,\n    filterSize: number,\n    mappedPrefix: string\n  ): PointwiseConvParams {\n\n    const {\n      filters,\n      bias\n    } = extractConvParams(channelsIn, channelsOut, filterSize, mappedPrefix, true)\n\n    return {\n      filters,\n      batch_norm_offset: bias\n    }\n  }\n\n  function extractConvPairParams(\n    channelsIn: number,\n    channelsOut: number,\n    mappedPrefix: string\n  ): MobileNetV1.ConvPairParams {\n\n    const depthwise_conv = extractDepthwiseConvParams(channelsIn, `${mappedPrefix}/depthwise_conv`)\n    const pointwise_conv = extractPointwiseConvParams(channelsIn, channelsOut, 1, `${mappedPrefix}/pointwise_conv`)\n\n    return { depthwise_conv, pointwise_conv }\n  }\n\n  function extractMobilenetV1Params(): MobileNetV1.Params {\n\n    const conv_0 = extractPointwiseConvParams(3, 32, 3, 'mobilenetv1/conv_0')\n\n    const conv_1 = extractConvPairParams(32, 64, 'mobilenetv1/conv_1')\n    const conv_2 = extractConvPairParams(64, 128, 'mobilenetv1/conv_2')\n    const conv_3 = extractConvPairParams(128, 128, 'mobilenetv1/conv_3')\n    const conv_4 = extractConvPairParams(128, 256, 'mobilenetv1/conv_4')\n    const conv_5 = extractConvPairParams(256, 256, 'mobilenetv1/conv_5')\n    const conv_6 = extractConvPairParams(256, 512, 'mobilenetv1/conv_6')\n    const conv_7 = extractConvPairParams(512, 512, 'mobilenetv1/conv_7')\n    const conv_8 = extractConvPairParams(512, 512, 'mobilenetv1/conv_8')\n    const conv_9 = extractConvPairParams(512, 512, 'mobilenetv1/conv_9')\n    const conv_10 = extractConvPairParams(512, 512, 'mobilenetv1/conv_10')\n    const conv_11 = extractConvPairParams(512, 512, 'mobilenetv1/conv_11')\n    const conv_12 = extractConvPairParams(512, 1024, 'mobilenetv1/conv_12')\n    const conv_13 = extractConvPairParams(1024, 1024, 'mobilenetv1/conv_13')\n\n    return {\n      conv_0,\n      conv_1,\n      conv_2,\n      conv_3,\n      conv_4,\n      conv_5,\n      conv_6,\n      conv_7,\n      conv_8,\n      conv_9,\n      conv_10,\n      conv_11,\n      conv_12,\n      conv_13\n    }\n  }\n\n  function extractPredictionLayerParams(): PredictionLayerParams {\n    const conv_0 = extractPointwiseConvParams(1024, 256, 1, 'prediction_layer/conv_0')\n    const conv_1 = extractPointwiseConvParams(256, 512, 3, 'prediction_layer/conv_1')\n    const conv_2 = extractPointwiseConvParams(512, 128, 1, 'prediction_layer/conv_2')\n    const conv_3 = extractPointwiseConvParams(128, 256, 3, 'prediction_layer/conv_3')\n    const conv_4 = extractPointwiseConvParams(256, 128, 1, 'prediction_layer/conv_4')\n    const conv_5 = extractPointwiseConvParams(128, 256, 3, 'prediction_layer/conv_5')\n    const conv_6 = extractPointwiseConvParams(256, 64, 1, 'prediction_layer/conv_6')\n    const conv_7 = extractPointwiseConvParams(64, 128, 3, 'prediction_layer/conv_7')\n\n    const box_encoding_0_predictor = extractConvParams(512, 12, 1, 'prediction_layer/box_predictor_0/box_encoding_predictor')\n    const class_predictor_0 = extractConvParams(512, 9, 1, 'prediction_layer/box_predictor_0/class_predictor')\n    const box_encoding_1_predictor = extractConvParams(1024, 24, 1, 'prediction_layer/box_predictor_1/box_encoding_predictor')\n    const class_predictor_1 = extractConvParams(1024, 18, 1, 'prediction_layer/box_predictor_1/class_predictor')\n    const box_encoding_2_predictor = extractConvParams(512, 24, 1, 'prediction_layer/box_predictor_2/box_encoding_predictor')\n    const class_predictor_2 = extractConvParams(512, 18, 1, 'prediction_layer/box_predictor_2/class_predictor')\n    const box_encoding_3_predictor = extractConvParams(256, 24, 1, 'prediction_layer/box_predictor_3/box_encoding_predictor')\n    const class_predictor_3 = extractConvParams(256, 18, 1, 'prediction_layer/box_predictor_3/class_predictor')\n    const box_encoding_4_predictor = extractConvParams(256, 24, 1, 'prediction_layer/box_predictor_4/box_encoding_predictor')\n    const class_predictor_4 = extractConvParams(256, 18, 1, 'prediction_layer/box_predictor_4/class_predictor')\n    const box_encoding_5_predictor = extractConvParams(128, 24, 1, 'prediction_layer/box_predictor_5/box_encoding_predictor')\n    const class_predictor_5 = extractConvParams(128, 18, 1, 'prediction_layer/box_predictor_5/class_predictor')\n\n    const box_predictor_0 = {\n      box_encoding_predictor: box_encoding_0_predictor,\n      class_predictor: class_predictor_0\n    }\n    const box_predictor_1 = {\n      box_encoding_predictor: box_encoding_1_predictor,\n      class_predictor: class_predictor_1\n    }\n    const box_predictor_2 = {\n      box_encoding_predictor: box_encoding_2_predictor,\n      class_predictor: class_predictor_2\n    }\n    const box_predictor_3 = {\n      box_encoding_predictor: box_encoding_3_predictor,\n      class_predictor: class_predictor_3\n    }\n    const box_predictor_4 = {\n      box_encoding_predictor: box_encoding_4_predictor,\n      class_predictor: class_predictor_4\n    }\n    const box_predictor_5 = {\n      box_encoding_predictor: box_encoding_5_predictor,\n      class_predictor: class_predictor_5\n    }\n\n    return {\n      conv_0,\n      conv_1,\n      conv_2,\n      conv_3,\n      conv_4,\n      conv_5,\n      conv_6,\n      conv_7,\n      box_predictor_0,\n      box_predictor_1,\n      box_predictor_2,\n      box_predictor_3,\n      box_predictor_4,\n      box_predictor_5\n    }\n  }\n\n  return {\n    extractMobilenetV1Params,\n    extractPredictionLayerParams\n  }\n\n}\n\nexport function extractParams(weights: Float32Array): { params: NetParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractWeights,\n    getRemainingWeights\n  } = extractWeightsFactory(weights)\n\n  const {\n    extractMobilenetV1Params,\n    extractPredictionLayerParams\n  } = extractorsFactory(extractWeights, paramMappings)\n\n  const mobilenetv1 = extractMobilenetV1Params()\n  const prediction_layer = extractPredictionLayerParams()\n  const extra_dim = tf.tensor3d(\n    extractWeights(5118 * 4),\n    [1, 5118, 4]\n  )\n  const output_layer = {\n    extra_dim\n  }\n\n  paramMappings.push({ paramPath: 'output_layer/extra_dim' })\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`)\n  }\n\n  return {\n    params: {\n      mobilenetv1,\n      prediction_layer,\n      output_layer\n    },\n    paramMappings\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { ConvParams, disposeUnusedWeightTensors, extractWeightEntryFactory, ParamMapping } from '../common';\nimport { isTensor3D } from '../utils';\nimport { BoxPredictionParams, MobileNetV1, NetParams, PointwiseConvParams, PredictionLayerParams } from './types';\n\nfunction extractorsFactory(weightMap: any, paramMappings: ParamMapping[]) {\n\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings)\n\n  function extractPointwiseConvParams(prefix: string, idx: number, mappedPrefix: string): PointwiseConvParams {\n\n    const filters = extractWeightEntry<tf.Tensor4D>(`${prefix}/Conv2d_${idx}_pointwise/weights`, 4, `${mappedPrefix}/filters`)\n    const batch_norm_offset = extractWeightEntry<tf.Tensor1D>(`${prefix}/Conv2d_${idx}_pointwise/convolution_bn_offset`, 1, `${mappedPrefix}/batch_norm_offset`)\n\n    return { filters, batch_norm_offset }\n  }\n\n  function extractConvPairParams(idx: number): MobileNetV1.ConvPairParams {\n\n    const mappedPrefix = `mobilenetv1/conv_${idx}`\n    const prefixDepthwiseConv = `MobilenetV1/Conv2d_${idx}_depthwise`\n    const mappedPrefixDepthwiseConv = `${mappedPrefix}/depthwise_conv`\n    const mappedPrefixPointwiseConv = `${mappedPrefix}/pointwise_conv`\n\n    const filters = extractWeightEntry<tf.Tensor4D>(`${prefixDepthwiseConv}/depthwise_weights`, 4, `${mappedPrefixDepthwiseConv}/filters`)\n    const batch_norm_scale = extractWeightEntry<tf.Tensor1D>(`${prefixDepthwiseConv}/BatchNorm/gamma`, 1, `${mappedPrefixDepthwiseConv}/batch_norm_scale`)\n    const batch_norm_offset = extractWeightEntry<tf.Tensor1D>(`${prefixDepthwiseConv}/BatchNorm/beta`, 1, `${mappedPrefixDepthwiseConv}/batch_norm_offset`)\n    const batch_norm_mean = extractWeightEntry<tf.Tensor1D>(`${prefixDepthwiseConv}/BatchNorm/moving_mean`, 1, `${mappedPrefixDepthwiseConv}/batch_norm_mean`)\n    const batch_norm_variance = extractWeightEntry<tf.Tensor1D>(`${prefixDepthwiseConv}/BatchNorm/moving_variance`, 1, `${mappedPrefixDepthwiseConv}/batch_norm_variance`)\n\n    return {\n      depthwise_conv: {\n        filters,\n        batch_norm_scale,\n        batch_norm_offset,\n        batch_norm_mean,\n        batch_norm_variance\n      },\n      pointwise_conv: extractPointwiseConvParams('MobilenetV1', idx, mappedPrefixPointwiseConv)\n    }\n  }\n\n  function extractMobilenetV1Params(): MobileNetV1.Params {\n    return {\n      conv_0: extractPointwiseConvParams('MobilenetV1', 0, 'mobilenetv1/conv_0'),\n      conv_1: extractConvPairParams(1),\n      conv_2: extractConvPairParams(2),\n      conv_3: extractConvPairParams(3),\n      conv_4: extractConvPairParams(4),\n      conv_5: extractConvPairParams(5),\n      conv_6: extractConvPairParams(6),\n      conv_7: extractConvPairParams(7),\n      conv_8: extractConvPairParams(8),\n      conv_9: extractConvPairParams(9),\n      conv_10: extractConvPairParams(10),\n      conv_11: extractConvPairParams(11),\n      conv_12: extractConvPairParams(12),\n      conv_13: extractConvPairParams(13)\n    }\n  }\n\n  function extractConvParams(prefix: string, mappedPrefix: string): ConvParams {\n    const filters = extractWeightEntry<tf.Tensor4D>(`${prefix}/weights`, 4, `${mappedPrefix}/filters`)\n    const bias = extractWeightEntry<tf.Tensor1D>(`${prefix}/biases`, 1, `${mappedPrefix}/bias`)\n\n    return { filters, bias }\n  }\n\n  function extractBoxPredictorParams(idx: number): BoxPredictionParams {\n\n    const box_encoding_predictor = extractConvParams(\n      `Prediction/BoxPredictor_${idx}/BoxEncodingPredictor`,\n      `prediction_layer/box_predictor_${idx}/box_encoding_predictor`\n    )\n    const class_predictor = extractConvParams(\n      `Prediction/BoxPredictor_${idx}/ClassPredictor`,\n      `prediction_layer/box_predictor_${idx}/class_predictor`\n    )\n\n    return { box_encoding_predictor, class_predictor }\n  }\n\n  function extractPredictionLayerParams(): PredictionLayerParams {\n    return {\n      conv_0: extractPointwiseConvParams('Prediction', 0, 'prediction_layer/conv_0'),\n      conv_1: extractPointwiseConvParams('Prediction', 1, 'prediction_layer/conv_1'),\n      conv_2: extractPointwiseConvParams('Prediction', 2, 'prediction_layer/conv_2'),\n      conv_3: extractPointwiseConvParams('Prediction', 3, 'prediction_layer/conv_3'),\n      conv_4: extractPointwiseConvParams('Prediction', 4, 'prediction_layer/conv_4'),\n      conv_5: extractPointwiseConvParams('Prediction', 5, 'prediction_layer/conv_5'),\n      conv_6: extractPointwiseConvParams('Prediction', 6, 'prediction_layer/conv_6'),\n      conv_7: extractPointwiseConvParams('Prediction', 7, 'prediction_layer/conv_7'),\n      box_predictor_0: extractBoxPredictorParams(0),\n      box_predictor_1: extractBoxPredictorParams(1),\n      box_predictor_2: extractBoxPredictorParams(2),\n      box_predictor_3: extractBoxPredictorParams(3),\n      box_predictor_4: extractBoxPredictorParams(4),\n      box_predictor_5: extractBoxPredictorParams(5)\n    }\n  }\n\n  return {\n    extractMobilenetV1Params,\n    extractPredictionLayerParams\n  }\n}\n\nexport function extractParamsFromWeigthMap(\n  weightMap: tf.NamedTensorMap\n): { params: NetParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractMobilenetV1Params,\n    extractPredictionLayerParams\n  } = extractorsFactory(weightMap, paramMappings)\n\n  const extra_dim = weightMap['Output/extra_dim']\n  paramMappings.push({ originalPath: 'Output/extra_dim', paramPath: 'output_layer/extra_dim' })\n\n  if (!isTensor3D(extra_dim)) {\n    throw new Error(`expected weightMap['Output/extra_dim'] to be a Tensor3D, instead have ${extra_dim}`)\n  }\n\n  const params = {\n    mobilenetv1: extractMobilenetV1Params(),\n    prediction_layer: extractPredictionLayerParams(),\n    output_layer: {\n      extra_dim\n    }\n  }\n\n  disposeUnusedWeightTensors(weightMap, paramMappings)\n\n  return { params, paramMappings }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { PointwiseConvParams } from './types';\n\nexport function pointwiseConvLayer(\n  x: tf.Tensor4D,\n  params: PointwiseConvParams,\n  strides: [number, number]\n) {\n  return tf.tidy(() => {\n\n    let out = tf.conv2d(x, params.filters, strides, 'same')\n    out = tf.add(out, params.batch_norm_offset)\n    return tf.clipByValue(out, 0, 6)\n\n  })\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { pointwiseConvLayer } from './pointwiseConvLayer';\nimport { MobileNetV1 } from './types';\n\nconst epsilon = 0.0010000000474974513\n\nfunction depthwiseConvLayer(\n  x: tf.Tensor4D,\n  params: MobileNetV1.DepthwiseConvParams,\n  strides: [number, number]\n) {\n  return tf.tidy(() => {\n\n    let out = tf.depthwiseConv2d(x, params.filters, strides, 'same')\n    out = tf.batchNorm<tf.Rank.R4>(\n      out,\n      params.batch_norm_mean,\n      params.batch_norm_variance,\n      params.batch_norm_offset,\n      params.batch_norm_scale,\n      epsilon\n    )\n    return tf.clipByValue(out, 0, 6)\n\n  })\n}\n\nfunction getStridesForLayerIdx(layerIdx: number): [number, number] {\n  return [2, 4, 6, 12].some(idx => idx === layerIdx) ? [2, 2] : [1, 1]\n}\n\nexport function mobileNetV1(x: tf.Tensor4D, params: MobileNetV1.Params) {\n  return tf.tidy(() => {\n\n    let conv11;\n    let out = pointwiseConvLayer(x, params.conv_0, [2, 2])\n\n    const convPairParams = [\n      params.conv_1,\n      params.conv_2,\n      params.conv_3,\n      params.conv_4,\n      params.conv_5,\n      params.conv_6,\n      params.conv_7,\n      params.conv_8,\n      params.conv_9,\n      params.conv_10,\n      params.conv_11,\n      params.conv_12,\n      params.conv_13\n    ]\n\n    convPairParams.forEach((param, i) => {\n      const layerIdx = i + 1\n      const depthwiseConvStrides = getStridesForLayerIdx(layerIdx)\n      out = depthwiseConvLayer(out, param.depthwise_conv, depthwiseConvStrides)\n      out = pointwiseConvLayer(out, param.pointwise_conv, [1, 1])\n      if (layerIdx === 11) {\n        conv11 = out\n      }\n    })\n\n    if (conv11 === null) {\n      throw new Error('mobileNetV1 - output of conv layer 11 is null')\n    }\n\n    return {\n      out,\n      conv11: conv11 as any\n    }\n\n  })\n}", "import * as tf from '@tensorflow/tfjs'\n\nexport function nonMaxSuppression(\n  boxes: tf.Tensor2D,\n  scores: number[],\n  maxOutputSize: number,\n  iouThreshold: number,\n  scoreThreshold: number\n): number[] {\n\n  const numBoxes = boxes.shape[0]\n  const outputSize = Math.min(\n    maxOutputSize,\n    numBoxes\n  )\n\n  const candidates = scores\n    .map((score, boxIndex) => ({ score, boxIndex }))\n    .filter(c => c.score > scoreThreshold)\n    .sort((c1, c2) => c2.score - c1.score)\n\n  const suppressFunc = (x: number) => x <= iouThreshold ? 1 : 0\n\n  const selected: number[] = []\n\n  candidates.forEach(c => {\n    if (selected.length >= outputSize) {\n      return\n    }\n    const originalScore = c.score\n\n    for (let j = selected.length - 1; j >= 0; --j) {\n      const iou = IOU(boxes, c.boxIndex, selected[j])\n      if (iou === 0.0) {\n        continue\n      }\n      c.score *= suppressFunc(iou)\n      if (c.score <= scoreThreshold) {\n        break\n      }\n    }\n\n    if (originalScore === c.score) {\n      selected.push(c.boxIndex)\n    }\n  })\n\n  return selected\n}\n\nfunction IOU(boxes: tf.Tensor2D, i: number, j: number) {\n  const boxesData = boxes.arraySync()\n  const yminI = Math.min(boxesData[i][0], boxesData[i][2])\n  const xminI = Math.min(boxesData[i][1], boxesData[i][3])\n  const ymaxI = Math.max(boxesData[i][0], boxesData[i][2])\n  const xmaxI = Math.max(boxesData[i][1], boxesData[i][3])\n  const yminJ = Math.min(boxesData[j][0], boxesData[j][2])\n  const xminJ = Math.min(boxesData[j][1], boxesData[j][3])\n  const ymaxJ = Math.max(boxesData[j][0], boxesData[j][2])\n  const xmaxJ = Math.max(boxesData[j][1], boxesData[j][3])\n  const areaI = (ymaxI - yminI) * (xmaxI - xminI)\n  const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ)\n  if (areaI <= 0 || areaJ <= 0) {\n    return 0.0\n  }\n  const intersectionYmin = Math.max(yminI, yminJ)\n  const intersectionXmin = Math.max(xminI, xminJ)\n  const intersectionYmax = Math.min(ymaxI, ymaxJ)\n  const intersectionXmax = Math.min(xmaxI, xmaxJ)\n  const intersectionArea =\n      Math.max(intersectionYmax - intersectionYmin, 0.0) *\n      Math.max(intersectionXmax - intersectionXmin, 0.0)\n  return intersectionArea / (areaI + areaJ - intersectionArea)\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { OutputLayerParams } from './types';\n\n\nfunction getCenterCoordinatesAndSizesLayer(x: tf.Tensor2D) {\n  const vec = tf.unstack(tf.transpose(x, [1, 0]))\n\n  const sizes = [\n    tf.sub(vec[2], vec[0]),\n    tf.sub(vec[3], vec[1])\n  ]\n\n  const centers = [\n    tf.add(vec[0], tf.div(sizes[0], tf.scalar(2))),\n    tf.add(vec[1], tf.div(sizes[1], tf.scalar(2)))\n  ]\n\n  return {\n    sizes,\n    centers\n  }\n}\n\nfunction decodeBoxesLayer(x0: tf.Tensor2D, x1: tf.Tensor2D) {\n  const {\n    sizes,\n    centers\n  } = getCenterCoordinatesAndSizesLayer(x0)\n\n  const vec = tf.unstack(tf.transpose(x1, [1, 0]))\n\n  const div0_out = tf.div(tf.mul(tf.exp(tf.div(vec[2], tf.scalar(5))), sizes[0]), tf.scalar(2))\n  const add0_out = tf.add(tf.mul(tf.div(vec[0], tf.scalar(10)), sizes[0]), centers[0])\n\n  const div1_out = tf.div(tf.mul(tf.exp(tf.div(vec[3], tf.scalar(5))), sizes[1]), tf.scalar(2))\n  const add1_out = tf.add(tf.mul(tf.div(vec[1], tf.scalar(10)), sizes[1]), centers[1])\n\n  return tf.transpose(\n    tf.stack([\n      tf.sub(add0_out, div0_out),\n      tf.sub(add1_out, div1_out),\n      tf.add(add0_out, div0_out),\n      tf.add(add1_out, div1_out)\n    ]),\n    [1, 0]\n  )\n}\n\nexport function outputLayer(\n  boxPredictions: tf.Tensor4D,\n  classPredictions: tf.Tensor4D,\n  params: OutputLayerParams\n) {\n  return tf.tidy(() => {\n\n    const batchSize = boxPredictions.shape[0]\n\n    let boxes = decodeBoxesLayer(\n      tf.reshape(tf.tile(params.extra_dim, [batchSize, 1, 1]), [-1, 4]) as tf.Tensor2D,\n      tf.reshape(boxPredictions, [-1, 4]) as tf.Tensor2D\n    )\n    boxes = tf.reshape(\n      boxes,\n      [batchSize, (boxes.shape[0] / batchSize), 4]\n    )\n\n    const scoresAndClasses = tf.sigmoid(tf.slice(classPredictions, [0, 0, 1], [-1, -1, -1]))\n    let scores = tf.slice(scoresAndClasses, [0, 0, 0], [-1, -1, 1]) as tf.Tensor\n\n    scores = tf.reshape(\n      scores,\n      [batchSize, scores.shape[1] as number]\n    )\n\n    const boxesByBatch = tf.unstack(boxes) as tf.Tensor2D[]\n    const scoresByBatch = tf.unstack(scores) as tf.Tensor1D[]\n\n    return {\n      boxes: boxesByBatch,\n      scores: scoresByBatch\n    }\n\n  })\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { convLayer } from '../common';\nimport { BoxPredictionParams } from './types';\n\n\nexport function boxPredictionLayer(\n  x: tf.Tensor4D,\n  params: BoxPredictionParams\n) {\n  return tf.tidy(() => {\n\n    const batchSize = x.shape[0]\n\n    const boxPredictionEncoding = tf.reshape(\n      convLayer(x, params.box_encoding_predictor),\n      [batchSize, -1, 1, 4]\n    )\n    const classPrediction = tf.reshape(\n      convLayer(x, params.class_predictor),\n      [batchSize, -1, 3]\n    )\n\n    return {\n      boxPredictionEncoding,\n      classPrediction\n    }\n  })\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { boxPredictionLayer } from './boxPredictionLayer';\nimport { pointwiseConvLayer } from './pointwiseConvLayer';\nimport { PredictionLayerParams } from './types';\n\nexport function predictionLayer(\n  x: tf.Tensor4D,\n  conv11: tf.Tensor4D,\n  params: PredictionLayerParams\n) {\n  return tf.tidy(() => {\n\n    const conv0 = pointwiseConvLayer(x, params.conv_0, [1, 1])\n    const conv1 = pointwiseConvLayer(conv0, params.conv_1, [2, 2])\n    const conv2 = pointwiseConvLayer(conv1, params.conv_2, [1, 1])\n    const conv3 = pointwiseConvLayer(conv2, params.conv_3, [2, 2])\n    const conv4 = pointwiseConvLayer(conv3, params.conv_4, [1, 1])\n    const conv5 = pointwiseConvLayer(conv4, params.conv_5, [2, 2])\n    const conv6 = pointwiseConvLayer(conv5, params.conv_6, [1, 1])\n    const conv7 = pointwiseConvLayer(conv6, params.conv_7, [2, 2])\n\n    const boxPrediction0 = boxPredictionLayer(conv11, params.box_predictor_0)\n    const boxPrediction1 = boxPredictionLayer(x, params.box_predictor_1)\n    const boxPrediction2 = boxPredictionLayer(conv1, params.box_predictor_2)\n    const boxPrediction3 = boxPredictionLayer(conv3, params.box_predictor_3)\n    const boxPrediction4 = boxPredictionLayer(conv5, params.box_predictor_4)\n    const boxPrediction5 = boxPredictionLayer(conv7, params.box_predictor_5)\n\n    const boxPredictions = tf.concat([\n      boxPrediction0.boxPredictionEncoding,\n      boxPrediction1.boxPredictionEncoding,\n      boxPrediction2.boxPredictionEncoding,\n      boxPrediction3.boxPredictionEncoding,\n      boxPrediction4.boxPredictionEncoding,\n      boxPrediction5.boxPredictionEncoding\n    ], 1) as tf.Tensor4D\n\n    const classPredictions = tf.concat([\n      boxPrediction0.classPrediction,\n      boxPrediction1.classPrediction,\n      boxPrediction2.classPrediction,\n      boxPrediction3.classPrediction,\n      boxPrediction4.classPrediction,\n      boxPrediction5.classPrediction\n    ], 1) as tf.Tensor4D\n\n    return {\n      boxPredictions,\n      classPredictions\n    }\n  })\n}", "export interface ISsdMobilenetv1Options {\n  minConfidence?: number\n  maxResults?: number\n}\n\nexport class SsdMobilenetv1Options {\n  protected _name: string = 'SsdMobilenetv1Options'\n\n  private _minConfidence: number\n  private _maxResults: number\n\n  constructor({ minConfidence, maxResults }: ISsdMobilenetv1Options = {}) {\n    this._minConfidence = minConfidence || 0.5\n    this._maxResults = maxResults || 100\n\n    if (typeof this._minConfidence !== 'number' || this._minConfidence <= 0 || this._minConfidence >= 1) {\n      throw new Error(`${this._name} - expected minConfidence to be a number between 0 and 1`)\n    }\n\n    if (typeof this._maxResults !== 'number') {\n      throw new Error(`${this._name} - expected maxResults to be a number`)\n    }\n  }\n\n  get minConfidence(): number { return this._minConfidence }\n  get maxResults(): number { return this._maxResults }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { Rect } from '../classes';\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { NetInput, TNetInput, toNetInput } from '../dom';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { mobileNetV1 } from './mobileNetV1';\nimport { nonMaxSuppression } from './nonMaxSuppression';\nimport { outputLayer } from './outputLayer';\nimport { predictionLayer } from './predictionLayer';\nimport { ISsdMobilenetv1Options, SsdMobilenetv1Options } from './SsdMobilenetv1Options';\nimport { NetParams } from './types';\n\n\nexport class SsdMobilenetv1 extends NeuralNetwork<NetParams> {\n\n  constructor() {\n    super('SsdMobilenetv1')\n  }\n\n  public forwardInput(input: NetInput) {\n\n    const { params } = this\n\n    if (!params) {\n      throw new Error('SsdMobilenetv1 - load model before inference')\n    }\n\n    return tf.tidy(() => {\n      // const batchTensor = input.toBatchTensor(512, false).toFloat()\n      const batchTensor = tf.cast(input.toBatchTensor(512, false), 'float32');\n\n      const x = tf.sub(tf.mul(batchTensor, tf.scalar(0.007843137718737125)), tf.scalar(1)) as tf.Tensor4D\n      const features = mobileNetV1(x, params.mobilenetv1)\n\n      const {\n        boxPredictions,\n        classPredictions\n      } = predictionLayer(features.out, features.conv11, params.prediction_layer)\n\n      return outputLayer(boxPredictions, classPredictions, params.output_layer)\n    })\n  }\n\n  public async forward(input: TNetInput) {\n    return this.forwardInput(await toNetInput(input))\n  }\n\n  public async locateFaces(\n    input: TNetInput,\n    options: ISsdMobilenetv1Options = {}\n  ): Promise<FaceDetection[]> {\n\n    const { maxResults, minConfidence } = new SsdMobilenetv1Options(options)\n\n    const netInput = await toNetInput(input)\n\n    const {\n      boxes: _boxes,\n      scores: _scores\n    } = this.forwardInput(netInput)\n\n\n    // TODO batches\n    const boxes = _boxes[0]\n    const scores = _scores[0]\n    for (let i = 1; i < _boxes.length; i++) {\n      _boxes[i].dispose()\n      _scores[i].dispose()\n    }\n\n    // TODO find a better way to filter by minConfidence\n    const scoresData = Array.from(await scores.data())\n\n    const iouThreshold = 0.5\n    const indices = nonMaxSuppression(\n      boxes,\n      scoresData as number[],\n      maxResults,\n      iouThreshold,\n      minConfidence\n    )\n\n    const reshapedDims = netInput.getReshapedInputDimensions(0)\n    const inputSize = netInput.inputSize as number\n    const padX = inputSize / reshapedDims.width\n    const padY = inputSize / reshapedDims.height\n\n    const boxesData = boxes.arraySync()\n    const results = indices\n      .map(idx => {\n        const [top, bottom] = [\n          Math.max(0, boxesData[idx][0]),\n          Math.min(1.0, boxesData[idx][2])\n        ].map(val => val * padY)\n        const [left, right] = [\n          Math.max(0, boxesData[idx][1]),\n          Math.min(1.0, boxesData[idx][3])\n        ].map(val => val * padX)\n        return new FaceDetection(\n          scoresData[idx] as number,\n          new Rect(\n            left,\n            top,\n            right - left,\n            bottom - top\n          ),\n          {\n            height: netInput.getInputHeight(0),\n            width: netInput.getInputWidth(0)\n          }\n        )\n      })\n\n    boxes.dispose()\n    scores.dispose()\n\n    return results\n  }\n\n  protected getDefaultModelName(): string {\n    return 'ssd_mobilenetv1_model'\n  }\n\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap) {\n    return extractParamsFromWeigthMap(weightMap)\n  }\n\n  protected extractParams(weights: Float32Array) {\n    return extractParams(weights)\n  }\n}", "import { SsdMobilenetv1 } from './SsdMobilenetv1';\n\nexport * from './SsdMobilenetv1';\nexport * from './SsdMobilenetv1Options';\n\nexport function createSsdMobilenetv1(weights: Float32Array) {\n  const net = new SsdMobilenetv1()\n  net.extractWeights(weights)\n  return net\n}\n\nexport function createFaceDetectionNet(weights: Float32Array) {\n  return createSsdMobilenetv1(weights)\n}\n\n// alias for backward compatibily\nexport class FaceDetectionNet extends SsdMobilenetv1 {}", "import { Point } from '../classes';\n\nexport const IOU_THRESHOLD = 0.4\n\nexport const BOX_ANCHORS = [\n  new Point(0.738768, 0.874946),\n  new Point(2.42204, 2.65704),\n  new Point(4.30971, 7.04493),\n  new Point(10.246, 4.59428),\n  new Point(12.6868, 11.8741)\n]\n\nexport const BOX_ANCHORS_SEPARABLE = [\n  new Point(1.603231, 2.094468),\n  new Point(6.041143, 7.080126),\n  new Point(2.882459, 3.518061),\n  new Point(4.266906, 5.178857),\n  new Point(9.041765, 10.66308)\n]\n\nexport const MEAN_RGB_SEPARABLE: [number, number, number] = [117.001, 114.697, 97.404]\n\nexport const DEFAULT_MODEL_NAME = 'tiny_yolov2_model'\nexport const DEFAULT_MODEL_NAME_SEPARABLE_CONV = 'tiny_yolov2_separable_conv_model'", "import { Point } from '../classes/Point';\n\nexport type TinyYolov2Config = {\n  withSeparableConvs: boolean\n  iouThreshold: number\n  anchors: Point[]\n  classes: string[]\n  meanRgb?: [number, number, number]\n  withClassScores?: boolean,\n  filterSizes?: number[]\n  isFirstLayerConv2d?: boolean\n}\n\nconst isNumber = (arg: any) => typeof arg === 'number'\n\nexport function validateConfig(config: any) {\n  if (!config) {\n    throw new Error(`invalid config: ${config}`)\n  }\n\n  if (typeof config.withSeparableConvs !== 'boolean') {\n    throw new Error(`config.withSeparableConvs has to be a boolean, have: ${config.withSeparableConvs}`)\n  }\n\n  if (!isNumber(config.iouThreshold) || config.iouThreshold < 0 || config.iouThreshold > 1.0) {\n    throw new Error(`config.iouThreshold has to be a number between [0, 1], have: ${config.iouThreshold}`)\n  }\n\n  if (\n    !Array.isArray(config.classes)\n    || !config.classes.length\n    || !config.classes.every((c: any) => typeof c === 'string')\n  ) {\n\n    throw new Error(`config.classes has to be an array class names: string[], have: ${JSON.stringify(config.classes)}`)\n  }\n\n  if (\n    !Array.isArray(config.anchors)\n    || !config.anchors.length\n    || !config.anchors.map((a: any) => a || {}).every((a: any) => isNumber(a.x) && isNumber(a.y))\n  ) {\n\n    throw new Error(`config.anchors has to be an array of { x: number, y: number }, have: ${JSON.stringify(config.anchors)}`)\n  }\n\n  if (config.meanRgb && (\n    !Array.isArray(config.meanRgb)\n    || config.meanRgb.length !== 3\n    || !config.meanRgb.every(isNumber)\n  )) {\n\n    throw new Error(`config.meanRgb has to be an array of shape [number, number, number], have: ${JSON.stringify(config.meanRgb)}`)\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nexport function leaky(x: tf.Tensor4D): tf.Tensor4D {\n  return tf.tidy(() => {\n    const min = tf.mul(x, tf.scalar(0.10000000149011612))\n    return tf.add(tf.relu(tf.sub(x, min)), min)\n    //return tf.maximum(x, min)\n  })\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { leaky } from './leaky';\nimport { ConvWithBatchNorm } from './types';\n\nexport function convWithBatchNorm(x: tf.Tensor4D, params: ConvWithBatchNorm): tf.Tensor4D  {\n  return tf.tidy(() => {\n    let out = tf.pad(x, [[0, 0], [1, 1], [1, 1], [0, 0]]) as tf.Tensor4D\n\n    out = tf.conv2d(out, params.conv.filters, [1, 1], 'valid')\n    out = tf.sub(out, params.bn.sub)\n    out = tf.mul(out, params.bn.truediv)\n    out = tf.add(out, params.conv.bias)\n\n    return leaky(out)\n  })\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { SeparableConvParams } from '../common/types';\nimport { leaky } from './leaky';\n\nexport function depthwiseSeparableConv(x: tf.Tensor4D, params: SeparableConvParams): tf.Tensor4D  {\n  return tf.tidy(() => {\n    let out = tf.pad(x, [[0, 0], [1, 1], [1, 1], [0, 0]]) as tf.Tensor4D\n\n    out = tf.separableConv2d(out, params.depthwise_filter, params.pointwise_filter, [1, 1], 'valid')\n    out = tf.add(out, params.bias)\n\n    return leaky(out)\n  })\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { extractConvParamsFactory } from '../common';\nimport { extractSeparableConvParamsFactory } from '../common/extractSeparableConvParamsFactory';\nimport { extractWeightsFactory } from '../common/extractWeightsFactory';\nimport { ExtractWeightsFunction, ParamMapping } from '../common/types';\nimport { TinyYolov2Config } from './config';\nimport { BatchNorm, ConvWithBatchNorm, TinyYolov2NetParams } from './types';\n\nfunction extractorsFactory(extractWeights: ExtractWeightsFunction, paramMappings: ParamMapping[]) {\n\n  const extractConvParams = extractConvParamsFactory(extractWeights, paramMappings)\n\n  function extractBatchNormParams(size: number, mappedPrefix: string): BatchNorm {\n\n    const sub = tf.tensor1d(extractWeights(size))\n    const truediv = tf.tensor1d(extractWeights(size))\n\n    paramMappings.push(\n      { paramPath: `${mappedPrefix}/sub` },\n      { paramPath: `${mappedPrefix}/truediv` }\n    )\n\n    return { sub, truediv }\n  }\n\n  function extractConvWithBatchNormParams(channelsIn: number, channelsOut: number, mappedPrefix: string): ConvWithBatchNorm {\n\n    const conv = extractConvParams(channelsIn, channelsOut, 3, `${mappedPrefix}/conv`)\n    const bn = extractBatchNormParams(channelsOut, `${mappedPrefix}/bn`)\n\n    return { conv, bn }\n  }\n  const extractSeparableConvParams = extractSeparableConvParamsFactory(extractWeights, paramMappings)\n\n  return {\n    extractConvParams,\n    extractConvWithBatchNormParams,\n    extractSeparableConvParams\n  }\n\n}\n\nexport function extractParams(\n  weights: Float32Array,\n  config: TinyYolov2Config,\n  boxEncodingSize: number,\n  filterSizes: number[]\n): { params: TinyYolov2NetParams, paramMappings: ParamMapping[] } {\n\n  const {\n    extractWeights,\n    getRemainingWeights\n  } = extractWeightsFactory(weights)\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractConvParams,\n    extractConvWithBatchNormParams,\n    extractSeparableConvParams\n  } = extractorsFactory(extractWeights, paramMappings)\n\n  let params: TinyYolov2NetParams\n\n  if (config.withSeparableConvs) {\n    const [s0, s1, s2, s3, s4, s5, s6, s7, s8] = filterSizes\n\n    const conv0 = config.isFirstLayerConv2d\n      ? extractConvParams(s0, s1, 3, 'conv0')\n      : extractSeparableConvParams(s0, s1, 'conv0')\n    const conv1 = extractSeparableConvParams(s1, s2, 'conv1')\n    const conv2 = extractSeparableConvParams(s2, s3, 'conv2')\n    const conv3 = extractSeparableConvParams(s3, s4, 'conv3')\n    const conv4 = extractSeparableConvParams(s4, s5, 'conv4')\n    const conv5 = extractSeparableConvParams(s5, s6, 'conv5')\n    const conv6 = s7 ? extractSeparableConvParams(s6, s7, 'conv6') : undefined\n    const conv7 = s8 ? extractSeparableConvParams(s7, s8, 'conv7') : undefined\n    const conv8 = extractConvParams(s8 || s7 || s6, 5 * boxEncodingSize, 1, 'conv8')\n    params = { conv0, conv1, conv2, conv3, conv4, conv5, conv6, conv7, conv8 }\n  } else {\n    const [s0, s1, s2, s3, s4, s5, s6, s7, s8] = filterSizes\n    const conv0 = extractConvWithBatchNormParams(s0, s1, 'conv0',)\n    const conv1 = extractConvWithBatchNormParams(s1, s2, 'conv1')\n    const conv2 = extractConvWithBatchNormParams(s2, s3, 'conv2')\n    const conv3 = extractConvWithBatchNormParams(s3, s4, 'conv3')\n    const conv4 = extractConvWithBatchNormParams(s4, s5, 'conv4')\n    const conv5 = extractConvWithBatchNormParams(s5, s6, 'conv5')\n    const conv6 = extractConvWithBatchNormParams(s6, s7, 'conv6')\n    const conv7 = extractConvWithBatchNormParams(s7, s8, 'conv7')\n    const conv8 = extractConvParams(s8, 5 * boxEncodingSize, 1, 'conv8')\n    params = { conv0, conv1, conv2, conv3, conv4, conv5, conv6, conv7, conv8 }\n  }\n\n  if (getRemainingWeights().length !== 0) {\n    throw new Error(`weights remaing after extract: ${getRemainingWeights().length}`)\n  }\n\n\n  return { params, paramMappings }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { ConvParams } from '../common';\nimport { disposeUnusedWeightTensors } from '../common/disposeUnusedWeightTensors';\nimport { loadSeparableConvParamsFactory } from '../common/extractSeparableConvParamsFactory';\nimport { extractWeightEntryFactory } from '../common/extractWeightEntryFactory';\nimport { ParamMapping } from '../common/types';\nimport { TinyYolov2Config } from './config';\nimport { BatchNorm, ConvWithBatchNorm, TinyYolov2NetParams } from './types';\n\nfunction extractorsFactory(weightMap: any, paramMappings: ParamMapping[]) {\n\n  const extractWeightEntry = extractWeightEntryFactory(weightMap, paramMappings)\n\n  function extractBatchNormParams(prefix: string): BatchNorm {\n    const sub = extractWeightEntry<tf.Tensor1D>(`${prefix}/sub`, 1)\n    const truediv = extractWeightEntry<tf.Tensor1D>(`${prefix}/truediv`, 1)\n    return { sub, truediv }\n  }\n\n  function extractConvParams(prefix: string): ConvParams {\n    const filters = extractWeightEntry<tf.Tensor4D>(`${prefix}/filters`, 4)\n    const bias = extractWeightEntry<tf.Tensor1D>(`${prefix}/bias`, 1)\n    return { filters, bias }\n  }\n\n  function extractConvWithBatchNormParams(prefix: string): ConvWithBatchNorm {\n    const conv = extractConvParams(`${prefix}/conv`)\n    const bn = extractBatchNormParams(`${prefix}/bn`)\n    return { conv, bn }\n  }\n\n  const extractSeparableConvParams = loadSeparableConvParamsFactory(extractWeightEntry)\n\n  return {\n    extractConvParams,\n    extractConvWithBatchNormParams,\n    extractSeparableConvParams\n  }\n\n}\n\nexport function extractParamsFromWeigthMap(\n  weightMap: tf.NamedTensorMap,\n  config: TinyYolov2Config\n): { params: TinyYolov2NetParams, paramMappings: ParamMapping[] } {\n\n  const paramMappings: ParamMapping[] = []\n\n  const {\n    extractConvParams,\n    extractConvWithBatchNormParams,\n    extractSeparableConvParams\n  } = extractorsFactory(weightMap, paramMappings)\n\n  let params: TinyYolov2NetParams\n\n  if (config.withSeparableConvs) {\n    const numFilters = (config.filterSizes && config.filterSizes.length || 9)\n    params = {\n      conv0: config.isFirstLayerConv2d ? extractConvParams('conv0') : extractSeparableConvParams('conv0'),\n      conv1: extractSeparableConvParams('conv1'),\n      conv2: extractSeparableConvParams('conv2'),\n      conv3: extractSeparableConvParams('conv3'),\n      conv4: extractSeparableConvParams('conv4'),\n      conv5: extractSeparableConvParams('conv5'),\n      conv6: numFilters > 7 ? extractSeparableConvParams('conv6') : undefined,\n      conv7: numFilters > 8 ? extractSeparableConvParams('conv7') : undefined,\n      conv8: extractConvParams('conv8')\n    }\n  } else {\n    params = {\n      conv0: extractConvWithBatchNormParams('conv0'),\n      conv1: extractConvWithBatchNormParams('conv1'),\n      conv2: extractConvWithBatchNormParams('conv2'),\n      conv3: extractConvWithBatchNormParams('conv3'),\n      conv4: extractConvWithBatchNormParams('conv4'),\n      conv5: extractConvWithBatchNormParams('conv5'),\n      conv6: extractConvWithBatchNormParams('conv6'),\n      conv7: extractConvWithBatchNormParams('conv7'),\n      conv8: extractConvParams('conv8')\n    }\n  }\n\n  disposeUnusedWeightTensors(weightMap, paramMappings)\n\n  return { params, paramMappings }\n}", "export enum TinyYolov2SizeType {\n  XS = 224,\n  SM = 320,\n  MD = 416,\n  LG = 608\n}\n\nexport interface ITinyYolov2Options {\n  inputSize?: number\n  scoreThreshold?: number\n}\n\nexport class TinyYolov2Options {\n  protected _name: string = 'TinyYolov2Options'\n\n  private _inputSize: number\n  private _scoreThreshold: number\n\n  constructor({ inputSize, scoreThreshold }: ITinyYolov2Options = {}) {\n    this._inputSize = inputSize || 416\n    this._scoreThreshold = scoreThreshold || 0.5\n\n    if (typeof this._inputSize !== 'number' || this._inputSize % 32 !== 0) {\n      throw new Error(`${this._name} - expected inputSize to be a number divisible by 32`)\n    }\n\n    if (typeof this._scoreThreshold !== 'number' || this._scoreThreshold <= 0 || this._scoreThreshold >= 1) {\n      throw new Error(`${this._name} - expected scoreThreshold to be a number between 0 and 1`)\n    }\n  }\n\n  get inputSize(): number { return this._inputSize }\n  get scoreThreshold(): number { return this._scoreThreshold }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { BoundingBox } from '../classes/BoundingBox';\nimport { Dimensions } from '../classes/Dimensions';\nimport { ObjectDetection } from '../classes/ObjectDetection';\nimport { convLayer } from '../common';\nimport { ConvParams, SeparableConvParams } from '../common/types';\nimport { toNetInput } from '../dom';\nimport { NetInput } from '../dom/NetInput';\nimport { TNetInput } from '../dom/types';\nimport { NeuralNetwork } from '../NeuralNetwork';\nimport { sigmoid } from '../ops';\nimport { nonMaxSuppression } from '../ops/nonMaxSuppression';\nimport { normalize } from '../ops/normalize';\nimport { TinyYolov2Config, validateConfig } from './config';\nimport { convWithBatchNorm } from './convWithBatchNorm';\nimport { depthwiseSeparableConv } from './depthwiseSeparableConv';\nimport { extractParams } from './extractParams';\nimport { extractParamsFromWeigthMap } from './extractParamsFromWeigthMap';\nimport { leaky } from './leaky';\nimport { ITinyYolov2Options, TinyYolov2Options } from './TinyYolov2Options';\nimport { DefaultTinyYolov2NetParams, MobilenetParams, TinyYolov2NetParams } from './types';\n\nexport class TinyYolov2Base extends NeuralNetwork<TinyYolov2NetParams> {\n\n  public static DEFAULT_FILTER_SIZES = [\n    3, 16, 32, 64, 128, 256, 512, 1024, 1024\n  ]\n\n  private _config: TinyYolov2Config\n\n  constructor(config: TinyYolov2Config) {\n    super('TinyYolov2')\n    validateConfig(config)\n    this._config = config\n  }\n\n  public get config(): TinyYolov2Config {\n    return this._config\n  }\n\n  public get withClassScores(): boolean {\n    return this.config.withClassScores || this.config.classes.length > 1\n  }\n\n  public get boxEncodingSize(): number {\n    return 5 + (this.withClassScores ? this.config.classes.length : 0)\n  }\n\n  public runTinyYolov2(x: tf.Tensor4D, params: DefaultTinyYolov2NetParams): tf.Tensor4D {\n\n    let out = convWithBatchNorm(x, params.conv0)\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same')\n    out = convWithBatchNorm(out, params.conv1)\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same')\n    out = convWithBatchNorm(out, params.conv2)\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same')\n    out = convWithBatchNorm(out, params.conv3)\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same')\n    out = convWithBatchNorm(out, params.conv4)\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same')\n    out = convWithBatchNorm(out, params.conv5)\n    out = tf.maxPool(out, [2, 2], [1, 1], 'same')\n    out = convWithBatchNorm(out, params.conv6)\n    out = convWithBatchNorm(out, params.conv7)\n\n    return convLayer(out, params.conv8, 'valid', false)\n  }\n\n  public runMobilenet(x: tf.Tensor4D, params: MobilenetParams): tf.Tensor4D {\n\n    let out = this.config.isFirstLayerConv2d\n      ? leaky(convLayer(x, params.conv0 as ConvParams, 'valid', false))\n      : depthwiseSeparableConv(x, params.conv0 as SeparableConvParams)\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same')\n    out = depthwiseSeparableConv(out, params.conv1)\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same')\n    out = depthwiseSeparableConv(out, params.conv2)\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same')\n    out = depthwiseSeparableConv(out, params.conv3)\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same')\n    out = depthwiseSeparableConv(out, params.conv4)\n    out = tf.maxPool(out, [2, 2], [2, 2], 'same')\n    out = depthwiseSeparableConv(out, params.conv5)\n    out = tf.maxPool(out, [2, 2], [1, 1], 'same')\n    out = params.conv6 ? depthwiseSeparableConv(out, params.conv6) : out\n    out = params.conv7 ? depthwiseSeparableConv(out, params.conv7) : out\n\n    return convLayer(out, params.conv8, 'valid', false)\n  }\n\n  public forwardInput(input: NetInput, inputSize: number): tf.Tensor4D {\n\n    const { params } = this\n\n    if (!params) {\n      throw new Error('TinyYolov2 - load model before inference')\n    }\n\n    return tf.tidy(() => {\n\n      // let batchTensor = input.toBatchTensor(inputSize, false).toFloat()\n      let batchTensor = tf.cast(input.toBatchTensor(inputSize, false), 'float32');\n      batchTensor = this.config.meanRgb\n        ? normalize(batchTensor, this.config.meanRgb)\n        : batchTensor\n      batchTensor = batchTensor.div(tf.scalar(256)) as tf.Tensor4D\n\n      return this.config.withSeparableConvs\n        ? this.runMobilenet(batchTensor, params as MobilenetParams)\n        : this.runTinyYolov2(batchTensor, params as DefaultTinyYolov2NetParams)\n    })\n  }\n\n  public async forward(input: TNetInput, inputSize: number): Promise<tf.Tensor4D> {\n    return await this.forwardInput(await toNetInput(input), inputSize)\n  }\n\n  public async detect(input: TNetInput, forwardParams: ITinyYolov2Options = {}): Promise<ObjectDetection[]> {\n\n    const { inputSize, scoreThreshold } = new TinyYolov2Options(forwardParams)\n\n    const netInput = await toNetInput(input)\n    const out = await this.forwardInput(netInput, inputSize)\n    const out0 = tf.tidy(() => tf.unstack(out)[0].expandDims()) as tf.Tensor4D\n\n    const inputDimensions = {\n      width: netInput.getInputWidth(0),\n      height: netInput.getInputHeight(0)\n    }\n\n    const results = await this.extractBoxes(out0, netInput.getReshapedInputDimensions(0), scoreThreshold)\n    out.dispose()\n    out0.dispose()\n\n    const boxes = results.map(res => res.box)\n    const scores = results.map(res => res.score)\n    const classScores = results.map(res => res.classScore)\n    const classNames = results.map(res => this.config.classes[res.label])\n\n    const indices = nonMaxSuppression(\n      boxes.map(box => box.rescale(inputSize)),\n      scores,\n      this.config.iouThreshold,\n      true\n    )\n\n    const detections = indices.map(idx =>\n      new ObjectDetection(\n        scores[idx],\n        classScores[idx],\n        classNames[idx],\n        boxes[idx],\n        inputDimensions\n      )\n    )\n\n    return detections\n  }\n\n  protected getDefaultModelName(): string {\n    return ''\n  }\n\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap) {\n    return extractParamsFromWeigthMap(weightMap, this.config)\n  }\n\n  protected extractParams(weights: Float32Array) {\n    const filterSizes = this.config.filterSizes || TinyYolov2Base.DEFAULT_FILTER_SIZES\n\n    const numFilters = filterSizes ? filterSizes.length : undefined\n    if (numFilters !== 7 && numFilters !== 8 && numFilters !== 9) {\n      throw new Error(`TinyYolov2 - expected 7 | 8 | 9 convolutional filters, but found ${numFilters} filterSizes in config`)\n    }\n    return extractParams(weights, this.config, this.boxEncodingSize, filterSizes)\n  }\n\n  protected async extractBoxes(\n    outputTensor: tf.Tensor4D,\n    inputBlobDimensions: Dimensions,\n    scoreThreshold?: number\n  ) {\n\n    const { width, height } = inputBlobDimensions\n    const inputSize = Math.max(width, height)\n    const correctionFactorX = inputSize / width\n    const correctionFactorY = inputSize / height\n\n    const numCells = outputTensor.shape[1]\n    const numBoxes = this.config.anchors.length\n\n    const [boxesTensor, scoresTensor, classScoresTensor] = tf.tidy(() => {\n      const reshaped = outputTensor.reshape([numCells, numCells, numBoxes, this.boxEncodingSize])\n\n      const boxes = reshaped.slice([0, 0, 0, 0], [numCells, numCells, numBoxes, 4])\n      const scores = reshaped.slice([0, 0, 0, 4], [numCells, numCells, numBoxes, 1])\n      const classScores = this.withClassScores\n        ? tf.softmax(reshaped.slice([0, 0, 0, 5], [numCells, numCells, numBoxes, this.config.classes.length]), 3)\n        : tf.scalar(0)\n      return [boxes, scores, classScores]\n    })\n\n    const results = [] as any;\n\n    const scoresData = await scoresTensor.array()\n    const boxesData = await boxesTensor.array()\n    for (let row = 0; row < numCells; row ++) {\n      for (let col = 0; col < numCells; col ++) {\n        for (let anchor = 0; anchor < numBoxes; anchor ++) {\n\n          const score = sigmoid(scoresData[row][col][anchor][0]);\n          if (!scoreThreshold || score > scoreThreshold) {\n            const ctX = ((col + sigmoid(boxesData[row][col][anchor][0])) / numCells) * correctionFactorX\n            const ctY = ((row + sigmoid(boxesData[row][col][anchor][1])) / numCells) * correctionFactorY\n            const width = ((Math.exp(boxesData[row][col][anchor][2]) * this.config.anchors[anchor].x) / numCells) * correctionFactorX\n            const height = ((Math.exp(boxesData[row][col][anchor][3]) * this.config.anchors[anchor].y) / numCells) * correctionFactorY\n\n            const x = (ctX - (width / 2))\n            const y = (ctY - (height / 2))\n\n            const pos = { row, col, anchor }\n            const { classScore, label } = this.withClassScores\n              ? await this.extractPredictedClass(classScoresTensor as tf.Tensor4D, pos)\n              : { classScore: 1, label: 0 }\n\n            results.push({\n              box: new BoundingBox(x, y, x + width, y + height),\n              score: score,\n              classScore: score * classScore,\n              label,\n              ...pos\n            })\n          }\n        }\n      }\n    }\n\n    boxesTensor.dispose()\n    scoresTensor.dispose()\n    classScoresTensor.dispose()\n\n    return results\n  }\n\n  private async extractPredictedClass(classesTensor: tf.Tensor4D, pos: { row: number, col: number, anchor: number },) {\n    const { row, col, anchor } = pos\n    const classesData = await classesTensor.array()\n    return Array(this.config.classes.length).fill(0)\n      .map((_, i) => classesData[row][col][anchor][i])\n      .map((classScore, label) => ({\n        classScore,\n        label\n      }))\n      .reduce((max, curr) => max.classScore > curr.classScore ? max : curr)\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { FaceDetection, Point } from '../classes';\nimport { ParamMapping } from '../common/types';\nimport { TNetInput } from '../dom/types';\nimport {\n  BOX_ANCHORS,\n  BOX_ANCHORS_SEPARABLE,\n  DEFAULT_MODEL_NAME,\n  DEFAULT_MODEL_NAME_SEPARABLE_CONV,\n  IOU_THRESHOLD,\n  MEAN_RGB_SEPARABLE,\n} from './const';\nimport { TinyYolov2Base } from './TinyYolov2Base';\nimport { ITinyYolov2Options } from './TinyYolov2Options';\nimport { TinyYolov2NetParams } from './types';\n\nexport class TinyYolov2 extends TinyYolov2Base {\n\n  constructor(withSeparableConvs: boolean = true) {\n    const config = Object.assign({}, {\n      withSeparableConvs,\n      iouThreshold: IOU_THRESHOLD,\n      classes: ['face']\n    },\n    withSeparableConvs\n      ? {\n        anchors: BOX_ANCHORS_SEPARABLE,\n        meanRgb: MEAN_RGB_SEPARABLE\n      }\n      : {\n        anchors: BOX_ANCHORS,\n        withClassScores: true\n      }\n    )\n\n    super(config)\n  }\n\n  public get withSeparableConvs(): boolean {\n    return this.config.withSeparableConvs\n  }\n\n  public get anchors(): Point[] {\n    return this.config.anchors\n  }\n\n  public async locateFaces(input: TNetInput, forwardParams: ITinyYolov2Options): Promise<FaceDetection[]> {\n    const objectDetections = await this.detect(input, forwardParams)\n    return objectDetections.map(det => new FaceDetection(det.score, det.relativeBox, { width: det.imageWidth, height: det.imageHeight }))\n  }\n\n  protected getDefaultModelName(): string {\n    return this.withSeparableConvs ? DEFAULT_MODEL_NAME_SEPARABLE_CONV : DEFAULT_MODEL_NAME\n  }\n\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap): { params: TinyYolov2NetParams, paramMappings: ParamMapping[] } {\n    return super.extractParamsFromWeigthMap(weightMap)\n  }\n}", "import { TinyYolov2 } from './TinyYolov2';\n\nexport * from './TinyYolov2Options';\n\nexport * from './config'\nexport * from './types'\n\nexport { TinyYolov2 }\n\nexport function createTinyYolov2(weights: Float32Array, withSeparableConvs: boolean = true) {\n  const net = new TinyYolov2(withSeparableConvs)\n  net.extractWeights(weights)\n  return net\n}", "import { ITinyYolov2Options, TinyYolov2Options } from '../tinyYolov2';\n\nexport interface ITinyFaceDetectorOptions extends ITinyYolov2Options {}\n\nexport class TinyFaceDetectorOptions extends TinyYolov2Options {\n  protected _name: string = 'TinyFaceDetectorOptions'\n}", "export class ComposableTask<T> {\n\n  public async then(\n    onfulfilled: (value: T) => T | PromiseLike<T>\n  ): Promise<T> {\n    return onfulfilled(await this.run())\n  }\n\n  public async run(): Promise<T> {\n    throw new Error('ComposableTask - run is not implemented')\n  }\n}\n", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { extractFaces, extractFaceTensors, TNetInput } from '../dom';\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\nimport { isWithFaceLandmarks, WithFaceLandmarks } from '../factories/WithFaceLandmarks';\n\nexport async function extractAllFacesAndComputeResults<TSource extends WithFaceDetection<{}>, TResult>(\n  parentResults: TSource[],\n  input: TNetInput,\n  computeResults: (faces: Array<HTMLCanvasElement | tf.Tensor3D>) => Promise<TResult>,\n  extractedFaces?: Array<HTMLCanvasElement | tf.Tensor3D> | null,\n  getRectForAlignment: (parentResult: WithFaceLandmarks<TSource, any>) => FaceDetection = ({ alignedRect }) => alignedRect\n) {\n  const faceBoxes = parentResults.map(parentResult =>\n    isWithFaceLandmarks(parentResult)\n      ? getRectForAlignment(parentResult)\n      : parentResult.detection\n  )\n  const faces: Array<HTMLCanvasElement | tf.Tensor3D> = extractedFaces || (\n    input instanceof tf.Tensor\n      ? await extractFaceTensors(input, faceBoxes)\n      : await extractFaces(input, faceBoxes)\n  )\n\n  const results = await computeResults(faces)\n\n  faces.forEach(f => f instanceof tf.Tensor && f.dispose())\n\n  return results\n}\n\nexport async function extractSingleFaceAndComputeResult<TSource extends WithFaceDetection<{}>, TResult>(\n  parentResult: TSource,\n  input: TNetInput,\n  computeResult: (face: HTMLCanvasElement | tf.Tensor3D) => Promise<TResult>,\n  extractedFaces?: Array<HTMLCanvasElement | tf.Tensor3D> | null,\n  getRectForAlignment?: (parentResult: WithFaceLandmarks<TSource, any>) => FaceDetection\n) {\n  return extractAllFacesAndComputeResults<TSource, TResult>(\n    [parentResult],\n    input,\n    async faces => computeResult(faces[0]),\n    extractedFaces,\n    getRectForAlignment\n  )\n}", "import { Point } from '../classes'\n\nexport const IOU_THRESHOLD = 0.4\n\nexport const BOX_ANCHORS = [\n  new Point(1.603231, 2.094468),\n  new Point(6.041143, 7.080126),\n  new Point(2.882459, 3.518061),\n  new Point(4.266906, 5.178857),\n  new Point(9.041765, 10.66308)\n]\n\nexport const MEAN_RGB: [number, number, number] = [117.001, 114.697, 97.404]", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { FaceDetection, Point } from '../classes';\nimport { ParamMapping } from '../common';\nimport { TNetInput } from '../dom';\nimport { ITinyYolov2Options } from '../tinyYolov2';\nimport { TinyYolov2Base } from '../tinyYolov2/TinyYolov2Base';\nimport { TinyYolov2NetParams } from '../tinyYolov2/types';\nimport { BOX_ANCHORS, IOU_THRESHOLD, MEAN_RGB } from './const';\n\nexport class TinyFaceDetector extends TinyYolov2Base {\n\n  constructor() {\n    const config = {\n      withSeparableConvs: true,\n      iouThreshold: IOU_THRESHOLD,\n      classes: ['face'],\n      anchors: BOX_ANCHORS,\n      meanRgb: MEAN_RGB,\n      isFirstLayerConv2d: true,\n      filterSizes: [3, 16, 32, 64, 128, 256, 512]\n    }\n\n    super(config)\n  }\n\n  public get anchors(): Point[] {\n    return this.config.anchors\n  }\n\n  public async locateFaces(input: TNetInput, forwardParams: ITinyYolov2Options): Promise<FaceDetection[]> {\n    const objectDetections = await this.detect(input, forwardParams)\n    return objectDetections.map(det => new FaceDetection(det.score, det.relativeBox, { width: det.imageWidth, height: det.imageHeight }))\n  }\n\n  protected getDefaultModelName(): string {\n    return 'tiny_face_detector_model'\n  }\n\n  protected extractParamsFromWeigthMap(weightMap: tf.NamedTensorMap): { params: TinyYolov2NetParams, paramMappings: ParamMapping[] } {\n    return super.extractParamsFromWeigthMap(weightMap)\n  }\n}", "import { AgeGenderNet } from '../ageGenderNet/AgeGenderNet';\nimport { AgeAndGenderPrediction } from '../ageGenderNet/types';\nimport { FaceDetection } from '../classes/FaceDetection';\nimport { FaceLandmarks5 } from '../classes/FaceLandmarks5';\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { TNetInput } from '../dom';\nimport { FaceExpressionNet } from '../faceExpressionNet/FaceExpressionNet';\nimport { FaceExpressions } from '../faceExpressionNet/FaceExpressions';\nimport { FaceLandmark68Net } from '../faceLandmarkNet/FaceLandmark68Net';\nimport { FaceLandmark68TinyNet } from '../faceLandmarkNet/FaceLandmark68TinyNet';\nimport { FaceRecognitionNet } from '../faceRecognitionNet/FaceRecognitionNet';\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\nimport { WithFaceLandmarks } from '../factories/WithFaceLandmarks';\nimport { SsdMobilenetv1 } from '../ssdMobilenetv1/SsdMobilenetv1';\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1/SsdMobilenetv1Options';\nimport { TinyFaceDetector } from '../tinyFaceDetector/TinyFaceDetector';\nimport { TinyFaceDetectorOptions } from '../tinyFaceDetector/TinyFaceDetectorOptions';\nimport { ITinyYolov2Options, TinyYolov2 } from '../tinyYolov2';\n\nexport const nets = {\n  ssdMobilenetv1: new SsdMobilenetv1(),\n  tinyFaceDetector: new TinyFaceDetector(),\n  tinyYolov2: new TinyYolov2(),\n  faceLandmark68Net: new FaceLandmark68Net(),\n  faceLandmark68TinyNet: new FaceLandmark68TinyNet(),\n  faceRecognitionNet: new FaceRecognitionNet(),\n  faceExpressionNet: new FaceExpressionNet(),\n  ageGenderNet: new AgeGenderNet()\n}\n\n/**\n * Attempts to detect all faces in an image using SSD Mobilenetv1 Network.\n *\n * @param input The input image.\n * @param options (optional, default: see SsdMobilenetv1Options constructor for default parameters).\n * @returns Bounding box of each face with score.\n */\nexport const ssdMobilenetv1 = (input: TNetInput, options: SsdMobilenetv1Options): Promise<FaceDetection[]> =>\n  nets.ssdMobilenetv1.locateFaces(input, options)\n\n/**\n * Attempts to detect all faces in an image using the Tiny Face Detector.\n *\n * @param input The input image.\n * @param options (optional, default: see TinyFaceDetectorOptions constructor for default parameters).\n * @returns Bounding box of each face with score.\n */\nexport const tinyFaceDetector = (input: TNetInput, options: TinyFaceDetectorOptions): Promise<FaceDetection[]> =>\n  nets.tinyFaceDetector.locateFaces(input, options)\n\n/**\n * Attempts to detect all faces in an image using the Tiny Yolov2 Network.\n *\n * @param input The input image.\n * @param options (optional, default: see TinyYolov2Options constructor for default parameters).\n * @returns Bounding box of each face with score.\n */\nexport const tinyYolov2 = (input: TNetInput, options: ITinyYolov2Options): Promise<FaceDetection[]> =>\n  nets.tinyYolov2.locateFaces(input, options)\n\n/**\n * Detects the 68 point face landmark positions of the face shown in an image.\n *\n * @param inputs The face image extracted from the bounding box of a face. Can\n * also be an array of input images, which will be batch processed.\n * @returns 68 point face landmarks or array thereof in case of batch input.\n */\nexport const detectFaceLandmarks = (input: TNetInput): Promise<FaceLandmarks68 | FaceLandmarks68[]> =>\n  nets.faceLandmark68Net.detectLandmarks(input)\n\n/**\n * Detects the 68 point face landmark positions of the face shown in an image\n * using a tinier version of the 68 point face landmark model, which is slightly\n * faster at inference, but also slightly less accurate.\n *\n * @param inputs The face image extracted from the bounding box of a face. Can\n * also be an array of input images, which will be batch processed.\n * @returns 68 point face landmarks or array thereof in case of batch input.\n */\nexport const detectFaceLandmarksTiny = (input: TNetInput): Promise<FaceLandmarks68 | FaceLandmarks68[]>  =>\n  nets.faceLandmark68TinyNet.detectLandmarks(input)\n\n/**\n * Computes a 128 entry vector (face descriptor / face embeddings) from the face shown in an image,\n * which uniquely represents the features of that persons face. The computed face descriptor can\n * be used to measure the similarity between faces, by computing the euclidean distance of two\n * face descriptors.\n *\n * @param inputs The face image extracted from the aligned bounding box of a face. Can\n * also be an array of input images, which will be batch processed.\n * @returns Face descriptor with 128 entries or array thereof in case of batch input.\n */\nexport const computeFaceDescriptor = (input: TNetInput): Promise<Float32Array | Float32Array[]>  =>\n  nets.faceRecognitionNet.computeFaceDescriptor(input)\n\n\n/**\n * Recognizes the facial expressions from a face image.\n *\n * @param inputs The face image extracted from the bounding box of a face. Can\n * also be an array of input images, which will be batch processed.\n * @returns Facial expressions with corresponding probabilities or array thereof in case of batch input.\n */\nexport const recognizeFaceExpressions = (input: TNetInput): Promise<FaceExpressions | FaceExpressions[]> =>\n  nets.faceExpressionNet.predictExpressions(input)\n\n/**\n * Predicts age and gender from a face image.\n *\n * @param inputs The face image extracted from the bounding box of a face. Can\n * also be an array of input images, which will be batch processed.\n * @returns Predictions with age, gender and gender probability or array thereof in case of batch input.\n */\nexport const predictAgeAndGender = (input: TNetInput): Promise<AgeAndGenderPrediction | AgeAndGenderPrediction[]> =>\n  nets.ageGenderNet.predictAgeAndGender(input)\n\nexport const loadSsdMobilenetv1Model = (url: string) => nets.ssdMobilenetv1.load(url)\nexport const loadTinyFaceDetectorModel = (url: string) => nets.tinyFaceDetector.load(url)\nexport const loadTinyYolov2Model = (url: string) => nets.tinyYolov2.load(url)\nexport const loadFaceLandmarkModel = (url: string) => nets.faceLandmark68Net.load(url)\nexport const loadFaceLandmarkTinyModel = (url: string) => nets.faceLandmark68TinyNet.load(url)\nexport const loadFaceRecognitionModel = (url: string) => nets.faceRecognitionNet.load(url)\nexport const loadFaceExpressionModel = (url: string) => nets.faceExpressionNet.load(url)\nexport const loadAgeGenderModel = (url: string) => nets.ageGenderNet.load(url)\n\n// backward compatibility\nexport const loadFaceDetectionModel = loadSsdMobilenetv1Model\nexport const locateFaces = ssdMobilenetv1\nexport const detectLandmarks = detectFaceLandmarks", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { TNetInput } from '../dom';\nimport { FaceExpressions } from '../faceExpressionNet/FaceExpressions';\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\nimport { extendWithFaceExpressions, WithFaceExpressions } from '../factories/WithFaceExpressions';\nimport { WithFaceLandmarks } from '../factories/WithFaceLandmarks';\nimport { ComposableTask } from './ComposableTask';\nimport { ComputeAllFaceDescriptorsTask, ComputeSingleFaceDescriptorTask } from './ComputeFaceDescriptorsTasks';\nimport { extractAllFacesAndComputeResults, extractSingleFaceAndComputeResult } from './extractFacesAndComputeResults';\nimport { nets } from './nets';\nimport {\n  PredictAllAgeAndGenderTask,\n  PredictAllAgeAndGenderWithFaceAlignmentTask,\n  PredictSingleAgeAndGenderTask,\n  PredictSingleAgeAndGenderWithFaceAlignmentTask,\n} from './PredictAgeAndGenderTask';\n\nexport class PredictFaceExpressionsTaskBase<TReturn, TParentReturn> extends ComposableTask<TReturn> {\n  constructor(\n    protected parentTask: ComposableTask<TParentReturn> | Promise<TParentReturn>,\n    protected input: TNetInput,\n    protected extractedFaces?: Array<HTMLCanvasElement | tf.Tensor3D>\n  ) {\n    super()\n  }\n}\n\nexport class PredictAllFaceExpressionsTask<\n  TSource extends WithFaceDetection<{}>\n> extends PredictFaceExpressionsTaskBase<WithFaceExpressions<TSource>[], TSource[]> {\n\n  public async run(): Promise<WithFaceExpressions<TSource>[]> {\n\n    const parentResults = await this.parentTask\n\n    const faceExpressionsByFace = await extractAllFacesAndComputeResults<TSource, FaceExpressions[]>(\n      parentResults,\n      this.input,\n      async faces => await Promise.all(faces.map(\n        face => nets.faceExpressionNet.predictExpressions(face) as Promise<FaceExpressions>\n      )),\n      this.extractedFaces\n    )\n\n    return parentResults.map(\n      (parentResult, i) => extendWithFaceExpressions<TSource>(parentResult, faceExpressionsByFace[i])\n    )\n  }\n\n  withAgeAndGender() {\n    return new PredictAllAgeAndGenderTask(this, this.input)\n  }\n}\n\nexport class PredictSingleFaceExpressionsTask<\n  TSource extends WithFaceDetection<{}>\n>  extends PredictFaceExpressionsTaskBase<WithFaceExpressions<TSource> | undefined, TSource | undefined> {\n\n  public async run(): Promise<WithFaceExpressions<TSource> | undefined> {\n\n    const parentResult = await this.parentTask\n    if (!parentResult) {\n      return\n    }\n\n    const faceExpressions = await extractSingleFaceAndComputeResult<TSource, FaceExpressions>(\n      parentResult,\n      this.input,\n      face => nets.faceExpressionNet.predictExpressions(face) as Promise<FaceExpressions>,\n      this.extractedFaces\n    )\n\n    return extendWithFaceExpressions(parentResult, faceExpressions)\n  }\n\n  withAgeAndGender() {\n    return new PredictSingleAgeAndGenderTask(this, this.input)\n  }\n}\n\nexport class PredictAllFaceExpressionsWithFaceAlignmentTask<\n  TSource extends WithFaceLandmarks<WithFaceDetection<{}>>\n> extends PredictAllFaceExpressionsTask<TSource> {\n\n  withAgeAndGender() {\n    return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input)\n  }\n\n  withFaceDescriptors() {\n    return new ComputeAllFaceDescriptorsTask(this, this.input)\n  }\n}\n\nexport class PredictSingleFaceExpressionsWithFaceAlignmentTask<\n  TSource extends WithFaceLandmarks<WithFaceDetection<{}>>\n> extends PredictSingleFaceExpressionsTask<TSource> {\n\n  withAgeAndGender() {\n    return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input)\n  }\n\n  withFaceDescriptor() {\n    return new ComputeSingleFaceDescriptorTask(this, this.input)\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { AgeAndGenderPrediction } from '../ageGenderNet/types';\nimport { TNetInput } from '../dom';\nimport { extendWithAge, WithAge } from '../factories/WithAge';\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\nimport { WithFaceLandmarks } from '../factories/WithFaceLandmarks';\nimport { extendWithGender, WithGender } from '../factories/WithGender';\nimport { ComposableTask } from './ComposableTask';\nimport { ComputeAllFaceDescriptorsTask, ComputeSingleFaceDescriptorTask } from './ComputeFaceDescriptorsTasks';\nimport { extractAllFacesAndComputeResults, extractSingleFaceAndComputeResult } from './extractFacesAndComputeResults';\nimport { nets } from './nets';\nimport {\n  PredictAllFaceExpressionsTask,\n  PredictAllFaceExpressionsWithFaceAlignmentTask,\n  PredictSingleFaceExpressionsTask,\n  PredictSingleFaceExpressionsWithFaceAlignmentTask,\n} from './PredictFaceExpressionsTask';\n\nexport class PredictAgeAndGenderTaskBase<TReturn, TParentReturn> extends ComposableTask<TReturn> {\n  constructor(\n    protected parentTask: ComposableTask<TParentReturn> | Promise<TParentReturn>,\n    protected input: TNetInput,\n    protected extractedFaces?: Array<HTMLCanvasElement | tf.Tensor3D>\n  ) {\n    super()\n  }\n}\n\nexport class PredictAllAgeAndGenderTask<\n  TSource extends WithFaceDetection<{}>\n> extends PredictAgeAndGenderTaskBase<WithAge<WithGender<TSource>>[], TSource[]> {\n\n  public async run(): Promise<WithAge<WithGender<TSource>>[]> {\n\n    const parentResults = await this.parentTask\n\n    const ageAndGenderByFace = await extractAllFacesAndComputeResults<TSource, AgeAndGenderPrediction[]>(\n      parentResults,\n      this.input,\n      async faces => await Promise.all(faces.map(\n        face => nets.ageGenderNet.predictAgeAndGender(face) as Promise<AgeAndGenderPrediction>\n      )),\n      this.extractedFaces\n    )\n\n    return parentResults.map((parentResult, i) => {\n      const { age, gender, genderProbability } = ageAndGenderByFace[i]\n      return extendWithAge(extendWithGender(parentResult, gender, genderProbability), age)\n    })\n  }\n\n  withFaceExpressions() {\n    return new PredictAllFaceExpressionsTask(this, this.input)\n  }\n}\n\nexport class PredictSingleAgeAndGenderTask<\n  TSource extends WithFaceDetection<{}>\n>  extends PredictAgeAndGenderTaskBase<WithAge<WithGender<TSource>> | undefined, TSource | undefined> {\n\n  public async run(): Promise<WithAge<WithGender<TSource>> | undefined> {\n\n    const parentResult = await this.parentTask\n    if (!parentResult) {\n      return\n    }\n\n    const { age, gender, genderProbability } = await extractSingleFaceAndComputeResult<TSource, AgeAndGenderPrediction>(\n      parentResult,\n      this.input,\n      face => nets.ageGenderNet.predictAgeAndGender(face) as Promise<AgeAndGenderPrediction>,\n      this.extractedFaces\n    )\n\n    return extendWithAge(extendWithGender(parentResult, gender, genderProbability), age)\n  }\n\n  withFaceExpressions() {\n    return new PredictSingleFaceExpressionsTask(this, this.input)\n  }\n}\n\nexport class PredictAllAgeAndGenderWithFaceAlignmentTask<\n  TSource extends WithFaceLandmarks<WithFaceDetection<{}>>\n> extends PredictAllAgeAndGenderTask<TSource> {\n\n  withFaceExpressions() {\n    return new PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input)\n  }\n\n  withFaceDescriptors() {\n    return new ComputeAllFaceDescriptorsTask(this, this.input)\n  }\n}\n\nexport class PredictSingleAgeAndGenderWithFaceAlignmentTask<\n  TSource extends WithFaceLandmarks<WithFaceDetection<{}>>\n> extends PredictSingleAgeAndGenderTask<TSource> {\n\n  withFaceExpressions() {\n    return new PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input)\n  }\n\n  withFaceDescriptor() {\n    return new ComputeSingleFaceDescriptorTask(this, this.input)\n  }\n}", "import { TNetInput } from '../dom';\nimport { extendWithFaceDescriptor, WithFaceDescriptor } from '../factories/WithFaceDescriptor';\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\nimport { WithFaceLandmarks } from '../factories/WithFaceLandmarks';\nimport { ComposableTask } from './ComposableTask';\nimport { extractAllFacesAndComputeResults, extractSingleFaceAndComputeResult } from './extractFacesAndComputeResults';\nimport { nets } from './nets';\nimport {\n  PredictAllAgeAndGenderWithFaceAlignmentTask,\n  PredictSingleAgeAndGenderWithFaceAlignmentTask,\n} from './PredictAgeAndGenderTask';\nimport {\n  PredictAllFaceExpressionsWithFaceAlignmentTask,\n  PredictSingleFaceExpressionsWithFaceAlignmentTask,\n} from './PredictFaceExpressionsTask';\n\nexport class ComputeFaceDescriptorsTaskBase<TReturn, TParentReturn> extends ComposableTask<TReturn> {\n  constructor(\n    protected parentTask: ComposableTask<TParentReturn> | Promise<TParentReturn>,\n    protected input: TNetInput\n  ) {\n    super()\n  }\n}\n\nexport class ComputeAllFaceDescriptorsTask<\n  TSource extends WithFaceLandmarks<WithFaceDetection<{}>>\n> extends ComputeFaceDescriptorsTaskBase<WithFaceDescriptor<TSource>[], TSource[]> {\n\n  public async run(): Promise<WithFaceDescriptor<TSource>[]> {\n\n    const parentResults = await this.parentTask\n\n    const descriptors = await extractAllFacesAndComputeResults<TSource, Float32Array[]>(\n      parentResults,\n      this.input,\n      faces => Promise.all(faces.map(face =>\n        nets.faceRecognitionNet.computeFaceDescriptor(face) as Promise<Float32Array>\n      )),\n      null,\n      parentResult => parentResult.landmarks.align(null, { useDlibAlignment: true })\n    )\n\n    return descriptors.map((descriptor, i) => extendWithFaceDescriptor<TSource>(parentResults[i], descriptor))\n  }\n\n  withFaceExpressions() {\n    return new PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input)\n  }\n\n  withAgeAndGender() {\n    return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input)\n  }\n}\n\nexport class ComputeSingleFaceDescriptorTask<\n  TSource extends WithFaceLandmarks<WithFaceDetection<{}>>\n> extends ComputeFaceDescriptorsTaskBase<WithFaceDescriptor<TSource> | undefined, TSource | undefined> {\n\n  public async run(): Promise<WithFaceDescriptor<TSource> | undefined> {\n\n    const parentResult = await this.parentTask\n    if (!parentResult) {\n      return\n    }\n    const descriptor = await extractSingleFaceAndComputeResult<TSource, Float32Array>(\n      parentResult,\n      this.input,\n      face => nets.faceRecognitionNet.computeFaceDescriptor(face) as Promise<Float32Array>,\n      null,\n      parentResult => parentResult.landmarks.align(null, { useDlibAlignment: true })\n    )\n\n    return extendWithFaceDescriptor(parentResult, descriptor)\n  }\n\n  withFaceExpressions() {\n    return new PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input)\n  }\n\n  withAgeAndGender() {\n    return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input)\n  }\n}", "import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n\nimport { FaceLandmarks68 } from '../classes/FaceLandmarks68';\nimport { extractFaces, extractFaceTensors, TNetInput } from '../dom';\nimport { FaceLandmark68Net } from '../faceLandmarkNet/FaceLandmark68Net';\nimport { FaceLandmark68TinyNet } from '../faceLandmarkNet/FaceLandmark68TinyNet';\nimport { WithFaceDetection } from '../factories/WithFaceDetection';\nimport { extendWithFaceLandmarks, WithFaceLandmarks } from '../factories/WithFaceLandmarks';\nimport { ComposableTask } from './ComposableTask';\nimport { ComputeAllFaceDescriptorsTask, ComputeSingleFaceDescriptorTask } from './ComputeFaceDescriptorsTasks';\nimport { nets } from './nets';\nimport {\n  PredictAllAgeAndGenderWithFaceAlignmentTask,\n  PredictSingleAgeAndGenderWithFaceAlignmentTask,\n} from './PredictAgeAndGenderTask';\nimport {\n  PredictAllFaceExpressionsWithFaceAlignmentTask,\n  PredictSingleFaceExpressionsWithFaceAlignmentTask,\n} from './PredictFaceExpressionsTask';\n\nexport class DetectFaceLandmarksTaskBase<TReturn, TParentReturn> extends ComposableTask<TReturn> {\n  constructor(\n    protected parentTask: ComposableTask<TParentReturn> | Promise<TParentReturn>,\n    protected input: TNetInput,\n    protected useTinyLandmarkNet: boolean\n  ) {\n    super()\n  }\n\n  protected get landmarkNet(): FaceLandmark68Net | FaceLandmark68TinyNet {\n    return this.useTinyLandmarkNet\n      ? nets.faceLandmark68TinyNet\n      : nets.faceLandmark68Net\n  }\n}\n\nexport class DetectAllFaceLandmarksTask<\n  TSource extends WithFaceDetection<{}>\n> extends DetectFaceLandmarksTaskBase<WithFaceLandmarks<TSource>[], TSource[]> {\n\n  public async run(): Promise<WithFaceLandmarks<TSource>[]> {\n\n    const parentResults = await this.parentTask\n    const detections = parentResults.map(res => res.detection)\n\n    const faces: Array<HTMLCanvasElement | tf.Tensor3D> = this.input instanceof tf.Tensor\n      ? await extractFaceTensors(this.input, detections)\n      : await extractFaces(this.input, detections)\n\n    const faceLandmarksByFace = await Promise.all(faces.map(\n      face => this.landmarkNet.detectLandmarks(face)\n    )) as FaceLandmarks68[]\n\n    faces.forEach(f => f instanceof tf.Tensor && f.dispose())\n\n    return parentResults.map((parentResult, i) =>\n      extendWithFaceLandmarks<TSource>(parentResult, faceLandmarksByFace[i])\n    )\n  }\n\n  withFaceExpressions() {\n    return new PredictAllFaceExpressionsWithFaceAlignmentTask(this, this.input)\n  }\n\n  withAgeAndGender() {\n    return new PredictAllAgeAndGenderWithFaceAlignmentTask(this, this.input)\n  }\n\n  withFaceDescriptors() {\n    return new ComputeAllFaceDescriptorsTask(this, this.input)\n  }\n}\n\nexport class DetectSingleFaceLandmarksTask<\n  TSource extends WithFaceDetection<{}>\n>  extends DetectFaceLandmarksTaskBase<WithFaceLandmarks<TSource> | undefined, TSource | undefined> {\n\n  public async run(): Promise<WithFaceLandmarks<TSource> | undefined> {\n\n    const parentResult = await this.parentTask\n    if (!parentResult) {\n      return\n    }\n\n    const { detection } = parentResult\n    const faces: Array<HTMLCanvasElement | tf.Tensor3D> = this.input instanceof tf.Tensor\n      ? await extractFaceTensors(this.input, [detection])\n      : await extractFaces(this.input, [detection])\n\n    const landmarks = await this.landmarkNet.detectLandmarks(faces[0]) as FaceLandmarks68\n\n    faces.forEach(f => f instanceof tf.Tensor && f.dispose())\n\n    return extendWithFaceLandmarks<TSource>(parentResult, landmarks)\n  }\n\n  withFaceExpressions() {\n    return new PredictSingleFaceExpressionsWithFaceAlignmentTask(this, this.input)\n  }\n\n  withAgeAndGender() {\n    return new PredictSingleAgeAndGenderWithFaceAlignmentTask(this, this.input)\n  }\n\n  withFaceDescriptor() {\n    return new ComputeSingleFaceDescriptorTask(this, this.input)\n  }\n}", "import { FaceDetection } from '../classes/FaceDetection';\nimport { TNetInput } from '../dom';\nimport { extendWithFaceDetection, WithFaceDetection } from '../factories/WithFaceDetection';\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1/SsdMobilenetv1Options';\nimport { TinyFaceDetectorOptions } from '../tinyFaceDetector/TinyFaceDetectorOptions';\nimport { TinyYolov2Options } from '../tinyYolov2';\nimport { ComposableTask } from './ComposableTask';\nimport { DetectAllFaceLandmarksTask, DetectSingleFaceLandmarksTask } from './DetectFaceLandmarksTasks';\nimport { nets } from './nets';\nimport { PredictAllAgeAndGenderTask, PredictSingleAgeAndGenderTask } from './PredictAgeAndGenderTask';\nimport { PredictAllFaceExpressionsTask, PredictSingleFaceExpressionsTask } from './PredictFaceExpressionsTask';\nimport { FaceDetectionOptions } from './types';\n\nexport class DetectFacesTaskBase<TReturn> extends ComposableTask<TReturn> {\n  constructor(\n    protected input: TNetInput,\n    protected options: FaceDetectionOptions = new SsdMobilenetv1Options()\n  ) {\n    super()\n  }\n}\n\nexport class DetectAllFacesTask extends DetectFacesTaskBase<FaceDetection[]> {\n\n  public async run(): Promise<FaceDetection[]> {\n\n    const { input, options } = this\n\n    const faceDetectionFunction = options instanceof TinyFaceDetectorOptions\n      ? (input: TNetInput) => nets.tinyFaceDetector.locateFaces(input, options)\n      : (\n        options instanceof SsdMobilenetv1Options\n          ? (input: TNetInput) => nets.ssdMobilenetv1.locateFaces(input, options)\n          : (\n            options instanceof TinyYolov2Options\n              ? (input: TNetInput) => nets.tinyYolov2.locateFaces(input, options)\n              : null\n          )\n      )\n\n    if (!faceDetectionFunction) {\n      throw new Error('detectFaces - expected options to be instance of TinyFaceDetectorOptions | SsdMobilenetv1Options | MtcnnOptions | TinyYolov2Options')\n    }\n\n    return faceDetectionFunction(input)\n  }\n\n  private runAndExtendWithFaceDetections(): Promise<WithFaceDetection<{}>[]> {\n    return new Promise<WithFaceDetection<{}>[]>(async res => {\n      const detections = await this.run()\n      return res(detections.map(detection => extendWithFaceDetection({}, detection)))\n    })\n  }\n\n  withFaceLandmarks(useTinyLandmarkNet: boolean = false) {\n    return new DetectAllFaceLandmarksTask(\n      this.runAndExtendWithFaceDetections(),\n      this.input,\n      useTinyLandmarkNet\n    )\n  }\n\n  withFaceExpressions() {\n    return new PredictAllFaceExpressionsTask (\n      this.runAndExtendWithFaceDetections(),\n      this.input\n    )\n  }\n\n  withAgeAndGender() {\n    return new PredictAllAgeAndGenderTask(\n      this.runAndExtendWithFaceDetections(),\n      this.input\n    )\n  }\n}\n\nexport class DetectSingleFaceTask extends DetectFacesTaskBase<FaceDetection | undefined> {\n\n  public async run(): Promise<FaceDetection | undefined> {\n    const faceDetections = await new DetectAllFacesTask(this.input, this.options);\n    let faceDetectionWithHighestScore = faceDetections[0];\n    faceDetections.forEach(faceDetection => {\n      if (faceDetection.score > faceDetectionWithHighestScore.score) {\n        faceDetectionWithHighestScore = faceDetection;\n      }\n    });\n    return faceDetectionWithHighestScore;\n  }\n\n  private runAndExtendWithFaceDetection(): Promise<WithFaceDetection<{}> | undefined> {\n    return new Promise<WithFaceDetection<{}> | undefined>(async res => {\n      const detection = await this.run()\n      return res(detection ? extendWithFaceDetection<{}>({}, detection) : undefined)\n    })\n  }\n\n  withFaceLandmarks(useTinyLandmarkNet: boolean = false) {\n    return new DetectSingleFaceLandmarksTask(\n      this.runAndExtendWithFaceDetection(),\n      this.input,\n      useTinyLandmarkNet\n    )\n  }\n\n  withFaceExpressions() {\n    return new PredictSingleFaceExpressionsTask(\n      this.runAndExtendWithFaceDetection(),\n      this.input\n    )\n  }\n\n  withAgeAndGender() {\n    return new PredictSingleAgeAndGenderTask(\n      this.runAndExtendWithFaceDetection(),\n      this.input\n    )\n  }\n}", "import { TNetInput } from '../dom';\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1/SsdMobilenetv1Options';\nimport { DetectAllFacesTask, DetectSingleFaceTask } from './DetectFacesTasks';\nimport { FaceDetectionOptions } from './types';\n\nexport function detectSingleFace(\n  input: TNetInput,\n  options: FaceDetectionOptions = new SsdMobilenetv1Options()\n): DetectSingleFaceTask {\n  return new DetectSingleFaceTask(input, options)\n}\n\nexport function detectAllFaces(\n  input: TNetInput,\n  options: FaceDetectionOptions = new SsdMobilenetv1Options()\n): DetectAllFacesTask {\n  return new DetectAllFacesTask(input, options)\n}", "import { TNetInput } from '../dom';\nimport { WithFaceDescriptor, WithFaceDetection, WithFaceLandmarks } from '../factories';\nimport { SsdMobilenetv1Options } from '../ssdMobilenetv1';\nimport { ITinyYolov2Options, TinyYolov2Options } from '../tinyYolov2';\nimport { detectAllFaces } from './detectFaces';\n\n// export allFaces API for backward compatibility\n\nexport async function allFacesSsdMobilenetv1(\n  input: TNetInput,\n  minConfidence?: number\n): Promise<WithFaceDescriptor<WithFaceLandmarks<WithFaceDetection<{}>>>[]> {\n  console.warn('allFacesSsdMobilenetv1 is deprecated and will be removed soon, use the high level api instead')\n  return await detectAllFaces(input, new SsdMobilenetv1Options(minConfidence ? { minConfidence } : {}))\n    .withFaceLandmarks()\n    .withFaceDescriptors()\n}\n\nexport async function allFacesTinyYolov2(\n  input: TNetInput,\n  forwardParams: ITinyYolov2Options = {}\n): Promise<WithFaceDescriptor<WithFaceLandmarks<WithFaceDetection<{}>>>[]> {\n  console.warn('allFacesTinyYolov2 is deprecated and will be removed soon, use the high level api instead')\n  return await detectAllFaces(input, new TinyYolov2Options(forwardParams))\n    .withFaceLandmarks()\n    .withFaceDescriptors()\n}\n\nexport const allFaces = allFacesSsdMobilenetv1\n", "export function euclideanDistance(arr1: number[] | Float32Array, arr2: number[] | Float32Array) {\n  if (arr1.length !== arr2.length)\n    throw new Error('euclideanDistance: arr1.length !== arr2.length')\n\n  const desc1 = Array.from(arr1)\n  const desc2 = Array.from(arr2)\n\n  return Math.sqrt(\n    desc1\n      .map((val, i) => val - desc2[i])\n      .reduce((res, diff) => res + Math.pow(diff, 2), 0)\n  )\n}", "import { FaceMatch } from '../classes/FaceMatch';\nimport { LabeledFaceDescriptors } from '../classes/LabeledFaceDescriptors';\nimport { euclideanDistance } from '../euclideanDistance';\nimport { WithFaceDescriptor } from '../factories';\n\nexport class FaceMatcher {\n\n  private _labeledDescriptors: LabeledFaceDescriptors[]\n  private _distanceThreshold: number\n\n  constructor(\n    inputs: LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array | Array<LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array>,\n    distanceThreshold: number = 0.6\n  ) {\n\n    this._distanceThreshold = distanceThreshold\n\n    const inputArray = Array.isArray(inputs) ? inputs : [inputs]\n\n    if (!inputArray.length) {\n      throw new Error(`FaceRecognizer.constructor - expected atleast one input`)\n    }\n\n    let count = 1\n    const createUniqueLabel = () => `person ${count++}`\n\n    this._labeledDescriptors = inputArray.map((desc) => {\n      if (desc instanceof LabeledFaceDescriptors) {\n        return desc\n      }\n\n      if (desc instanceof Float32Array) {\n        return new LabeledFaceDescriptors(createUniqueLabel(), [desc])\n      }\n\n      if (desc.descriptor && desc.descriptor instanceof Float32Array) {\n        return new LabeledFaceDescriptors(createUniqueLabel(), [desc.descriptor])\n      }\n\n      throw new Error(`FaceRecognizer.constructor - expected inputs to be of type LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array | Array<LabeledFaceDescriptors | WithFaceDescriptor<any> | Float32Array>`)\n    })\n  }\n\n  public get labeledDescriptors(): LabeledFaceDescriptors[] { return this._labeledDescriptors }\n  public get distanceThreshold(): number { return this._distanceThreshold }\n\n  public computeMeanDistance(queryDescriptor: Float32Array, descriptors: Float32Array[]): number {\n    return descriptors\n      .map(d => euclideanDistance(d, queryDescriptor))\n      .reduce((d1, d2) => d1 + d2, 0)\n        / (descriptors.length || 1)\n  }\n\n  public matchDescriptor(queryDescriptor: Float32Array): FaceMatch {\n    return this.labeledDescriptors\n      .map(({ descriptors, label }) => new FaceMatch(\n          label,\n          this.computeMeanDistance(queryDescriptor, descriptors)\n      ))\n      .reduce((best, curr) => best.distance < curr.distance ? best : curr)\n  }\n\n  public findBestMatch(queryDescriptor: Float32Array): FaceMatch {\n    const bestMatch = this.matchDescriptor(queryDescriptor)\n    return bestMatch.distance < this.distanceThreshold\n      ? bestMatch\n      : new FaceMatch('unknown', bestMatch.distance)\n  }\n\n  public toJSON(): any {\n    return {\n      distanceThreshold: this.distanceThreshold,\n      labeledDescriptors: this.labeledDescriptors.map((ld) => ld.toJSON())\n    };\n  }\n\n  public static fromJSON(json: any): FaceMatcher {\n    const labeledDescriptors = json.labeledDescriptors\n      .map((ld: any) => LabeledFaceDescriptors.fromJSON(ld));\n    return new FaceMatcher(labeledDescriptors, json.distanceThreshold);\n  }\n\n}", "import { TinyFaceDetector } from './TinyFaceDetector';\n\nexport * from './TinyFaceDetector';\nexport * from './TinyFaceDetectorOptions';\n\nexport function createTinyFaceDetector(weights: Float32Array) {\n  const net = new TinyFaceDetector()\n  net.extractWeights(weights)\n  return net\n}", "import { Dimensions, IDimensions } from './classes';\nimport { FaceDetection } from './classes/FaceDetection';\nimport { FaceLandmarks } from './classes/FaceLandmarks';\nimport { extendWithFaceDetection, isWithFaceDetection } from './factories/WithFaceDetection';\nimport { extendWithFaceLandmarks, isWithFaceLandmarks } from './factories/WithFaceLandmarks';\n\nexport function resizeResults<T>(results: T, dimensions: IDimensions): T {\n\n  const { width, height } = new Dimensions(dimensions.width, dimensions.height)\n\n  if (width <= 0 || height <= 0) {\n    throw new Error(`resizeResults - invalid dimensions: ${JSON.stringify({ width, height })}`)\n  }\n\n  if (Array.isArray(results)) {\n    // return results.map(obj => resizeResults(obj, { width, height })) as any as T\n    return (results as Array<any>).map(obj => resizeResults(obj, { width, height } as IDimensions)) as any as T\n  }\n\n  if (isWithFaceLandmarks(results)) {\n    const resizedDetection = results.detection.forSize(width, height)\n    const resizedLandmarks = results.unshiftedLandmarks.forSize(resizedDetection.box.width, resizedDetection.box.height)\n    return extendWithFaceLandmarks(extendWithFaceDetection(results, resizedDetection), resizedLandmarks)\n  }\n\n  if (isWithFaceDetection(results)) {\n    return extendWithFaceDetection(results, results.detection.forSize(width, height))\n  }\n\n  if (results instanceof FaceLandmarks || results instanceof FaceDetection) {\n    return (results as any).forSize(width, height)\n  }\n\n  return results\n}", "// import * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\nimport * as tf from '@tensorflow/tfjs/dist/tf.es2017.js';\n// const tf = require('@tensorflow/tfjs-core/dist/tf-core.es2017.js');\n// require('@tensorflow/tfjs-backend-cpu/dist/tf-backend-cpu.es2017.js');\n// require('@tensorflow/tfjs-backend-webgl/dist/tf-backend-webgl.es2017.js');\nimport * as draw from './draw';\nimport * as utils from './utils';\nexport { tf, draw, utils };\n\nexport * from './ageGenderNet/index';\nexport * from './classes/index';\nexport * from './dom/index'\nexport * from './env/index';\nexport * from './faceExpressionNet/index';\nexport * from './faceLandmarkNet/index';\nexport * from './faceRecognitionNet/index';\nexport * from './factories/index';\nexport * from './globalApi/index';\nexport * from './ops/index';\nexport * from './ssdMobilenetv1/index';\nexport * from './tinyFaceDetector/index';\nexport * from './tinyYolov2/index';\nexport * from './euclideanDistance';\nexport * from './NeuralNetwork';\nexport * from './resizeResults';\n\nimport * as pkg from '../package.json';\nconst node = (typeof process !== 'undefined');\nconst browser = (typeof navigator !== 'undefined') && (typeof navigator.userAgent !== 'undefined');\nexport const version = { faceapi: pkg.version, node, browser };\n\n// import { PlatformBrowser } from './Platform';\n// if (!tf.env().platform && tf.env().get('IS_BROWSER')) tf.env().setPlatform('browser', new PlatformBrowser);\n// tf.setBackend('cpu');\n\n// import {MathBackendCPU} from '@tensorflow/tfjs-backend-cpu/dist/backend_cpu.js';\n// export {MathBackendCPU};\n// tf.registerBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n"],
  "mappings": "mcAAA,6CAAO,cACL,MAAO,OAAO,SAAW,UACpB,IACA,MAAO,KAAW,aAGlB,MAAO,UAAY,aAAe,CAAC,CAAC,QAAQ,WCJ5C,WACL,EACA,EACA,EAAoB,IAUpB,GARA,EAAI,YAEJ,EAAO,MAAM,GAAG,QAAQ,CAAC,CAAE,IAAG,KAAK,KACjC,KAAM,GAAO,EAAO,GACpB,EAAI,OAAO,EAAK,EAAG,EAAK,GACxB,EAAI,OAAO,EAAG,KAGZ,GACF,KAAM,GAAO,EAAO,EAAO,OAAS,GAC9B,EAAK,EAAO,GAClB,GAAI,CAAC,GAAQ,CAAC,EACZ,OAGF,EAAI,OAAO,EAAK,EAAG,EAAK,GACxB,EAAI,OAAO,EAAG,EAAG,EAAG,GAGtB,EAAI,SC1BN,QAYE,YAAY,EAAe,GACzB,GAAI,CAAC,EAAc,IAAU,CAAC,EAAc,GAC1C,KAAM,IAAI,OAAM,wFAAwF,KAAK,UAAU,CAAE,QAAO,cAGlI,KAAK,OAAS,EACd,KAAK,QAAU,KAGN,SAAkB,MAAO,MAAK,UAC9B,UAAmB,MAAO,MAAK,QAEnC,UACL,MAAO,IAAI,GAAW,EAAI,KAAK,MAAO,EAAI,KAAK,SCzBnD,uVAKO,YAAkB,EAAa,GACpC,MAAO,aAAqB,KAAU,EAAO,MAAM,SAAW,EAGzD,YAAoB,GACzB,MAAO,IAAS,EAAQ,GAGnB,YAAoB,GACzB,MAAO,IAAS,EAAQ,GAGnB,WAAoB,GACzB,MAAO,IAAS,EAAQ,GAGnB,WAAoB,GACzB,MAAO,IAAS,EAAQ,GAGnB,YAAiB,GACtB,MAAO,GAAM,IAAM,EAGd,YAAgB,GACrB,MAAO,GAAM,IAAM,EAGd,YAAe,EAAa,EAAe,GAChD,KAAM,GAAI,KAAK,IAAI,GAAI,GACvB,MAAO,MAAK,MAAM,EAAM,GAAK,EAGxB,YAAsB,GAC3B,MAAO,IAAO,EAAI,OAAS,EAAI,OAG1B,YAAmC,CAAE,QAAO,UAAuB,GACxE,KAAM,GAAQ,EAAY,KAAK,IAAI,EAAQ,GAC3C,MAAO,IAAI,GAAW,KAAK,MAAM,EAAQ,GAAQ,KAAK,MAAM,EAAS,IAGhE,YAAwB,GAC7B,MAAO,GAAI,OAAO,CAAC,EAAK,IAAO,EAAI,IAAI,GAAK,GAAI,GAAM,EAAG,IACtD,IAAI,GAAI,GAAM,EAAI,OAAQ,EAAI,SAG5B,WAAe,EAAa,EAAe,GAChD,MAAO,OAAM,GAAK,KAAK,GAAG,IAAI,CAAC,EAAG,IAAM,EAAS,EAAI,GAGhD,WAAuB,GAC5B,MAAO,CAAC,CAAC,GAAO,IAAQ,UAAY,IAAQ,WAAa,CAAC,MAAM,IAAQ,IAAQ,EAG3E,YAA4B,GACjC,MAAO,GAAc,IAAQ,GAAK,GAAO,GAAO,EC7DlD,QASE,YAAY,EAAW,GACrB,KAAK,GAAK,EACV,KAAK,GAAK,KAGR,KAAc,MAAO,MAAK,MAC1B,KAAc,MAAO,MAAK,GAEvB,IAAI,GACT,MAAO,IAAI,GAAM,KAAK,EAAI,EAAG,EAAG,KAAK,EAAI,EAAG,GAGvC,IAAI,GACT,MAAO,IAAI,GAAM,KAAK,EAAI,EAAG,EAAG,KAAK,EAAI,EAAG,GAGvC,IAAI,GACT,MAAO,IAAI,GAAM,KAAK,EAAI,EAAG,EAAG,KAAK,EAAI,EAAG,GAGvC,IAAI,GACT,MAAO,IAAI,GAAM,KAAK,EAAI,EAAG,EAAG,KAAK,EAAI,EAAG,GAGvC,MACL,MAAO,IAAI,GAAM,KAAK,IAAI,KAAK,GAAI,KAAK,IAAI,KAAK,IAG5C,YACL,MAAO,MAAK,KAAK,KAAK,IAAI,KAAK,EAAG,GAAK,KAAK,IAAI,KAAK,EAAG,IAGnD,QACL,MAAO,IAAI,GAAM,KAAK,MAAM,KAAK,GAAI,KAAK,MAAM,KAAK,KC1CzD,cAQgB,QAAO,GACnB,MAAO,CAAC,CAAC,GAAQ,CAAC,EAAK,EAAG,EAAK,EAAG,EAAK,MAAO,EAAK,QAAQ,MAAM,SAGrD,kBAAiB,EAAU,EAAgB,EAAmC,IAC1F,GAAI,CAAC,EAAI,OAAO,GACd,KAAM,IAAI,OAAM,GAAG,oBAAyB,KAAK,UAAU,2DAG7D,GAAI,CAAC,GAA4B,GAAI,MAAQ,GAAK,EAAI,OAAS,GAC7D,KAAM,IAAI,OAAM,GAAG,cAAmB,EAAI,sBAAsB,EAAI,oCASxE,YAAY,EAA4B,EAAmC,IACzE,KAAM,GAAO,GAAQ,GAEf,EAAS,CAAC,EAAI,KAAM,EAAI,IAAK,EAAI,MAAO,EAAI,QAAQ,MAAM,GAC1D,EAAS,CAAC,EAAI,EAAG,EAAI,EAAG,EAAI,MAAO,EAAI,QAAQ,MAAM,GAE3D,GAAI,CAAC,GAAU,CAAC,EACd,KAAM,IAAI,OAAM,2EAA2E,KAAK,UAAU,MAG5G,KAAM,CAAC,EAAG,EAAG,EAAO,GAAU,EAC1B,CAAC,EAAI,EAAG,EAAI,EAAG,EAAI,MAAO,EAAI,QAC9B,CAAC,EAAI,KAAM,EAAI,IAAK,EAAI,MAAQ,EAAI,KAAM,EAAI,OAAS,EAAI,KAE/D,EAAI,iBAAiB,CAAE,IAAG,IAAG,QAAO,UAAU,kBAAmB,GAEjE,KAAK,GAAK,EACV,KAAK,GAAK,EACV,KAAK,OAAS,EACd,KAAK,QAAU,KAGN,KAAc,MAAO,MAAK,MAC1B,KAAc,MAAO,MAAK,MAC1B,SAAkB,MAAO,MAAK,UAC9B,UAAmB,MAAO,MAAK,WAC/B,QAAiB,MAAO,MAAK,KAC7B,OAAgB,MAAO,MAAK,KAC5B,SAAkB,MAAO,MAAK,EAAI,KAAK,SACvC,UAAmB,MAAO,MAAK,EAAI,KAAK,UACxC,QAAiB,MAAO,MAAK,MAAQ,KAAK,UAC1C,WAAmB,MAAO,IAAI,GAAM,KAAK,KAAM,KAAK,QACpD,YAAoB,MAAO,IAAI,GAAM,KAAK,MAAO,KAAK,QACtD,cAAsB,MAAO,IAAI,GAAM,KAAK,KAAM,KAAK,WACvD,eAAuB,MAAO,IAAI,GAAM,KAAK,MAAO,KAAK,QAE7D,QACL,KAAM,CAAC,EAAG,EAAG,EAAO,GAAU,CAAC,KAAK,EAAG,KAAK,EAAG,KAAK,MAAO,KAAK,QAC7D,IAAI,GAAO,KAAK,MAAM,IACzB,MAAO,IAAI,GAAI,CAAE,IAAG,IAAG,QAAO,WAGzB,QACL,KAAM,CAAC,EAAG,EAAG,EAAO,GAAU,CAAC,KAAK,EAAG,KAAK,EAAG,KAAK,MAAO,KAAK,QAC7D,IAAI,GAAO,KAAK,MAAM,IACzB,MAAO,IAAI,GAAI,CAAE,IAAG,IAAG,QAAO,WAGzB,WACL,GAAI,CAAE,IAAG,IAAG,QAAO,UAAW,KAC9B,KAAM,GAAO,KAAK,IAAI,EAAQ,GAC9B,MAAI,GAAQ,GACV,IAAM,EAAO,EACb,GAAS,GAEX,AAAI,EAAS,GACX,IAAM,EAAO,EACb,GAAU,GAGL,GAAI,GAAI,CAAE,IAAG,IAAG,QAAO,WAGzB,QAAQ,GACb,KAAM,GAAS,GAAa,GAAM,EAAkB,MAAQ,EACtD,EAAS,GAAa,GAAM,EAAkB,OAAS,EAC7D,MAAO,IAAI,GAAI,CACb,EAAG,KAAK,EAAI,EACZ,EAAG,KAAK,EAAI,EACZ,MAAO,KAAK,MAAQ,EACpB,OAAQ,KAAK,OAAS,IAInB,IAAI,EAAc,GACvB,GAAI,CAAC,EAAG,EAAG,EAAO,GAAU,CAC1B,KAAK,EAAK,EAAO,EACjB,KAAK,EAAK,EAAO,EACjB,KAAK,MAAQ,EACb,KAAK,OAAS,GAEhB,MAAO,IAAI,GAAI,CAAE,IAAG,IAAG,QAAO,WAGzB,mBAAmB,EAAkB,GAC1C,KAAM,CAAE,IAAG,IAAG,QAAO,UAAW,KAC1B,EAAW,KAAK,IAAI,EAAG,GACvB,EAAW,KAAK,IAAI,EAAG,GAEvB,EAAW,EAAQ,EACnB,EAAY,EAAS,EACrB,EAAe,KAAK,IAAI,EAAU,EAAW,GAC7C,EAAgB,KAAK,IAAI,EAAW,EAAY,GAEtD,MAAQ,IAAI,GAAI,CAAE,EAAG,EAAU,EAAG,EAAU,MAAO,EAAc,OAAQ,IAAiB,QAGrF,MAAM,EAAY,GACvB,KAAM,CAAE,QAAO,UAAW,KACpB,EAAI,KAAK,EAAI,EACb,EAAI,KAAK,EAAI,EAEnB,MAAO,IAAI,GAAI,CAAE,IAAG,IAAG,QAAO,WAGzB,aAAa,EAAqB,GACvC,KAAM,GAAI,KAAK,MAAQ,EACjB,EAAI,KAAK,OAAS,EAExB,GAAI,GAAK,EACL,EAAK,EACL,EAAM,EACN,EAAM,EAEN,EAAI,KAAK,KACT,EAAI,KAAK,IACT,EAAK,KAAK,MACV,EAAK,KAAK,OAEd,MAAI,GAAK,GACP,GAAM,CAAC,EAAK,EAAa,EACzB,EAAK,GAEP,AAAI,EAAK,GACP,GAAM,CAAC,EAAK,EAAc,EAC1B,EAAK,GAEP,AAAI,EAAI,GACN,GAAM,EAAI,EACV,EAAI,GAEN,AAAI,EAAI,GACN,GAAM,EAAI,EACV,EAAI,GAGC,CAAE,KAAI,MAAK,KAAI,MAAK,IAAG,KAAI,IAAG,KAAI,IAAG,KAGvC,UAAU,GACf,MAAO,IAAI,GAAI,CACb,KAAM,KAAK,KAAQ,EAAO,KAAO,KAAK,MACtC,IAAK,KAAK,IAAO,EAAO,IAAM,KAAK,OACnC,MAAO,KAAK,MAAS,EAAO,MAAQ,KAAK,MACzC,OAAQ,KAAK,OAAU,EAAO,OAAS,KAAK,SAC3C,WAAW,SC5KlB,gBASiC,GAC/B,YAAY,EAAc,EAAa,EAAe,EAAgB,EAAmC,IACvG,MAAM,CAAE,OAAM,MAAK,QAAO,UAAU,ICXxC,SAWE,YACE,EACA,EACA,EACA,EACA,GAEA,KAAK,WAAa,GAAI,GAAW,EAAU,MAAO,EAAU,QAC5D,KAAK,OAAS,EACd,KAAK,YAAc,EACnB,KAAK,WAAa,EAClB,KAAK,KAAO,GAAI,GAAI,GAAa,QAAQ,KAAK,eAGrC,SAAkB,MAAO,MAAK,UAC9B,cAAuB,MAAO,MAAK,eACnC,aAAsB,MAAO,MAAK,cAClC,OAAa,MAAO,MAAK,QACzB,aAA0B,MAAO,MAAK,cACtC,cAAuB,MAAO,MAAK,UAAU,SAC7C,eAAwB,MAAO,MAAK,UAAU,UAC9C,eAAqB,MAAO,IAAI,GAAI,KAAK,MAAM,QAAQ,KAAK,UAAU,WAE1E,QAAQ,EAAe,GAC5B,MAAO,IAAI,IACT,KAAK,MACL,KAAK,WACL,KAAK,UACL,KAAK,YACL,CAAE,QAAO,YCxCf,eAUmC,IACjC,YACE,EACA,EACA,GAEA,MAAM,EAAO,EAAO,GAAI,EAAa,GAGhC,QAAQ,EAAe,GAC5B,KAAM,CAAE,QAAO,cAAa,aAAc,MAAM,QAAQ,EAAO,GAC/D,MAAO,IAAI,GAAc,EAAO,EAAa,ICnB1C,YAAa,EAAW,EAAW,EAAiB,IACzD,KAAM,GAAQ,KAAK,IAAI,EAAK,KAAK,IAAI,EAAK,MAAO,EAAK,OAAS,KAAK,IAAI,EAAK,KAAM,EAAK,OAClF,EAAS,KAAK,IAAI,EAAK,KAAK,IAAI,EAAK,OAAQ,EAAK,QAAU,KAAK,IAAI,EAAK,IAAK,EAAK,MACpF,EAAe,EAAQ,EAE7B,MAAO,GACH,EAAgB,GAAK,KAAO,EAAK,KAAO,GACxC,EAAe,KAAK,IAAI,EAAK,KAAM,EAAK,MCPvC,YAAiB,GACtB,KAAM,GAAK,EAAI,IAAI,GAAM,EAAG,GACtB,EAAK,EAAI,IAAI,GAAM,EAAG,GACtB,EAAO,EAAG,OAAO,CAAC,EAAK,IAAM,EAAI,EAAM,EAAI,EAAK,UAChD,EAAO,EAAG,OAAO,CAAC,EAAK,IAAM,EAAI,EAAM,EAAI,EAAK,UAChD,EAAO,EAAG,OAAO,CAAC,EAAK,IAAM,EAAM,EAAI,EAAI,EAAK,GAChD,EAAO,EAAG,OAAO,CAAC,EAAK,IAAM,EAAM,EAAI,EAAI,EAAK,GAEtD,MAAO,IAAI,IAAY,EAAM,EAAM,EAAM,GCPpC,YACL,EACA,EACA,EACA,EAAiB,IAGjB,GAAI,GAAuB,EACxB,IAAI,CAAC,EAAO,IAAc,EAAE,QAAO,cACnC,KAAK,CAAC,EAAI,IAAO,EAAG,MAAQ,EAAG,OAC/B,IAAI,GAAK,EAAE,UAEd,KAAM,GAAiB,GAEvB,KAAM,EAAqB,OAAS,IAClC,KAAM,GAAO,EAAqB,MAClC,EAAK,KAAK,GAEV,KAAM,GAAU,EAEV,EAAoB,GAC1B,OAAS,GAAI,EAAG,EAAI,EAAQ,OAAQ,KAClC,KAAM,GAAM,EAAQ,GAEd,EAAU,EAAM,GAChB,EAAS,EAAM,GAErB,EAAQ,KAAK,GAAI,EAAS,EAAQ,IAGpC,EAAuB,EAAqB,OAC1C,CAAC,EAAG,IAAM,EAAQ,IAAM,GAI5B,MAAO,GCtCT,6FAEO,WAAmB,EAAgB,GACxC,MAAO,AAAG,IAAK,KACb,KAAM,CAAC,EAAG,EAAG,GAAK,EACZ,EAAQ,AAAG,GAAK,CAAC,GAAG,EAAE,MAAM,MAAM,EAAG,GAAI,GAAI,GAC7C,EAAQ,AAAG,GAAK,CAAC,GAAG,EAAE,MAAM,MAAM,EAAG,GAAI,GAAI,GAC7C,EAAQ,AAAG,GAAK,CAAC,GAAG,EAAE,MAAM,MAAM,EAAG,GAAI,GAAI,GAC7C,EAAU,AAAG,GAAO,CAAC,EAAO,EAAO,GAAQ,GAEjD,MAAO,AAAG,IAAI,EAAG,KCVrB,8FAUO,YACL,EACA,EAAyB,IAEzB,MAAO,AAAG,IAAK,KAEb,KAAM,CAAC,EAAQ,GAAS,EAAU,MAAM,MAAM,GAC9C,GAAI,IAAW,EACb,MAAO,GAGT,KAAM,GAAU,KAAK,IAAI,EAAS,GAC5B,EAAgB,KAAK,MAAM,EAAW,GAAgB,GAAM,IAC5D,EAAc,EAAS,EAAQ,EAAI,EAEnC,EAAsB,AAAC,IAC3B,KAAM,GAAqB,EAAU,MAAM,QAC3C,SAAmB,GAAe,EAC3B,AAAG,GAAK,EAAoB,IAG/B,EAAsB,EAAoB,GAC1C,EAAyB,EAAW,EAAoB,MAAM,GAE9D,EAAuB,GAAiB,EAC1C,EAAoB,GACpB,KAEE,EAAiB,CACrB,EACA,EACA,GAEC,OAAO,GAAK,CAAC,CAAC,GAEd,IAAI,AAAC,GAAiB,AAAG,GAAK,EAAG,YACpC,MAAO,AAAG,IAAO,EAAgB,KC9C9B,YAAsB,GAC3B,KAAM,GAAQ,EAAW,QACzB,OAAS,GAAI,EAAM,OAAS,EAAG,EAAI,EAAG,KAClC,KAAM,GAAI,KAAK,MAAM,KAAK,SAAY,GAAI,IACpC,EAAI,EAAM,GAChB,EAAM,GAAK,EAAM,GACjB,EAAM,GAAK,EAEf,MAAO,GCDF,YAAiB,GACtB,MAAO,GAAK,GAAI,KAAK,IAAI,CAAC,IAGrB,YAAwB,GAC7B,MAAO,MAAK,IAAI,EAAK,GAAI,ICZ3B,gBAS0B,GACxB,YAAY,EAAW,EAAW,EAAe,EAAgB,EAAmC,IAClG,MAAM,CAAE,IAAG,IAAG,QAAO,UAAU,ICDnC,KAAM,IAAO,GACP,GAAO,IACP,GAAW,IAZjB,QAwBE,YACE,EACA,EACA,EAAe,GAAI,GAAM,EAAG,IAE5B,KAAM,CAAE,QAAO,UAAW,EAC1B,KAAK,SAAW,GAAI,GAAW,EAAO,GACtC,KAAK,OAAS,EACd,KAAK,WAAa,EAA8B,IAC9C,GAAM,EAAG,IAAI,GAAI,GAAM,EAAO,IAAS,IAAI,OAIpC,SAAiB,MAAO,IAAI,GAAM,KAAK,OAAO,EAAG,KAAK,OAAO,MAC7D,cAAuB,MAAO,MAAK,SAAS,SAC5C,eAAwB,MAAO,MAAK,SAAS,UAC7C,aAAuB,MAAO,MAAK,cACnC,qBACT,MAAO,MAAK,WAAW,IACrB,GAAM,EAAG,IAAI,KAAK,QAAQ,IAAI,GAAI,GAAM,KAAK,WAAY,KAAK,eAI3D,QAAiC,EAAe,GACrD,MAAO,IAAK,MAAK,YACf,KAAK,kBACL,CAAE,QAAO,WAIN,QAAiC,EAAW,GACjD,MAAO,IAAK,MAAK,YACf,KAAK,kBACL,KAAK,SACL,GAAI,GAAM,EAAG,IAIV,aAAsC,GAC3C,MAAO,MAAK,QAAQ,EAAG,EAAG,EAAG,GAcxB,MACL,EACA,EAAkE,IAElE,GAAI,GACF,KAAM,GAAM,YAAqB,GAC7B,EAAU,IAAI,QACd,GAAI,GAAI,GAEZ,MAAO,MAAK,QAAQ,EAAI,EAAG,EAAI,GAAG,MAAM,KAAM,GAGhD,KAAM,CAAE,mBAAkB,iBAAkB,OAAO,OAAO,GAAI,CAAE,iBAAkB,GAAO,cAAe,IAAO,GAE/G,MAAI,GACK,KAAK,YAGP,KAAK,aAAa,GAGnB,YAEN,KAAM,GAAU,KAAK,2BAEf,CAAC,EAAe,EAAgB,GAAe,EAC/C,EAAc,AAAC,GAAc,EAAY,IAAI,GAAI,YACjD,EAAkB,GAAY,GAAiB,EAAY,IAAmB,EAE9E,EAAO,KAAK,MAAM,EAAiB,IAEnC,EAAW,GAAe,GAE1B,EAAI,KAAK,MAAM,KAAK,IAAI,EAAG,EAAS,EAAK,GAAO,IAChD,EAAI,KAAK,MAAM,KAAK,IAAI,EAAG,EAAS,EAAK,GAAO,IAEtD,MAAO,IAAI,IAAK,EAAG,EAAG,KAAK,IAAI,EAAM,KAAK,WAAa,GAAI,KAAK,IAAI,EAAM,KAAK,YAAc,IAGvF,aAAa,GACnB,KAAM,GAAM,GAAQ,KAAK,WACzB,MAAO,GAAI,IAAI,EAAI,MAAQ,EAAS,EAAI,OAAS,GAGzC,2BACR,KAAM,IAAI,OAAM,2DC1HpB,gBAKoC,GAExB,2BACR,KAAM,GAAM,KAAK,UACjB,MAAO,CACL,EAAI,GACJ,EAAI,GACJ,GAAe,CAAC,EAAI,GAAI,EAAI,OCZlC,gBAIqC,GAC5B,gBACL,MAAO,MAAK,UAAU,MAAM,EAAG,IAG1B,iBACL,MAAO,MAAK,UAAU,MAAM,GAAI,IAG3B,kBACL,MAAO,MAAK,UAAU,MAAM,GAAI,IAG3B,UACL,MAAO,MAAK,UAAU,MAAM,GAAI,IAG3B,aACL,MAAO,MAAK,UAAU,MAAM,GAAI,IAG3B,cACL,MAAO,MAAK,UAAU,MAAM,GAAI,IAG3B,WACL,MAAO,MAAK,UAAU,MAAM,GAAI,IAGxB,2BACR,MAAO,CACL,KAAK,aACL,KAAK,cACL,KAAK,YACL,IAAI,KCtCV,SAWE,YAAY,EAAe,GACzB,KAAK,OAAS,EACd,KAAK,UAAY,KAGR,SAAkB,MAAO,MAAK,UAC9B,YAAqB,MAAO,MAAK,UAErC,SAAS,EAAwB,IACtC,MAAO,GAAG,KAAK,QAAQ,EAAe,KAAK,GAAM,KAAK,aAAe,MCpBzE,gBAKgC,SAEhB,yBAAwB,EAAU,GAG9C,GAFA,EAAI,iBAAiB,EAAK,GAEtB,CAAC,EAAc,EAAI,OACrB,KAAM,IAAI,OAAM,GAAG,gCAAqC,EAAI,yBAMhE,YAAY,EAAiC,GAC3C,MAAM,GACN,KAAK,OAAS,KAGL,SAAkB,MAAO,MAAK,QCtB3C,SAIE,YAAY,EAAe,GACzB,GAAI,CAAE,OAAO,IAAU,UACrB,KAAM,IAAI,OAAM,sEAGlB,GAAI,CAAC,MAAM,QAAQ,IAAgB,EAAY,KAAK,GAAQ,CAAE,aAAgB,gBAC5E,KAAM,IAAI,OAAM,4FAGlB,KAAK,OAAS,EACd,KAAK,aAAe,KAGX,SAAkB,MAAO,MAAK,UAC9B,eAAgC,MAAO,MAAK,aAEhD,SACL,MAAO,CACL,MAAO,KAAK,MACZ,YAAa,KAAK,YAAY,IAAI,AAAC,GAAM,MAAM,KAAK,WAI1C,UAAS,GACrB,KAAM,GAAc,EAAK,YAAY,IAAI,AAAC,GACjC,GAAI,cAAa,IAE1B,MAAO,IAAI,IAAuB,EAAK,MAAO,IC/BlD,gBAKkC,UAElB,2BAA0B,EAAU,GAGhD,GAFA,GAAW,wBAAwB,EAAK,GAGtC,CAAC,GAAmB,EAAI,QACrB,CAAC,GAAmB,EAAI,YAE3B,KAAM,IAAI,OAAM,GAAG,kCAAuC,EAAI,eAAe,EAAI,6CAOrF,YAAY,EAAiC,EAAe,EAAe,GACzE,MAAM,EAAK,GACX,KAAK,OAAS,EACd,KAAK,YAAc,KAGV,SAAkB,MAAO,MAAK,UAC9B,cAAuB,MAAO,MAAK,aCtBzC,WAA6B,GAClC,MAAO,GAAI,oBAAwB,GAG9B,YAGL,EACA,GAGA,KAAM,GAAY,CAAE,aACpB,MAAO,QAAO,OAAO,GAAI,EAAW,GChB/B,cAEL,KAAM,GAAQ,OAAO,OAAY,WAC/B,KAAM,IAAI,OAAM,iEAGZ,EAAW,WACf,KAAM,IAAI,OAAM,gEAGlB,MAAO,CACL,OAAQ,kBACR,yBACA,MAAO,iBACP,UACA,MAAO,iBACP,oBAAqB,IAAM,SAAS,cAAc,UAClD,mBAAoB,IAAM,SAAS,cAAc,OACjD,QACA,YCnBG,YAA0B,GAE/B,GAAI,GAAiB,GAErB,GAAI,CAAC,EACH,IACE,EAAK,oBACE,GACP,EAAiB,EAAI,WAIzB,KAAM,GAAW,EACb,SAAS,GACT,MAAO,IAAI,SAAgB,CAAC,EAAK,KAC/B,EAAG,SAAS,EAAU,SAAS,EAAU,GACvC,MAAO,GAAM,EAAI,GAAO,EAAI,QAIhC,WACA,KAAM,IAAI,OAAM,qEAAqE,MAGzF,MAAO,CACL,YCxBG,cAEL,KAAM,GAAS,OAAO,QAAa,OAAO,kBACpC,EAAQ,OAAO,OAAY,OAAO,iBAElC,EAAsB,WAC1B,GAAI,EACF,MAAO,IAAI,GAEb,KAAM,IAAI,OAAM,+EAGZ,EAAqB,WACzB,GAAI,EACF,MAAO,IAAI,GAEb,KAAM,IAAI,OAAM,6EAGZ,EAAQ,OAAO,OAAY,WAC/B,KAAM,IAAI,OAAM,gEAGZ,EAAa,KAEnB,MAAO,CACL,OAAQ,GAAU,QAClB,yBAA0B,OAAO,0BAA+B,QAChE,MAAO,GAAS,QAChB,UAAW,OAAO,WAAgB,QAClC,MAAO,OAAO,kBAAuB,QACrC,sBACA,qBACA,WACG,GCrCA,cACL,MAAO,OAAO,SAAW,UACpB,MAAO,WAAa,aACpB,MAAO,mBAAqB,aAC5B,MAAO,oBAAsB,aAC7B,MAAO,mBAAqB,aAC5B,MAAO,YAAc,aACrB,MAAO,2BAA6B,YCH3C,SAAyB,SAGzB,GAAI,GAEJ,cACE,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,yEAElB,MAAO,GAGT,YAAgB,GACd,EAAc,EAGhB,cAGE,GAAI,KACF,MAAO,IAAO,MAEhB,GAAI,cACF,MAAO,IAAO,MAIlB,YAAqB,GAKnB,GAJA,AAAK,GACH,KAGE,CAAC,EACH,KAAM,IAAI,OAAM,8EAGlB,KAAM,CAAE,SAAS,EAAY,OAAQ,QAAQ,EAAY,OAAU,EACnE,EAAY,OAAS,EACrB,EAAY,MAAQ,EACpB,EAAY,oBAAsB,EAAI,qBAAwB,KAAM,GAAI,IACxE,EAAY,mBAAqB,EAAI,oBAAuB,KAAM,GAAI,IAEtE,EAAY,UAAY,EAAI,WAAa,EAAY,UACrD,EAAY,MAAQ,EAAI,OAAS,EAAY,MAC7C,EAAY,MAAQ,EAAI,OAAS,EAAY,MAC7C,EAAY,SAAW,EAAI,UAAY,EAAY,SAG9C,KAAM,GAAM,CACjB,UACA,UACA,cACA,oBACA,oBACA,mBACA,eACA,aACA,sBAGF,KC9DO,YAAsB,GAC3B,MAAI,CAAC,EAAI,YAAc,MAAO,IAAQ,SAC7B,SAAS,eAAe,GAE1B,ECHF,WAA6B,GAElC,KAAM,CAAE,SAAQ,4BAA6B,EAAI,SAEjD,GAAI,YAAqB,GACvB,MAAO,GAGT,KAAM,GAAS,GAAa,GAE5B,GAAI,CAAE,aAAkB,IACtB,KAAM,IAAI,OAAM,kEAGlB,KAAM,GAAM,EAAO,WAAW,MAC9B,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,gDAGlB,MAAO,GClBF,GAAK,GAAL,UAAK,GACV,WAAW,WACX,YAAY,YACZ,cAAc,cACd,eAAe,iBAJL,WAJZ,SA4BE,YAAY,EAAiC,IAC3C,KAAM,CAAE,iBAAgB,kBAAiB,YAAW,WAAU,YAAW,WAAY,EACrF,KAAK,eAAiB,GAAkB,EAAe,SACvD,KAAK,gBAAkB,GAAmB,qBAC1C,KAAK,UAAY,GAAa,yBAC9B,KAAK,SAAW,GAAY,GAC5B,KAAK,UAAY,GAAa,UAC9B,KAAK,QAAU,GAAW,GAnC9B,SA4CE,YACE,EACA,EACA,EAAiC,IAEjC,KAAK,KAAO,MAAO,IAAS,SACxB,CAAC,GACA,YAAgB,IAAgB,EAAK,KAAO,EACjD,KAAK,OAAS,EACd,KAAK,QAAU,GAAI,IAAqB,GAG1C,aAAa,GACX,KAAM,CAAE,WAAY,KAAK,QACzB,MAAO,MAAK,KAAK,IAAI,GAAK,EAAI,YAAY,GAAG,OAAO,OAAO,CAAC,EAAI,IAAO,EAAK,EAAK,EAAK,EAAI,GAAM,EAAI,EAGtG,gBACE,KAAM,CAAE,WAAU,WAAY,KAAK,QACnC,MAAO,MAAK,KAAK,OAAS,EAAY,EAAI,EAG5C,aAAa,EAA+B,GAC1C,KAAM,CAAE,kBAAmB,KAAK,QAC1B,EAAc,IAAmB,EAAe,cAAgB,IAAmB,EAAe,UAClG,EAAa,IAAmB,EAAe,aAAe,IAAmB,EAAe,aAEhG,EAAiB,KAAK,aAAa,GACnC,EAAkB,KAAK,gBACvB,EAAK,EAAc,KAAK,OAAO,EAAI,EAAiB,KAAK,OAAO,EAChE,EAAI,EAAa,KAAK,OAAO,EAAI,EAAkB,KAAK,OAAO,EAGrE,GAAI,GACF,KAAM,CAAE,QAAO,UAAW,EACpB,EAAO,KAAK,IAAI,KAAK,IAAI,EAAG,EAAQ,GAAiB,GACrD,EAAO,KAAK,IAAI,KAAK,IAAI,EAAG,EAAS,GAAkB,GAC7D,MAAO,CAAE,EAAG,EAAM,EAAG,GAEvB,MAAO,CAAE,IAAG,KAGd,KAAK,GACH,KAAM,GAAS,GAAa,GACtB,EAAM,EAAoB,GAE1B,CAAE,kBAAiB,YAAW,WAAU,YAAW,WAAY,KAAK,QAE1E,EAAI,KAAO,GAAG,OAAc,IAC5B,KAAM,GAAe,KAAK,aAAa,GACjC,EAAa,KAAK,gBAExB,EAAI,UAAY,EAChB,KAAM,GAAY,KAAK,aAAa,EAAK,GACzC,EAAI,SAAS,EAAU,EAAG,EAAU,EAAG,EAAc,GAErD,EAAI,UAAY,EAChB,KAAK,KAAK,QAAQ,CAAC,EAAU,KAC3B,KAAM,GAAI,EAAU,EAAU,EACxB,EAAI,EAAU,EAAU,EAAM,GAAI,GAAK,EAC7C,EAAI,SAAS,EAAU,EAAG,MCxGhC,SAiBE,YAAY,EAA2B,IACrC,KAAM,CAAE,WAAU,YAAW,QAAO,oBAAqB,EACzD,KAAK,SAAW,GAAY,qBAC5B,KAAK,UAAY,GAAa,EAC9B,KAAK,MAAQ,EAEb,KAAM,GAA0B,CAC9B,eAAgB,EAAe,YAC/B,gBAAiB,KAAK,UAExB,KAAK,iBAAmB,GAAI,IAAqB,OAAO,OAAO,GAAI,EAAyB,KA3BhG,SAmCE,YACE,EACA,EAA2B,IAE3B,KAAK,IAAM,GAAI,GAAI,GACnB,KAAK,QAAU,GAAI,IAAe,GAGpC,KAAK,GACH,KAAM,GAAM,EAAoB,GAE1B,CAAE,WAAU,aAAc,KAAK,QAE/B,CAAE,IAAG,IAAG,QAAO,UAAW,KAAK,IACrC,EAAI,YAAc,EAClB,EAAI,UAAY,EAChB,EAAI,WAAW,EAAG,EAAG,EAAO,GAE5B,KAAM,CAAE,SAAU,KAAK,QACvB,AAAI,GACF,GAAI,IAAc,CAAC,GAAQ,CAAE,EAAG,EAAK,EAAY,EAAI,KAAK,KAAK,QAAQ,kBAAkB,KAAK,IC/C7F,YACL,EACA,GAEA,KAAM,GAAkB,MAAM,QAAQ,GAAc,EAAa,CAAC,GAElE,EAAgB,QAAQ,IACtB,KAAM,GAAQ,YAAe,GACzB,EAAI,MACH,EAAoB,GAAO,EAAI,UAAU,MAAQ,OAEhD,EAAM,YAAe,GACvB,EAAI,IACH,EAAoB,GAAO,EAAI,UAAU,IAAM,GAAI,GAAI,GAEtD,EAAQ,EAAQ,GAAG,GAAM,KAAW,OAC1C,GAAI,IAAQ,EAAK,CAAE,UAAS,KAAK,KCtB9B,YAAuB,GAE5B,KAAM,CAAE,QAAO,SAAU,EAAI,SAE7B,MAAQ,aAAiB,IAAS,EAAM,UAClC,YAAiB,IAAS,EAAM,YAAc,ECJ/C,YAA0B,GAE/B,MAAO,IAAI,SAAQ,CAAC,EAAS,KAC3B,GAAI,YAAiB,GAAI,SAAS,QAAU,GAAc,GACxD,MAAO,GAAQ,MAGjB,WAAgB,GACd,GAAI,CAAC,EAAE,cAAe,OACtB,EAAE,cAAc,oBAAoB,OAAQ,GAC5C,EAAE,cAAc,oBAAoB,QAAS,GAC7C,EAAQ,GAGV,WAAiB,GACf,GAAI,CAAC,EAAE,cAAe,OACtB,EAAE,cAAc,oBAAoB,OAAQ,GAC5C,EAAE,cAAc,oBAAoB,QAAS,GAC7C,EAAO,GAGT,EAAM,iBAAiB,OAAQ,GAC/B,EAAM,iBAAiB,QAAS,KCvB7B,YAAuB,GAC5B,MAAO,IAAI,SAAQ,CAAC,EAAS,KAC3B,GAAI,CAAE,aAAe,OACnB,MAAO,GAAO,oDAGhB,KAAM,GAAS,GAAI,YACnB,EAAO,OAAS,KACd,GAAI,MAAO,GAAO,QAAW,SAC3B,MAAO,GAAO,oEAGhB,KAAM,GAAM,EAAI,SAAS,qBACzB,EAAI,OAAS,IAAM,EAAQ,GAC3B,EAAI,QAAU,EACd,EAAI,IAAM,EAAO,QAEnB,EAAO,QAAU,EACjB,EAAO,cAAc,KCjBlB,YAA4B,GAEjC,KAAM,CAAE,QAAO,SAAU,EAAI,SAE7B,MAAI,aAAiB,GACZ,GAAI,GAAW,EAAM,aAAc,EAAM,eAE9C,YAAiB,GACZ,GAAI,GAAW,EAAM,WAAY,EAAM,aAEzC,GAAI,GAAW,EAAM,MAAO,EAAM,QCPpC,YAAsB,CAAE,QAAO,WAEpC,KAAM,CAAE,uBAAwB,EAAI,SAC9B,EAAS,IACf,SAAO,MAAQ,EACf,EAAO,OAAS,EACT,EAGF,YAA+B,EAAwD,GAE5F,KAAM,CAAE,aAAc,EAAI,SAE1B,GAAI,CAAE,aAAiB,KAAc,CAAC,GAAc,GAClD,KAAM,IAAI,OAAM,8DAGlB,KAAM,CAAE,QAAO,UAAW,GAAQ,GAAmB,GAC/C,EAAS,GAAa,CAAE,QAAO,WAErC,MAAI,aAAiB,GACnB,EAAoB,GAAQ,aAAa,EAAO,EAAG,GAEnD,EAAoB,GAAQ,UAAU,EAAO,EAAG,EAAG,EAAO,GAErD,EC/BT,yEAKA,kBACE,EACA,GAGA,KAAM,GAAe,GAAU,EAAI,SAAS,sBAEtC,CAAC,EAAQ,EAAO,GAAe,EAAU,MAAM,MAAM,EAAW,GAAa,EAAI,GACjF,EAAc,AAAG,GAAK,IAAM,EAAU,KAAK,EAAQ,EAAO,GAAa,SAC7E,YAAM,AAAG,IAAQ,SAAS,EAAa,GAEvC,EAAY,UAEL,EChBF,YAAwB,GAE7B,KAAM,CAAE,QAAO,SAAQ,SAAU,EAAI,SAErC,MAAO,aAAiB,IACnB,YAAiB,IACjB,YAAiB,GCHjB,YAAuB,EAA6C,EAAmB,EAAuB,IAEnH,KAAM,CAAE,QAAO,UAAW,EAAI,SAE9B,GAAI,CAAE,aAAiB,IAAS,YAAiB,IAC/C,KAAM,IAAI,OAAM,4EAGlB,KAAM,GAAO,GAAmB,GAC1B,EAAQ,EAAY,KAAK,IAAI,EAAK,OAAQ,EAAK,OAC/C,EAAQ,EAAQ,EAAK,MACrB,EAAS,EAAQ,EAAK,OAEtB,EAAe,GAAa,CAAE,MAAO,EAAW,OAAQ,IACxD,EAAc,YAAiB,GAAS,EAAQ,GAAsB,GAEtE,EAAS,KAAK,IAAI,EAAQ,GAAU,EACpC,EAAK,GAAe,EAAQ,EAAS,EAAS,EAC9C,EAAK,GAAe,EAAS,EAAQ,EAAS,EACpD,SAAoB,GAAc,UAAU,EAAa,EAAI,EAAI,EAAO,GAEjE,EC1BT,qHAmBE,YACE,EACA,EAA6B,IAVvB,mBAAkD,GAClD,eAAiC,GAEjC,wBAA8B,GAE9B,sBAA+B,GAOrC,GAAI,CAAC,MAAM,QAAQ,GACjB,KAAM,IAAI,OAAM,4HAA4H,KAG9I,KAAK,mBAAqB,EAC1B,KAAK,WAAa,EAAO,OAEzB,EAAO,QAAQ,CAAC,EAAO,KAErB,GAAI,EAAW,IACb,KAAK,cAAc,GAAO,EAC1B,KAAK,iBAAiB,GAAO,EAAM,MACnC,OAGF,GAAI,EAAW,IACb,KAAM,GAAa,EAAc,MAAM,GACvC,GAAI,IAAc,EAChB,KAAM,IAAI,OAAM,yCAAyC,8CAG3D,KAAK,cAAc,GAAO,EAC1B,KAAK,iBAAiB,GAAQ,EAAc,MAAM,MAAM,GACxD,OAGF,KAAM,GAAU,YAAyB,GAAI,SAAS,OAAS,EAAQ,GAAsB,GAC7F,KAAK,UAAU,GAAO,EACtB,KAAK,iBAAiB,GAAO,CAAC,EAAO,OAAQ,EAAO,MAAO,QAIpD,gBACT,MAAO,MAAK,iBAGH,YACT,MAAO,MAAK,aAGH,gBACT,MAAO,MAAK,UAAY,GAAK,KAAK,sBAGzB,aACT,MAAO,MAAK,cAGH,mBACT,MAAO,MAAK,oBAGH,aACT,MAAO,MAAK,cAGH,2BACT,MAAO,GAAM,KAAK,UAAW,EAAG,GAAG,IACjC,CAAC,EAAG,IAAa,KAAK,2BAA2B,IAI9C,SAAS,GACd,MAAO,MAAK,SAAS,IAAa,KAAK,aAAa,GAG/C,mBAAmB,GACxB,MAAO,MAAK,iBAAiB,GAGxB,eAAe,GACpB,MAAO,MAAK,iBAAiB,GAAU,GAGlC,cAAc,GACnB,MAAO,MAAK,iBAAiB,GAAU,GAGlC,2BAA2B,GAChC,GAAI,MAAO,MAAK,WAAc,SAC5B,KAAM,IAAI,OAAM,yFAGlB,KAAM,GAAQ,KAAK,cAAc,GAC3B,EAAS,KAAK,eAAe,GACnC,MAAO,IAA0B,CAAE,QAAO,UAAU,KAAK,WAYpD,cAAc,EAAmB,EAA0B,IAEhE,YAAK,WAAa,EAEX,AAAG,GAAK,KAEb,KAAM,GAAe,EAAM,KAAK,UAAW,EAAG,GAAG,IAAI,IACnD,KAAM,GAAQ,KAAK,SAAS,GAE5B,GAAI,YAAoB,KAEtB,GAAI,GAAY,EAAW,GAAS,EAAQ,EAAM,aAElD,SAAY,GAAY,EAAW,GAEnC,AAAI,GAAU,MAAM,KAAO,GAAa,EAAU,MAAM,KAAO,IAC7D,GAAY,AAAG,GAAM,eAAe,EAAW,CAAC,EAAW,KAGtD,EAAU,KAAK,EAAW,EAAW,GAG9C,GAAI,YAAiB,GAAI,SAAS,OAChC,MAAO,AAAG,IAAQ,WAAW,GAAc,EAAO,EAAW,IAG/D,KAAM,IAAI,OAAM,+BAA+B,8FAAqG,OAIhJ,EAAc,AAAG,GAAM,EAAa,IAAI,GAAK,AAAG,GAAK,EAAG,aAAa,KAAK,KAAK,UAAW,EAAW,EAAW,GAGtH,MAAO,MC3Ib,iBAAiC,GAC/B,GAAI,YAAkB,IACpB,MAAO,GAGT,GAAI,GAAgB,MAAM,QAAQ,GAC5B,EACA,CAAC,GAEP,GAAI,CAAC,EAAc,OACjB,KAAM,IAAI,OAAM,4CAGlB,KAAM,GAAa,AAAC,GAAgB,MAAM,QAAQ,GAAU,mBAAmB,KAAS,GAElF,EAAa,EAAc,IAAI,IAErC,SAAW,QAAQ,CAAC,EAAO,KACzB,GAAI,CAAC,GAAe,IAAU,CAAC,EAAW,IAAU,CAAC,EAAW,GAE9D,KAAI,OAAO,GAAc,IAAO,SACxB,GAAI,OAAM,eAAe,EAAW,sEAAsE,EAAc,MAG1H,GAAI,OAAM,eAAe,EAAW,iIAG5C,GAAI,EAAW,IAEb,KAAM,GAAY,EAAM,MAAM,GAC9B,GAAI,IAAc,EAChB,KAAM,IAAI,OAAM,eAAe,EAAW,iCAAiC,iDAMjF,KAAM,SAAQ,IACZ,EAAW,IAAI,GAAS,GAAe,IAAU,GAAiB,KAG7D,GAAI,IAAS,EAAY,MAAM,QAAQ,ICvChD,kBACE,EACA,GAGA,KAAM,CAAE,UAAW,EAAI,SAEvB,GAAI,GAAS,EAEb,GAAI,CAAE,aAAiB,KACrB,KAAM,GAAW,KAAM,GAAW,GAElC,GAAI,EAAS,UAAY,EACvB,KAAM,IAAI,OAAM,8CAGlB,KAAM,GAAiB,EAAS,SAAS,GACzC,EAAS,YAA0B,GAC/B,EACA,KAAM,IAAoB,GAGhC,KAAM,GAAM,EAAoB,GAC1B,EAAQ,EAAW,IACvB,GAAO,YAAe,GAClB,EAAI,QAAQ,EAAO,MAAO,EAAO,QAAQ,IAAI,QAC7C,GAEH,IAAI,GAAO,EAAI,mBAAmB,EAAO,MAAO,EAAO,SAE1D,MAAO,GAAM,IAAI,CAAC,CAAE,IAAG,IAAG,QAAO,aAC/B,KAAM,GAAU,GAAa,CAAE,QAAO,WACtC,SAAoB,GACjB,aAAa,EAAI,aAAa,EAAG,EAAG,EAAO,GAAS,EAAG,GACnD,IClDX,yEAgBA,kBACE,EACA,GAGA,GAAI,CAAC,EAAW,IAAgB,CAAC,EAAW,GAC1C,KAAM,IAAI,OAAM,6DAGlB,GAAI,EAAW,IAAgB,EAAY,MAAM,GAAK,EACpD,KAAM,IAAI,OAAM,oDAGlB,MAAO,AAAG,IAAK,KACb,KAAM,CAAC,EAAW,EAAU,GAAe,EAAY,MAAM,MAAM,EAAW,GAAe,EAAI,GAE3F,EAAQ,EAAW,IACvB,GAAO,YAAe,GAClB,EAAI,QAAQ,EAAU,GAAW,IACjC,GAEH,IAAI,GAAO,EAAI,mBAAmB,EAAU,IAEzC,EAAc,EAAM,IAAI,CAAC,CAAE,IAAG,IAAG,QAAO,YAC5C,AAAG,GAAQ,EAAY,KAAK,EAAW,EAAU,GAAc,CAAC,EAAG,EAAG,GAAI,CAAC,EAAQ,EAAO,KAG5F,MAAO,KCzCX,kBACE,EACA,GAGA,KAAM,GAAQ,EAAI,SAAS,MACrB,EAAM,KAAM,GAAM,EAAK,GAC7B,GAAI,CAAE,GAAI,OAAS,KACjB,KAAM,IAAI,OAAM,qBAAqB,EAAI,WAAW,EAAI,yBAAyB,EAAI,OAEvF,MAAO,GCTT,kBAAiC,GAC/B,KAAM,GAAM,KAAM,IAAa,GACzB,EAAO,KAAO,GAAK,OAEzB,GAAI,CAAC,EAAK,KAAK,WAAW,UACxB,KAAM,IAAI,OAAM,wEAAwE,EAAK,kBAAkB,EAAI,OAErH,MAAO,IAAc,GCRvB,kBAAmC,GACjC,MAAQ,MAAM,IAAa,IAAM,OCDnC,kBAAsC,GACpC,MAAO,IAAI,cAAa,KAAO,MAAM,IAAa,IAAM,eCHnD,YAAsB,EAAyB,GACpD,KAAM,GAA0B,GAAG,0BAEnC,GAAI,CAAC,EACH,MAAO,CACL,aAAc,GACd,YAAa,GAIjB,GAAI,IAAQ,IACV,MAAO,CACL,aAAc,IACd,YAAa,IAAI,KAGrB,KAAM,GAAW,EAAI,WAAW,WAAa,UAAY,EAAI,WAAW,YAAc,WAAa,GACnG,EAAM,EAAI,QAAQ,EAAU,IAE5B,KAAM,GAAQ,EAAI,MAAM,KAAK,OAAO,GAAK,GAEnC,EAAe,EAAI,SAAS,SAC9B,EAAM,EAAM,OAAS,GACrB,EAEJ,GAAI,GAAe,EAAY,GAAI,SAAS,SAAW,EAAM,MAAM,EAAG,EAAM,OAAS,GAAK,GAAO,KAAK,KACtG,SAAe,EAAI,WAAW,KAAO,IAAI,IAAiB,EAEnD,CACL,eACA,YAAa,IAAiB,IAAM,IAAI,IAAiB,GAAG,KAAgB,KC9BhF,yDAKA,kBACE,EACA,GAEA,KAAM,CAAE,cAAa,gBAAiB,GAAa,EAAK,GACxD,GAAI,GAAW,KAAM,IAAuC,GAE5D,MAAO,AAAG,IAAG,YAAY,EAAU,GCT9B,YAAyB,EAAoB,EAAwB,EAA8B,IACxG,KAAM,CAAE,QAAO,UAAW,EACtB,GAAmB,GACnB,EACJ,SAAM,MAAQ,EACd,EAAM,OAAS,EACR,CAAE,QAAO,UCTlB,0GAYE,YAAsB,gBAHZ,aAAkC,OAClC,oBAAiC,MAahC,UAAmC,MAAO,MAAK,WAC/C,iBAAkC,MAAO,MAAK,kBAC9C,YAAsB,MAAO,CAAC,CAAC,KAAK,OAExC,iBAAiB,GACtB,KAAM,CAAE,MAAK,WAAY,KAAK,qBAAqB,GACnD,MAAO,GAAI,GAGN,sBAAsB,EAAmB,GAC9C,KAAM,CAAE,MAAK,WAAY,KAAK,qBAAqB,GACnD,EAAI,GAAS,UACb,EAAI,GAAW,EAGV,eACL,MAAO,MAAK,eAAe,IAAI,CAAC,CAAE,eAAiB,EACjD,KAAM,EACN,OAAQ,KAAK,iBAAiB,MAI3B,qBACL,MAAO,MAAK,eAAe,OAAO,GAAS,EAAM,iBAAqB,KAGjE,kBACL,MAAO,MAAK,eAAe,OAAO,GAAS,CAAE,GAAM,iBAAqB,MAGnE,WACL,KAAK,kBAAkB,QAAQ,CAAC,CAAE,OAAM,aACtC,KAAK,sBAAsB,EAAM,EAAO,cAIrC,SACL,KAAK,qBAAqB,QAAQ,CAAC,CAAE,OAAM,OAAQ,MACjD,KAAM,GAAS,AAAG,GAAO,EAAS,YAClC,EAAS,UACT,KAAK,sBAAsB,EAAM,KAI9B,QAAQ,EAA4B,IACzC,KAAK,eAAe,QAAQ,IAC1B,GAAI,GAAoB,EAAM,OAAO,WACnC,KAAM,IAAI,OAAM,mDAAmD,EAAM,QAE3E,EAAM,OAAO,YAEf,KAAK,QAAU,OAGV,kBACL,MAAO,IAAI,cACT,KAAK,eACF,IAAI,CAAC,CAAE,YAAa,MAAM,KAAK,EAAO,aACtC,OAAO,CAAC,EAAM,IAAQ,EAAK,OAAO,UAI5B,MAAK,GAChB,GAAI,YAAwB,eAC1B,KAAK,eAAe,GACpB,OAGF,KAAM,MAAK,YAAY,QAGZ,aAAY,GACvB,GAAI,GAAO,MAAO,IAAQ,SACxB,KAAM,IAAI,OAAM,GAAG,KAAK,0CAG1B,KAAM,GAAY,KAAM,IAAc,EAAK,KAAK,uBAChD,KAAK,kBAAkB,QAGZ,cAAa,GACxB,GAAI,GAAY,MAAO,IAAa,SAClC,KAAM,IAAI,OAAM,GAAG,KAAK,iDAG1B,KAAM,CAAE,YAAa,EAAI,SAEnB,CAAE,cAAa,gBAAiB,GAAa,EAAU,KAAK,uBAE5D,EAAuB,AAAC,GAAwB,QAAQ,IAC5D,EAAU,IAAI,GAAY,EAAS,GAAU,KAAK,GAAO,EAAI,UAEzD,EAAc,AAAG,GAAG,qBAAqB,GACzC,EAAW,KAAK,MAAO,MAAM,GAAS,IAAc,YACpD,EAAY,KAAM,GAAY,EAAU,GAE9C,KAAK,kBAAkB,GAGlB,kBAAkB,GACvB,KAAM,CACJ,gBACA,UACE,KAAK,2BAA2B,GAEpC,KAAK,eAAiB,EACtB,KAAK,QAAU,EAGV,eAAe,GACpB,KAAM,CACJ,gBACA,UACE,KAAK,cAAc,GAEvB,KAAK,eAAiB,EACtB,KAAK,QAAU,EAGT,qBAAqB,GAC3B,GAAI,CAAC,KAAK,OACR,KAAM,IAAI,OAAM,qDAGlB,KAAM,GAAS,EAAU,MAAM,KAAK,OAAO,CAAC,EAAoD,KAC9F,GAAI,CAAC,EAAI,QAAQ,eAAe,GAC9B,KAAM,IAAI,OAAM,wDAAwD,eAAqB,KAG/F,MAAO,CAAE,IAAK,EAAI,QAAS,UAAS,QAAS,EAAI,QAAQ,KACxD,CAAE,QAAS,KAAK,SAEb,CAAE,MAAK,WAAY,EACzB,GAAI,CAAC,GAAO,CAAC,GAAW,CAAE,GAAI,YAAuB,KACnD,KAAM,IAAI,OAAM,8DAA8D,KAGhF,MAAO,CAAE,MAAK,YChKlB,2FAIO,WACL,EACA,EACA,GAEA,MAAO,AAAG,IAAK,KACb,GAAI,GAAM,AAAG,GAAgB,EAAG,EAAO,iBAAkB,EAAO,iBAAkB,EAAQ,QAC1F,SAAM,AAAG,GAAI,EAAK,EAAO,MAClB,ICZX,4FAMO,YACL,EACA,EACA,EAAwB,IAExB,MAAO,AAAG,IAAK,KACb,KAAM,GAAO,AAAG,GACd,EACI,AAAG,EACH,AAAG,GAAO,EAAI,EAAiB,MAAqB,QAAS,CAAC,EAAG,GAAI,QACrE,EAAiB,MAAM,MAEvB,EAAuB,EAAG,EAAiB,MAA8B,CAAC,EAAG,KAE7E,EAAO,EAAuB,EAAM,EAAiB,MAAO,CAAC,EAAG,IAEhE,EAAM,AAAG,GAAK,AAAG,EAAI,EAAM,IAC3B,EAAO,EAAuB,EAAK,EAAiB,MAAO,CAAC,EAAG,IAErE,MAAO,AAAG,IAAK,AAAG,EAAI,EAAM,AAAG,EAAI,EAAM,OAItC,YACL,EACA,EACA,EAAwB,GACxB,EAAuB,IAEvB,MAAO,AAAG,IAAK,KACb,KAAM,GAAO,AAAG,GACd,EACI,AAAG,EACH,AAAG,GAAO,EAAI,EAAiB,MAAqB,QAAS,EAAc,CAAC,EAAG,GAAK,CAAC,EAAG,GAAI,QAC5F,EAAiB,MAAM,MAEvB,EAAuB,EAAG,EAAiB,MAA8B,EAAc,CAAC,EAAG,GAAK,CAAC,EAAG,KAEpG,EAAO,EAAuB,EAAM,EAAiB,MAAO,CAAC,EAAG,IAEhE,EAAM,AAAG,GAAK,AAAG,EAAI,EAAM,IAC3B,EAAO,EAAuB,EAAK,EAAiB,MAAO,CAAC,EAAG,IAE/D,EAAM,AAAG,GAAK,AAAG,EAAI,EAAM,AAAG,EAAI,EAAM,KACxC,EAAO,EAAuB,EAAK,EAAiB,MAAO,CAAC,EAAG,IAErE,MAAO,AAAG,IAAK,AAAG,EAAI,EAAM,AAAG,EAAI,EAAM,AAAG,EAAI,EAAM,QCpD1D,6FAIO,YACL,EACA,EACA,EAA4B,OAC5B,EAAoB,IAEpB,MAAO,AAAG,IAAK,KACb,KAAM,GAAM,AAAG,GACb,AAAG,GAAO,EAAG,EAAO,QAAS,CAAC,EAAG,GAAI,GACrC,EAAO,MAGT,MAAO,GAAW,AAAG,GAAK,GAAO,ICd9B,WAAoC,EAAgB,GACzD,OAAO,KAAK,GAAW,QAAQ,IAC7B,AAAK,EAAc,KAAK,GAAM,EAAG,eAAiB,IAChD,EAAU,GAAM,YCLtB,8EAIO,YACL,EACA,GAGA,MAAO,UACL,EACA,EACA,EACA,GAGA,KAAM,GAAU,AAAG,GACjB,EAAe,EAAa,EAAc,EAAa,GACvD,CAAC,EAAY,EAAY,EAAY,IAEjC,EAAO,AAAG,GAAS,EAAe,IAExC,SAAc,KACZ,CAAE,UAAW,GAAG,aAChB,CAAE,UAAW,GAAG,WAGX,CAAE,UAAS,SC3BtB,8EAKO,YACL,EACA,GAGA,MAAO,UACL,EACA,EACA,GAGA,KAAM,GAAa,AAAG,GAAS,EAAe,EAAa,GAAc,CAAC,EAAY,IAChF,EAAU,AAAG,GAAS,EAAe,IAE3C,SAAc,KACZ,CAAE,UAAW,GAAG,aAChB,CAAE,UAAW,GAAG,WAGX,CACL,QAAS,EACT,KAAM,IC1BZ,SAoBE,YACS,EACA,EACA,GAFA,wBACA,wBACA,aCvBX,8EAIO,YACL,EACA,GAGA,MAAO,UAAS,EAAoB,EAAqB,GACvD,KAAM,GAAmB,AAAG,GAAS,EAAe,EAAI,EAAI,GAAa,CAAC,EAAG,EAAG,EAAY,IACtF,EAAmB,AAAG,GAAS,EAAe,EAAa,GAAc,CAAC,EAAG,EAAG,EAAY,IAC5F,EAAO,AAAG,GAAS,EAAe,IAExC,SAAc,KACZ,CAAE,UAAW,GAAG,sBAChB,CAAE,UAAW,GAAG,sBAChB,CAAE,UAAW,GAAG,WAGX,GAAI,IACT,EACA,EACA,IAMC,YACL,GAGA,MAAO,UAAU,GACf,KAAM,GAAmB,EAAgC,GAAG,qBAA2B,GACjF,EAAmB,EAAgC,GAAG,qBAA2B,GACjF,EAAO,EAAgC,GAAG,SAAe,GAE/D,MAAO,IAAI,IACT,EACA,EACA,ICtCC,WAAmC,EAAgB,GAExD,MAAO,UAAa,EAAsB,EAAmB,GAC3D,KAAM,GAAS,EAAU,GAEzB,GAAI,CAAC,GAAS,EAAQ,GACpB,KAAM,IAAI,OAAM,sBAAsB,oBAA+B,oBAA4B,KAGnG,SAAc,KACZ,CAAE,eAAc,UAAW,GAAc,IAGpC,GChBJ,WAA+B,GACpC,GAAI,GAAmB,EAEvB,WAAwB,GACtB,KAAM,GAAM,EAAiB,MAAM,EAAG,GACtC,SAAmB,EAAiB,MAAM,GACnC,EAGT,aACE,MAAO,GAGT,MAAO,CACL,iBACA,uBCPG,YAA2B,EAAwC,GAExE,KAAM,GAAoB,GAAyB,EAAgB,GAC7D,EAA6B,GAAkC,EAAgB,GAErF,WAAkC,EAAoB,EAAqB,EAAsB,EAAwB,IAEvH,KAAM,GAAQ,EACV,EAAkB,EAAY,EAAa,EAAG,GAAG,WACjD,EAA2B,EAAY,EAAa,GAAG,WACrD,EAAQ,EAA2B,EAAa,EAAa,GAAG,WAChE,EAAQ,EAA2B,EAAa,EAAa,GAAG,WAEtE,MAAO,CAAE,QAAO,QAAO,SAGzB,WAAkC,EAAoB,EAAqB,EAAsB,EAAwB,IAEvH,KAAM,CAAE,QAAO,QAAO,SAAU,EAAyB,EAAY,EAAa,EAAc,GAC1F,EAAQ,EAA2B,EAAa,EAAa,GAAG,WAEtE,MAAO,CAAE,QAAO,QAAO,QAAO,SAGhC,MAAO,CACL,2BACA,4BC7BG,YAAuB,GAE5B,KAAM,GAAgC,GAEhC,CACJ,iBACA,uBACE,EAAsB,GAEpB,CACJ,4BACE,GAAkB,EAAgB,GAEhC,EAAS,EAAyB,EAAG,GAAI,SAAU,IACnD,EAAS,EAAyB,GAAI,GAAI,UAC1C,EAAS,EAAyB,GAAI,IAAK,UAC3C,EAAS,EAAyB,IAAK,IAAK,UAElD,GAAI,IAAsB,SAAW,EACnC,KAAM,IAAI,OAAM,kCAAkC,IAAsB,UAG1E,MAAO,CACL,gBACA,OAAQ,CAAE,SAAQ,SAAQ,SAAQ,WCzB/B,YAA+B,GACpC,MAAO,UAAS,GACd,KAAM,GAAU,EAAgC,GAAG,YAAkB,GAC/D,EAAO,EAAgC,GAAG,SAAe,GAE/D,MAAO,CAAE,UAAS,SCLf,YAA2B,EAAgB,GAEhD,KAAM,GAAqB,EAA0B,EAAW,GAE1D,EAAoB,GAAsB,GAC1C,EAA6B,GAA+B,GAElE,WAAkC,EAAgB,EAAwB,IACxE,KAAM,GAAQ,EACV,EAAkB,GAAG,WACrB,EAA2B,GAAG,WAC5B,EAAQ,EAA2B,GAAG,WACtC,EAAQ,EAA2B,GAAG,WAE5C,MAAO,CAAE,QAAO,QAAO,SAGzB,WAAkC,EAAgB,EAAwB,IACxE,KAAM,GAAQ,EACV,EAAkB,GAAG,WACrB,EAA2B,GAAG,WAC5B,EAAQ,EAA2B,GAAG,WACtC,EAAQ,EAA2B,GAAG,WACtC,EAAQ,EAA2B,GAAG,WAE5C,MAAO,CAAE,QAAO,QAAO,QAAO,SAGhC,MAAO,CACL,2BACA,4BC5BG,YACL,GAGA,KAAM,GAAgC,GAEhC,CACJ,4BACE,GAAkB,EAAW,GAE3B,EAAS,CACb,OAAQ,EAAyB,SAAU,IAC3C,OAAQ,EAAyB,UACjC,OAAQ,EAAyB,UACjC,OAAQ,EAAyB,WAGnC,SAA2B,EAAW,GAE/B,CAAE,SAAQ,iBCzBnB,sGAU0C,GAExC,cACE,MAAM,wBAGD,aAAa,GAElB,KAAM,CAAE,UAAW,KAEnB,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,sDAGlB,MAAO,AAAG,IAAK,KACb,KAAM,GAAc,EAAM,cAAc,IAAK,IACvC,EAAU,CAAC,QAAS,QAAS,SAC7B,EAAa,EAAU,EAAa,GAAS,IAAI,AAAG,GAAO,MAEjE,GAAI,GAAM,GAAY,EAAY,EAAO,OAAQ,IACjD,SAAM,GAAY,EAAK,EAAO,QAC9B,EAAM,GAAY,EAAK,EAAO,QAC9B,EAAM,GAAY,EAAK,EAAO,QAC9B,EAAM,AAAG,GAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,SAE/B,SAIE,SAAQ,GACnB,MAAO,MAAK,aAAa,KAAM,GAAW,IAGlC,sBACR,MAAO,+BAGC,2BAA2B,GACnC,MAAO,IAA2B,GAG1B,cAAc,GACtB,MAAO,IAAc,ICpDzB,kFAIO,YACL,EACA,GAEA,MAAO,AAAG,IAAK,IACb,AAAG,GACD,AAAG,GAAO,EAAG,EAAO,SACpB,EAAO,OCRN,YAAuB,EAAuB,EAAoB,GAEvE,KAAM,GAAgC,GAEhC,CACJ,iBACA,uBACE,EAAsB,GAEpB,EAAkB,GAAuB,EAAgB,GAEzD,EAAK,EAAgB,EAAY,EAAa,MAEpD,GAAI,IAAsB,SAAW,EACnC,KAAM,IAAI,OAAM,kCAAkC,IAAsB,UAG1E,MAAO,CACL,gBACA,OAAQ,CAAE,OCjBP,YACL,GAGA,KAAM,GAAgC,GAEhC,EAAqB,EAA0B,EAAW,GAEhE,WAAyB,GACvB,KAAM,GAAU,EAAgC,GAAG,YAAkB,GAC/D,EAAO,EAAgC,GAAG,SAAe,GAC/D,MAAO,CAAE,UAAS,QAGpB,KAAM,GAAS,CACb,GAAI,EAAgB,OAGtB,SAA2B,EAAW,GAE/B,CAAE,SAAQ,iBCvBZ,YAA4B,GAEjC,KAAM,GAAyC,GACzC,EAAmC,GAEzC,cAAO,KAAK,GAAW,QAAQ,IAC7B,KAAM,GAAM,EAAI,WAAW,MAAQ,EAAgB,EACnD,EAAI,GAAO,EAAU,KAGhB,CAAE,sBAAqB,iBCZhC,2EAkBU,GAIR,YAAY,EAAe,GACzB,MAAM,GACN,KAAK,sBAAwB,KAGpB,wBACT,MAAO,MAAK,sBAOP,OAAO,GAEZ,KAAM,CAAE,UAAW,KAEnB,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,GAAG,KAAK,uCAG1B,MAAO,AAAG,IAAK,KACb,KAAM,GAAqB,YAAiB,IACxC,KAAK,qBAAqB,aAAa,GACvC,EACJ,MAAO,IAAoB,EAAmB,KAAK,EAAmB,MAAM,GAAI,IAAK,EAAO,MAIzF,QAAQ,EAA4B,IACzC,KAAK,qBAAqB,QAAQ,GAClC,MAAM,QAAQ,GAGT,qBAAqB,GAC1B,KAAM,CAAE,SAAQ,iBAAkB,KAAK,wBAAwB,GAC/D,KAAK,QAAU,EACf,KAAK,eAAiB,EAGjB,wBAAwB,GAC7B,MAAO,IAAc,EAAS,KAAK,0BAA2B,KAAK,4BAG3D,2BAA2B,GAEnC,KAAM,CAAE,sBAAqB,iBAAkB,GAAmB,GAElE,YAAK,qBAAqB,kBAAkB,GAErC,GAA2B,GAG1B,cAAc,GAEtB,KAAM,GAAM,KAAK,0BACX,EAAO,KAAK,2BACZ,EAAwB,EAAO,EAAQ,EAEvC,EAA0B,EAAQ,MAAM,EAAG,EAAQ,OAAS,GAC5D,EAAoB,EAAQ,MAAM,EAAQ,OAAS,GAEzD,YAAK,qBAAqB,eAAe,GAClC,KAAK,wBAAwB,ICrFjC,KAAM,IAAyB,CAAC,UAAW,QAAS,MAAO,QAAS,UAAW,YAAa,aAAnG,SAWE,YAAY,GACV,GAAI,EAAc,SAAW,EAC3B,KAAM,IAAI,OAAM,8EAA8E,EAAc,UAG9G,GAAuB,QAAQ,CAAC,EAAY,KAC1C,KAAK,GAAc,EAAc,KAIrC,gBACE,MAAO,IACJ,IAAI,GAAe,EAAE,aAAY,YAAa,KAAK,MACnD,KAAK,CAAC,EAAI,IAAO,EAAG,YAAc,EAAG,cCxB5C,uGAQuC,IAErC,YAAY,EAA6C,GAAI,KAC3D,MAAM,oBAAqB,GAGtB,aAAa,GAClB,MAAO,AAAG,IAAK,IAAM,AAAG,GAAQ,KAAK,OAAO,UAGjC,SAAQ,GACnB,MAAO,MAAK,aAAa,KAAM,GAAW,SAG/B,oBAAmB,GAC9B,KAAM,GAAW,KAAM,GAAW,GAC5B,EAAM,KAAM,MAAK,aAAa,GAC9B,EAAsB,KAAM,SAAQ,IAAI,AAAG,GAAQ,GAAK,IAAI,KAAM,KACtE,KAAM,GAAO,KAAM,GAAE,OACrB,SAAE,UACK,KAET,EAAI,UAEJ,KAAM,GAAqB,EACxB,IAAI,GAAgB,GAAI,IAAgB,IAE3C,MAAO,GAAS,aACZ,EACA,EAAmB,GAGf,sBACR,MAAO,wBAGC,0BACR,MAAO,KAGC,2BACR,MAAO,IC3CJ,YAA+B,GACpC,MAAO,GAAI,sBAA0B,IAGhC,YAGL,EACA,GAGA,KAAM,GAAY,CAAE,eACpB,MAAO,QAAO,OAAO,GAAI,EAAW,GCT/B,YACL,EACA,EACA,EAAgB,GAChB,GAEA,KAAM,GAAuB,MAAM,QAAQ,GAAmB,EAAkB,CAAC,GAEjF,EAAqB,QAAQ,IAC3B,KAAM,GAAO,YAAa,IACtB,EACC,GAAsB,GAAK,EAAE,YAAc,OAChD,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,mHAGlB,KAAM,GAAS,EAAK,gBACd,EAAmB,EAAO,OAAO,GAAQ,EAAK,YAAc,GAE5D,EAAS,EAAoB,GAC/B,EAAE,UAAU,IAAI,WACf,GAAmB,GAAI,GAAM,EAAG,GAE/B,EAAgB,GAAI,IACxB,EAAiB,IAAI,GAAQ,GAAG,EAAK,eAAe,GAAM,EAAK,iBAC/D,GAEF,EAAc,KAAK,KCtBhB,YAA6B,GAClC,MAAO,GAAoB,IACtB,EAAI,oBAAwB,IAC5B,EAAI,6BAAiC,IACrC,EAAI,sBAA0B,GAG9B,YAIL,EACA,GAGA,KAAM,CAAE,IAAK,GAAU,EAAU,UAC3B,EAAY,EAAmB,QAAwB,EAAM,EAAG,EAAM,GAEtE,EAAO,EAAU,QACjB,CAAE,aAAc,EAAU,UAC1B,EAAc,GAAI,GAAc,EAAU,UAAU,MAAO,EAAK,QAAQ,EAAU,WAAY,GAE9F,EAAY,CAChB,YACA,qBACA,eAGF,MAAO,QAAO,OAAO,GAAI,EAAW,GC1CtC,SAyBE,YAAY,EAAqC,IAC/C,KAAM,CAAE,YAAY,GAAM,aAAa,GAAM,YAAW,YAAW,YAAW,cAAe,EAC7F,KAAK,UAAY,EACjB,KAAK,WAAa,EAClB,KAAK,UAAY,GAAa,EAC9B,KAAK,UAAY,GAAa,EAC9B,KAAK,UAAY,GAAa,uBAC9B,KAAK,WAAa,GAAc,wBAhCpC,SAwCE,YACE,EACA,EAAqC,IAErC,KAAK,cAAgB,EACrB,KAAK,QAAU,GAAI,IAAyB,GAG9C,KAAK,GACH,KAAM,GAAM,EAAoB,GAE1B,CAAE,YAAW,aAAY,YAAW,YAAW,YAAW,cAAe,KAAK,QAcpF,GAZA,AAAI,GAAa,KAAK,wBAAyB,KAC7C,GAAI,YAAc,EAClB,EAAI,UAAY,EAChB,EAAY,EAAK,KAAK,cAAc,iBACpC,EAAY,EAAK,KAAK,cAAc,kBACpC,EAAY,EAAK,KAAK,cAAc,mBACpC,EAAY,EAAK,KAAK,cAAc,WACpC,EAAY,EAAK,KAAK,cAAc,aAAc,IAClD,EAAY,EAAK,KAAK,cAAc,cAAe,IACnD,EAAY,EAAK,KAAK,cAAc,WAAY,KAG9C,GACF,EAAI,YAAc,EAClB,EAAI,UAAY,EAEhB,KAAM,GAAY,AAAC,IACjB,EAAI,YACJ,EAAI,IAAI,EAAG,EAAG,EAAG,EAAG,EAAW,EAAG,EAAI,KAAK,IAC3C,EAAI,QAEN,KAAK,cAAc,UAAU,QAAQ,KAOpC,YACL,EACA,GAEA,KAAM,GAAqB,MAAM,QAAQ,GAAiB,EAAgB,CAAC,GAC3E,EAAmB,QAAQ,IACzB,KAAM,GAAY,YAAa,GAC3B,EACC,GAAoB,GAAK,EAAE,UAAY,OAC5C,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,gIAGlB,GAAI,IAAkB,GAAW,KAAK,KC9F1C,qRCKA,YAA2B,EAAwC,GAEjE,KAAM,GAAoB,GAAyB,EAAgB,GAC7D,EAA6B,GAAkC,EAAgB,GAErF,WAAqC,EAAoB,EAAqB,GAE5E,KAAM,GAAkB,EAA2B,EAAY,EAAa,GAAG,qBACzE,EAAkB,EAA2B,EAAa,EAAa,GAAG,qBAC1E,EAAiB,EAAkB,EAAY,EAAa,EAAG,GAAG,oBAExE,MAAO,CAAE,kBAAiB,kBAAiB,kBAG7C,WAAgC,EAAkB,GAEhD,KAAM,GAAkB,EAA2B,EAAU,EAAU,GAAG,qBACpE,EAAkB,EAA2B,EAAU,EAAU,GAAG,qBACpE,EAAkB,EAA2B,EAAU,EAAU,GAAG,qBAE1E,MAAO,CAAE,kBAAiB,kBAAiB,mBAG7C,MAAO,CACL,oBACA,6BACA,8BACA,0BAKG,YAAuB,EAAuB,GAEnD,KAAM,GAAgC,GAEhC,CACJ,iBACA,uBACE,EAAsB,GAEpB,CACJ,oBACA,6BACA,8BACA,0BACE,GAAkB,EAAgB,GAEhC,EAAqB,EAAkB,EAAG,GAAI,EAAG,sBACjD,EAA+B,EAA4B,GAAI,GAAI,gCACnE,EAA+B,EAA4B,GAAI,IAAK,gCAEpE,EAAa,CACjB,QAAS,EACT,kBAAmB,EACnB,kBAAmB,GAGf,EAAc,GACpB,EAAM,EAAe,EAAG,GAAG,QAAQ,AAAC,IAClC,EAAY,cAAc,KAAS,EAAuB,IAAK,0BAA0B,OAG3F,KAAM,GAA4B,EAA4B,IAAK,IAAK,6BAClE,EAA2B,EAA2B,IAAK,IAAK,4BAEhE,EAAY,CAChB,gBAAiB,EACjB,eAAgB,GAGlB,GAAI,IAAsB,SAAW,EACnC,KAAM,IAAI,OAAM,kCAAkC,IAAsB,UAG1E,MAAO,CACL,gBACA,OAAQ,CAAE,aAAY,cAAa,cCtEvC,YAA2B,EAAgB,GAEzC,KAAM,GAAqB,EAA0B,EAAW,GAE1D,EAAoB,GAAsB,GAC1C,EAA6B,GAA+B,GAElE,WAAqC,GAEnC,KAAM,GAAkB,EAA2B,GAAG,qBAChD,EAAkB,EAA2B,GAAG,qBAChD,EAAiB,EAAkB,GAAG,oBAE5C,MAAO,CAAE,kBAAiB,kBAAiB,kBAG7C,WAAgC,GAE9B,KAAM,GAAkB,EAA2B,GAAG,qBAChD,EAAkB,EAA2B,GAAG,qBAChD,EAAkB,EAA2B,GAAG,qBAEtD,MAAO,CAAE,kBAAiB,kBAAiB,mBAG7C,MAAO,CACL,oBACA,6BACA,8BACA,0BAIG,YACL,EACA,GAGA,KAAM,GAAgC,GAEhC,CACJ,oBACA,6BACA,8BACA,0BACE,GAAkB,EAAW,GAE3B,EAAqB,EAAkB,sBACvC,EAA+B,EAA4B,gCAC3D,EAA+B,EAA4B,gCAE3D,EAAa,CACjB,QAAS,EACT,kBAAmB,EACnB,kBAAmB,GAGf,EAAc,GACpB,EAAM,EAAe,EAAG,GAAG,QAAQ,AAAC,IAClC,EAAY,cAAc,KAAS,EAAuB,0BAA0B,OAGtF,KAAM,GAA4B,EAA4B,6BACxD,EAA2B,EAA2B,4BAEtD,EAAY,CAChB,gBAAiB,EACjB,eAAgB,GAGlB,SAA2B,EAAW,GAE/B,CAAE,OAAQ,CAAE,aAAY,cAAa,aAAa,iBCpF3D,wHAWA,YAAc,EAAgB,EAAoB,GAChD,MAAO,AAAG,IAAI,AAAG,GAAO,EAAG,EAAO,QAAS,EAAQ,QAAS,EAAO,MAGrE,YAAwB,EAAgB,EAA8B,EAA2B,IAC/F,GAAI,GAAM,EAAkB,AAAG,GAAK,GAAK,EACzC,SAAM,EAAuB,EAAK,EAAO,gBAAiB,CAAC,EAAG,IAC9D,EAAM,EAAuB,AAAG,GAAK,GAAO,EAAO,gBAAiB,CAAC,EAAG,IACxE,EAAM,AAAG,GAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,QACtC,EAAM,AAAG,GAAI,EAAK,GAAK,EAAI,EAAO,eAAgB,CAAC,EAAG,KAC/C,EAGT,YAAmB,EAAgB,GACjC,GAAI,GAAM,EAAuB,AAAG,GAAK,GAAI,EAAO,gBAAiB,CAAC,EAAG,IACzE,SAAM,EAAuB,AAAG,GAAK,GAAM,EAAO,gBAAiB,CAAC,EAAG,IACvE,EAAM,EAAuB,AAAG,GAAK,GAAM,EAAO,gBAAiB,CAAC,EAAG,IACvE,EAAM,AAAG,GAAI,EAAK,GACX,EA7BT,gBAgCkC,GAIhC,YAAY,GACV,MAAM,gBACN,KAAK,eAAiB,EAGjB,aAAa,GAElB,KAAM,CAAE,UAAW,KAEnB,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,8CAGlB,MAAO,AAAG,IAAK,KACb,KAAM,GAAc,EAAM,cAAc,IAAK,IACvC,EAAU,CAAC,QAAS,QAAS,SAC7B,EAAa,EAAU,EAAa,GAAS,IAAI,AAAG,GAAO,MAEjE,GAAI,GAAM,AAAG,GAAK,GAAK,EAAY,EAAO,WAAW,QAAS,CAAC,EAAG,KAClE,SAAM,GAAe,EAAK,EAAO,WAAW,kBAAmB,IAC/D,EAAM,GAAe,EAAK,EAAO,WAAW,mBAE5C,EAAM,KAAK,eAAgB,EAAG,GAAG,QAAQ,AAAC,IACxC,EAAM,GAAU,EAAK,EAAO,YAAY,cAAc,QAGxD,EAAM,GAAe,EAAK,EAAO,UAAU,iBAC3C,EAAM,AAAG,GAAK,EAAuB,EAAK,EAAO,UAAU,eAAgB,CAAC,EAAG,KACxE,SAIE,SAAQ,GACnB,MAAO,MAAK,aAAa,KAAM,GAAW,IAGlC,sBACR,MAAO,sBAGC,2BAA2B,GACnC,MAAO,IAA2B,EAAW,KAAK,gBAG1C,cAAc,GACtB,MAAO,IAAc,EAAS,KAAK,iBC9EhC,YAAuB,GAE5B,KAAM,GAAgC,GAEhC,CACJ,iBACA,uBACE,EAAsB,GAEpB,EAAkB,GAAuB,EAAgB,GAEzD,EAAM,EAAgB,IAAK,EAAG,UAC9B,EAAS,EAAgB,IAAK,EAAG,aAEvC,GAAI,IAAsB,SAAW,EACnC,KAAM,IAAI,OAAM,kCAAkC,IAAsB,UAG1E,MAAO,CACL,gBACA,OAAQ,CAAE,GAAI,CAAE,MAAK,YClBlB,YACL,GAGA,KAAM,GAAgC,GAEhC,EAAqB,EAA0B,EAAW,GAEhE,WAAyB,GACvB,KAAM,GAAU,EAAgC,GAAG,YAAkB,GAC/D,EAAO,EAAgC,GAAG,SAAe,GAC/D,MAAO,CAAE,UAAS,QAGpB,KAAM,GAAS,CACb,GAAI,CACF,IAAK,EAAgB,UACrB,OAAQ,EAAgB,eAI5B,SAA2B,EAAW,GAE/B,CAAE,SAAQ,iBClBZ,GAAK,GAAL,UAAK,GACV,SAAS,SACT,OAAO,SAFG,WCVZ,qHAWkC,GAIhC,YAAY,EAAqC,GAAI,IAAa,IAChE,MAAM,gBACN,KAAK,sBAAwB,KAGpB,wBACT,MAAO,MAAK,sBAGP,OAAO,GAEZ,KAAM,CAAE,UAAW,KAEnB,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,GAAG,KAAK,uCAG1B,MAAO,AAAG,IAAK,KACb,KAAM,GAAqB,YAAiB,IACxC,KAAK,qBAAqB,aAAa,GACvC,EAEE,EAAS,AAAG,GAAQ,EAAoB,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,SAAS,KAAK,EAAmB,MAAM,GAAI,IACnG,EAAM,GAAoB,EAAQ,EAAO,GAAG,KAAK,OACjD,EAAS,GAAoB,EAAQ,EAAO,GAAG,QACrD,MAAO,CAAE,MAAK,YAIX,aAAa,GAClB,MAAO,AAAG,IAAK,KACb,KAAM,CAAE,MAAK,UAAW,KAAK,OAAO,GACpC,MAAO,CAAE,MAAK,OAAQ,AAAG,GAAQ,WAIxB,SAAQ,GACnB,MAAO,MAAK,aAAa,KAAM,GAAW,SAG/B,qBAAoB,GAC/B,KAAM,GAAW,KAAM,GAAW,GAC5B,EAAM,KAAM,MAAK,aAAa,GAE9B,EAAO,AAAG,GAAQ,EAAI,KACtB,EAAU,AAAG,GAAQ,EAAI,QACzB,EAAsB,EAAK,IAAI,CAAC,EAAW,IAAO,EACtD,YACA,aAAc,EAAQ,MAGlB,EAAqB,KAAM,SAAQ,IACvC,EAAoB,IAAI,MAAO,CAAE,YAAW,mBAC1C,KAAM,GAAO,MAAM,GAAU,QAAQ,GAC/B,EAAY,MAAM,GAAa,QAAQ,GACvC,EAAS,EAAW,GACpB,EAAS,EAAS,EAAO,KAAO,EAAO,OACvC,EAAoB,EAAS,EAAY,EAAI,EAEnD,SAAU,UACV,EAAa,UACN,CAAE,MAAK,SAAQ,wBAG1B,SAAI,IAAI,UACR,EAAI,OAAO,UAEJ,EAAS,aAAe,EAAiD,EAAmB,GAG3F,sBACR,MAAO,mBAGF,QAAQ,EAA4B,IACzC,KAAK,qBAAqB,QAAQ,GAClC,MAAM,QAAQ,GAGT,qBAAqB,GAC1B,KAAM,CAAE,SAAQ,iBAAkB,KAAK,wBAAwB,GAC/D,KAAK,QAAU,EACf,KAAK,eAAiB,EAGjB,wBAAwB,GAC7B,MAAO,IAAc,GAGb,2BAA2B,GAEnC,KAAM,CAAE,sBAAqB,iBAAkB,GAAmB,GAElE,YAAK,qBAAqB,kBAAkB,GAErC,GAA2B,GAG1B,cAAc,GAEtB,KAAM,GAAwB,IAAM,EAAI,EAAM,KAAM,EAAI,GAElD,EAA0B,EAAQ,MAAM,EAAG,EAAQ,OAAS,GAC5D,EAAoB,EAAQ,MAAM,EAAQ,OAAS,GAEzD,YAAK,qBAAqB,eAAe,GAClC,KAAK,wBAAwB,ICzHxC,gHAYU,IAED,YAAY,EAAqB,EAAmB,GAEzD,KAAM,GAAkB,EAAmB,IAAI,CAAC,CAAE,QAAO,aACvD,KAAM,GAAQ,EAAY,KAAK,IAAI,EAAQ,GAC3C,MAAO,CACL,MAAO,EAAQ,EACf,OAAQ,EAAS,KAIf,EAAY,EAAgB,OAElC,MAAO,AAAG,IAAK,KACb,KAAM,GAA0B,CAAC,EAAe,IAC9C,AAAG,GAAM,CACP,AAAG,GAAK,CAAC,IAAK,GACd,AAAG,GAAK,CAAC,IAAK,IACb,GAAG,KAAK,EAAG,KAAK,OAEf,EAAa,CAAC,EAAkB,KACpC,KAAM,CAAE,QAAO,UAAW,EAAgB,GAC1C,MAAO,GAAK,EAAO,GAAU,KAAK,IAAI,EAAQ,GAAU,EAAI,GAExD,EAAc,AAAC,GAAqB,EAAW,EAAU,CAAC,EAAG,IAAM,EAAI,GACvE,EAAc,AAAC,GAAqB,EAAW,EAAU,CAAC,EAAG,IAAM,EAAI,GAEvE,EAAkB,EACrB,IAAI,AAAG,GAAK,CAAC,EAAW,KAAM,IAC9B,IAAI,AAAG,GAAM,MAAM,KAAK,MAAM,GAAY,CAAC,EAAG,IAC7C,EACE,EAAY,GACZ,EAAY,OAGf,IAAI,AAAG,GAAM,MAAM,KAAK,MAAM,GAAY,CAAC,EAAG,IAC7C,EACE,EAAgB,GAAU,MAC1B,EAAgB,GAAU,WAIhC,MAAO,KAIJ,aAAa,GAClB,MAAO,AAAG,IAAK,KACb,KAAM,GAAM,KAAK,OAAO,GACxB,MAAO,MAAK,YACV,EACA,EAAM,UACN,EAAM,gBAAgB,IAAI,CAAC,CAAC,EAAQ,KAAY,EAAE,SAAQ,mBAKnD,SAAQ,GACnB,MAAO,MAAK,aAAa,KAAM,GAAW,SAG/B,iBAAgB,GAC3B,KAAM,GAAW,KAAM,GAAW,GAC5B,EAAkB,AAAG,GACzB,IAAM,AAAG,GAAQ,KAAK,aAAa,KAG/B,EAAoB,KAAM,SAAQ,IAAI,EAAgB,IAC1D,MAAO,EAAgB,KACrB,KAAM,GAAiB,MAAM,KAAK,KAAM,GAAe,QACjD,EAAU,EAAe,OAAO,CAAC,EAAG,IAAM,GAAO,IACjD,EAAU,EAAe,OAAO,CAAC,EAAG,IAAM,CAAC,GAAO,IAExD,MAAO,IAAI,IACT,MAAM,IAAI,KAAK,GAAG,IAAI,CAAC,EAAG,IAAM,GAAI,GAAM,EAAQ,GAAc,EAAQ,KACxE,CACE,OAAQ,EAAS,eAAe,GAChC,MAAQ,EAAS,cAAc,QAMvC,SAAgB,QAAQ,GAAK,EAAE,WAExB,EAAS,aAAe,EAAyC,EAAkB,GAGlF,2BACR,MAAO,MCtGX,gBAIuC,IAErC,YAAY,EAA6C,GAAI,KAC3D,MAAM,oBAAqB,GAGnB,sBACR,MAAO,yBAGC,0BACR,MAAO,MCTJ,YACL,GAGA,KAAM,GAAgC,GAEhC,CACJ,4BACE,GAAkB,EAAW,GAE3B,EAAS,CACb,OAAQ,EAAyB,SAAU,IAC3C,OAAQ,EAAyB,UACjC,OAAQ,EAAyB,WAGnC,SAA2B,EAAW,GAE/B,CAAE,SAAQ,iBClBZ,YAA2B,GAEhC,KAAM,GAAgC,GAEhC,CACJ,iBACA,uBACE,EAAsB,GAEpB,CACJ,4BACE,GAAkB,EAAgB,GAEhC,EAAS,EAAyB,EAAG,GAAI,SAAU,IACnD,EAAS,EAAyB,GAAI,GAAI,UAC1C,EAAS,EAAyB,GAAI,IAAK,UAEjD,GAAI,IAAsB,SAAW,EACnC,KAAM,IAAI,OAAM,kCAAkC,IAAsB,UAG1E,MAAO,CACL,gBACA,OAAQ,CAAE,SAAQ,SAAQ,WC7B9B,sGAU8C,GAE5C,cACE,MAAM,4BAGD,aAAa,GAElB,KAAM,CAAE,UAAW,KAEnB,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,0DAGlB,MAAO,AAAG,IAAK,KACb,KAAM,GAAc,EAAM,cAAc,IAAK,IACvC,EAAU,CAAC,QAAS,QAAS,SAC7B,EAAa,EAAU,EAAa,GAAS,IAAI,AAAG,GAAO,MAEjE,GAAI,GAAM,GAAY,EAAY,EAAO,OAAQ,IACjD,SAAM,GAAY,EAAK,EAAO,QAC9B,EAAM,GAAY,EAAK,EAAO,QAC9B,EAAM,AAAG,GAAQ,EAAK,CAAC,GAAI,IAAK,CAAC,EAAG,GAAI,SAEjC,SAIE,SAAQ,GACnB,MAAO,MAAK,aAAa,KAAM,GAAW,IAGlC,sBACR,MAAO,oCAGC,2BAA2B,GACnC,MAAO,IAA+B,GAG9B,cAAc,GACtB,MAAO,IAAkB,ICnD7B,gBAI2C,IAEzC,YAAY,EAAiD,GAAI,KAC/D,MAAM,wBAAyB,GAGvB,sBACR,MAAO,8BAGC,0BACR,MAAO,MCfX,gBAKqC,KCLrC,oEAIO,YAAe,EAAgB,GACpC,MAAO,AAAG,IAAI,AAAG,GAAI,EAAG,EAAO,SAAU,EAAO,QCLlD,kFAMA,YACE,EACA,EACA,EACA,EACA,EAA4B,QAE5B,KAAM,CAAE,UAAS,QAAS,EAAO,KAEjC,GAAI,GAAM,AAAG,GAAO,EAAG,EAAS,EAAS,GACzC,SAAM,AAAG,GAAI,EAAK,GAClB,EAAM,GAAM,EAAK,EAAO,OACjB,EAAW,AAAG,GAAK,GAAO,EAG5B,YAAc,EAAgB,GACnC,MAAO,IAAU,EAAG,EAAQ,CAAC,EAAG,GAAI,IAG/B,YAAoB,EAAgB,GACzC,MAAO,IAAU,EAAG,EAAQ,CAAC,EAAG,GAAI,IAG/B,YAAkB,EAAgB,GACvC,MAAO,IAAU,EAAG,EAAQ,CAAC,EAAG,GAAI,GAAM,SC9B5C,wHAMA,YAA2B,EAAwC,GAEjE,WAA6B,EAAyB,EAAoB,GACxE,KAAM,GAAU,EAAe,GACzB,EAAQ,EAAQ,OAAU,GAAa,EAAa,GAE1D,GAAI,GAAQ,GACV,KAAM,IAAI,OAAM,+BAA+B,sBAA0B,EAAQ,uBAAuB,kBAA2B,KAGrI,MAAO,AAAG,IACR,IAAM,AAAG,GACP,AAAG,GAAS,EAAS,CAAC,EAAY,EAAO,EAAY,IACrD,CAAC,EAAG,EAAG,EAAG,KAKhB,WACE,EACA,EACA,EACA,GAGA,KAAM,GAAU,EAAoB,EAAiB,EAAY,GAC3D,EAAO,AAAG,GAAS,EAAe,IAExC,SAAc,KACZ,CAAE,UAAW,GAAG,aAChB,CAAE,UAAW,GAAG,WAGX,CAAE,UAAS,QAGpB,WAAiC,EAAoB,GAEnD,KAAM,GAAU,AAAG,GAAS,EAAe,IACrC,EAAS,AAAG,GAAS,EAAe,IAE1C,SAAc,KACZ,CAAE,UAAW,GAAG,aAChB,CAAE,UAAW,GAAG,aAGX,CACL,UACA,UAIJ,WACE,EACA,EACA,EACA,GAGA,KAAM,GAAO,EAAkB,EAAiB,EAAY,EAAY,GAAG,UACrE,EAAQ,EAAwB,EAAY,GAAG,WAErD,MAAO,CAAE,OAAM,SAGjB,WACE,EACA,EACA,EACA,EACA,EAAkB,IAGlB,KAAM,GAAQ,EAAwB,GAAS,GAAM,GAAK,EAAiB,EAAY,EAAY,GAAG,WAChG,EAAQ,EAAuB,EAAiB,EAAY,EAAY,GAAG,WAEjF,MAAO,CAAE,QAAO,SAGlB,MAAO,CACL,yBACA,8BAKG,YAAuB,GAE5B,KAAM,CACJ,iBACA,uBACE,EAAsB,GAEpB,EAAgC,GAEhC,CACJ,yBACA,8BACE,GAAkB,EAAgB,GAEhC,EAAc,EAAuB,KAAM,GAAI,EAAG,eAClD,EAAW,EAA2B,KAAM,GAAI,EAAG,YACnD,EAAW,EAA2B,KAAM,GAAI,EAAG,YACnD,EAAW,EAA2B,KAAM,GAAI,EAAG,YAEnD,EAAc,EAA2B,MAAO,GAAI,EAAG,cAAe,IACtE,EAAW,EAA2B,MAAO,GAAI,EAAG,YACpD,EAAW,EAA2B,MAAO,GAAI,EAAG,YACpD,EAAW,EAA2B,MAAO,GAAI,EAAG,YAEpD,EAAe,EAA2B,OAAQ,IAAK,EAAG,eAAgB,IAC1E,EAAY,EAA2B,OAAQ,IAAK,EAAG,aACvD,EAAY,EAA2B,OAAQ,IAAK,EAAG,aAEvD,EAAe,EAA2B,OAAQ,IAAK,EAAG,eAAgB,IAC1E,EAAY,EAA2B,OAAQ,IAAK,EAAG,aACvD,EAAY,EAA2B,OAAQ,IAAK,EAAG,aACvD,EAAmB,EAA2B,OAAQ,IAAK,EAAG,oBAE9D,EAAK,AAAG,GACZ,IAAM,AAAG,GAAU,AAAG,GAAS,EAAe,IAAM,KAAM,CAAC,IAAK,MAAO,CAAC,EAAG,KAI7E,GAFA,EAAc,KAAK,CAAE,UAAW,OAE5B,IAAsB,SAAW,EACnC,KAAM,IAAI,OAAM,kCAAkC,IAAsB,UAG1E,KAAM,GAAS,CACb,cACA,WACA,WACA,WACA,cACA,WACA,WACA,WACA,eACA,YACA,YACA,eACA,YACA,YACA,mBACA,MAGF,MAAO,CAAE,SAAQ,iBCnJnB,YAA2B,EAAgB,GAEzC,KAAM,GAAqB,EAA0B,EAAW,GAEhE,WAAiC,GAE/B,KAAM,GAAU,EAAgC,GAAG,kBAAwB,GACrE,EAAS,EAAgC,GAAG,iBAAuB,GAEzE,MAAO,CAAE,UAAS,UAGpB,WAAgC,GAE9B,KAAM,GAAU,EAAgC,GAAG,iBAAuB,GACpE,EAAO,EAAgC,GAAG,cAAoB,GAC9D,EAAQ,EAAwB,GAEtC,MAAO,CAAE,KAAM,CAAE,UAAS,QAAQ,SAGpC,WAAoC,GAClC,MAAO,CACL,MAAO,EAAuB,GAAG,WACjC,MAAO,EAAuB,GAAG,YAIrC,MAAO,CACL,yBACA,8BAKG,YACL,GAGA,KAAM,GAAgC,GAEhC,CACJ,yBACA,8BACE,GAAkB,EAAW,GAE3B,EAAc,EAAuB,eACrC,EAAW,EAA2B,YACtC,EAAW,EAA2B,YACtC,EAAW,EAA2B,YAEtC,EAAc,EAA2B,eACzC,EAAW,EAA2B,YACtC,EAAW,EAA2B,YACtC,EAAW,EAA2B,YAEtC,EAAe,EAA2B,gBAC1C,EAAY,EAA2B,aACvC,EAAY,EAA2B,aAEvC,EAAe,EAA2B,gBAC1C,EAAY,EAA2B,aACvC,EAAY,EAA2B,aACvC,EAAmB,EAA2B,oBAE9C,EAAK,EAAU,GAGrB,GAFA,EAAc,KAAK,CAAE,aAAc,KAAM,UAAW,OAEhD,CAAC,GAAW,GACd,KAAM,IAAI,OAAM,yDAAyD,KAG3E,KAAM,GAAS,CACb,cACA,WACA,WACA,WACA,cACA,WACA,WACA,WACA,eACA,YACA,YACA,eACA,YACA,YACA,mBACA,MAGF,SAA2B,EAAW,GAE/B,CAAE,SAAQ,iBCnGnB,4GAKO,WAAkB,EAAgB,GACvC,GAAI,GAAM,GAAK,EAAG,EAAO,OACzB,SAAM,GAAW,EAAK,EAAO,OAC7B,EAAM,AAAG,GAAI,EAAK,GAClB,EAAM,AAAG,GAAK,GACP,EAGF,YAAsB,EAAgB,GAC3C,GAAI,GAAM,GAAS,EAAG,EAAO,OAC7B,EAAM,GAAW,EAAK,EAAO,OAE7B,GAAI,GAAS,AAAG,GAAQ,EAAG,EAAG,EAAG,SACjC,KAAM,GAAQ,AAAG,GAAkB,EAAO,OACpC,EAAQ,EAAO,MAAM,KAAO,EAAI,MAAM,GACtC,EAAgB,EAAO,MAAM,KAAO,EAAI,MAAM,IAAM,EAAO,MAAM,KAAO,EAAI,MAAM,GAExF,GAAI,GACF,KAAM,GAAY,CAAC,GAAG,EAAI,OAC1B,EAAU,GAAK,EACf,KAAM,GAAS,AAAG,GAAkB,GACpC,EAAM,AAAG,GAAO,CAAC,EAAK,GAAS,GAE/B,KAAM,GAAY,CAAC,GAAG,EAAI,OAC1B,EAAU,GAAK,EACf,KAAM,GAAS,AAAG,GAAkB,GACpC,EAAM,AAAG,GAAO,CAAC,EAAK,GAAS,GAGjC,SAAS,EAAQ,AAAG,GAAO,CAAC,EAAQ,GAAQ,GAAK,EACjD,EAAM,AAAG,GAAI,EAAQ,GAErB,EAAM,AAAG,GAAK,GACP,ECtCT,4IAYwC,GAEtC,cACE,MAAM,sBAGD,aAAa,GAElB,KAAM,CAAE,UAAW,KAEnB,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,oDAGlB,MAAO,AAAG,IAAK,KAEb,KAAM,GAAc,AAAG,GAAK,EAAM,cAAc,IAAK,IAAO,WAEtD,EAAU,CAAC,QAAS,QAAS,SAC7B,EAAa,EAAU,EAAa,GAAS,IAAI,AAAG,GAAO,MAEjE,GAAI,GAAM,GAAS,EAAY,EAAO,aACtC,EAAM,AAAG,GAAQ,EAAK,EAAG,EAAG,SAE5B,EAAM,EAAS,EAAK,EAAO,UAC3B,EAAM,EAAS,EAAK,EAAO,UAC3B,EAAM,EAAS,EAAK,EAAO,UAE3B,EAAM,GAAa,EAAK,EAAO,aAC/B,EAAM,EAAS,EAAK,EAAO,UAC3B,EAAM,EAAS,EAAK,EAAO,UAC3B,EAAM,EAAS,EAAK,EAAO,UAE3B,EAAM,GAAa,EAAK,EAAO,cAC/B,EAAM,EAAS,EAAK,EAAO,WAC3B,EAAM,EAAS,EAAK,EAAO,WAE3B,EAAM,GAAa,EAAK,EAAO,cAC/B,EAAM,EAAS,EAAK,EAAO,WAC3B,EAAM,EAAS,EAAK,EAAO,WAC3B,EAAM,GAAa,EAAK,EAAO,kBAE/B,KAAM,GAAY,EAAI,KAAK,CAAC,EAAG,IACzB,EAAiB,AAAG,GAAO,EAAW,EAAO,IAEnD,MAAO,UAIE,SAAQ,GACnB,MAAO,MAAK,aAAa,KAAM,GAAW,SAG/B,uBAAsB,GACjC,KAAM,GAAW,KAAM,GAAW,GAE5B,EAAwB,AAAG,GAC/B,IAAM,AAAG,GAAQ,KAAK,aAAa,KAG/B,EAA0B,KAAM,SAAQ,IAAI,EAAsB,IACtE,GAAK,EAAE,SAGT,SAAsB,QAAQ,GAAK,EAAE,WAE9B,EAAS,aACZ,EACA,EAAwB,GAGpB,sBACR,MAAO,yBAGC,2BAA2B,GACnC,MAAO,IAA2B,GAG1B,cAAc,GACtB,MAAO,IAAc,ICxFlB,YAAkC,GACvC,KAAM,GAAM,GAAI,IAChB,SAAI,eAAe,GACZ,ECHF,YAGL,EACA,GAGA,KAAM,GAAY,CAAE,cACpB,MAAO,QAAO,OAAO,GAAI,EAAW,GCR/B,YAAmB,GACxB,MAAO,OAAO,GAAI,KAAW,SAGxB,YAGL,EACA,GAGA,KAAM,GAAY,CAAE,OACpB,MAAO,QAAO,OAAO,GAAI,EAAW,GCR/B,YAAsB,GAC3B,MAAQ,GAAI,SAAc,EAAO,MAAQ,EAAI,SAAc,EAAO,SAC7D,GAAmB,EAAI,mBAGvB,YAGL,EACA,EACA,GAGA,KAAM,GAAY,CAAE,SAAQ,qBAC5B,MAAO,QAAO,OAAO,GAAI,EAAW,GCtBtC,6FAKA,YAA2B,EAAwC,GAEjE,WAAoC,EAAqB,GAEvD,KAAM,GAAU,AAAG,GAAS,EAAe,EAAI,EAAI,GAAc,CAAC,EAAG,EAAG,EAAa,IAC/E,EAAmB,AAAG,GAAS,EAAe,IAC9C,EAAoB,AAAG,GAAS,EAAe,IAC/C,EAAkB,AAAG,GAAS,EAAe,IAC7C,EAAsB,AAAG,GAAS,EAAe,IAEvD,SAAc,KACZ,CAAE,UAAW,GAAG,aAChB,CAAE,UAAW,GAAG,sBAChB,CAAE,UAAW,GAAG,uBAChB,CAAE,UAAW,GAAG,qBAChB,CAAE,UAAW,GAAG,0BAGX,CACL,UACA,mBACA,oBACA,kBACA,uBAIJ,WACE,EACA,EACA,EACA,EACA,GAGA,KAAM,GAAU,AAAG,GACjB,EAAe,EAAa,EAAc,EAAa,GACvD,CAAC,EAAY,EAAY,EAAY,IAEjC,EAAO,AAAG,GAAS,EAAe,IAExC,SAAc,KACZ,CAAE,UAAW,GAAG,aAChB,CAAE,UAAW,GAAG,KAAgB,EAAkB,oBAAsB,WAGnE,CAAE,UAAS,QAGpB,WACE,EACA,EACA,EACA,GAGA,KAAM,CACJ,UACA,QACE,EAAkB,EAAY,EAAa,EAAY,EAAc,IAEzE,MAAO,CACL,UACA,kBAAmB,GAIvB,WACE,EACA,EACA,GAGA,KAAM,GAAiB,EAA2B,EAAY,GAAG,oBAC3D,EAAiB,EAA2B,EAAY,EAAa,EAAG,GAAG,oBAEjF,MAAO,CAAE,iBAAgB,kBAG3B,aAEE,KAAM,GAAS,EAA2B,EAAG,GAAI,EAAG,sBAE9C,EAAS,EAAsB,GAAI,GAAI,sBACvC,EAAS,EAAsB,GAAI,IAAK,sBACxC,EAAS,EAAsB,IAAK,IAAK,sBACzC,EAAS,EAAsB,IAAK,IAAK,sBACzC,EAAS,EAAsB,IAAK,IAAK,sBACzC,EAAS,EAAsB,IAAK,IAAK,sBACzC,EAAS,EAAsB,IAAK,IAAK,sBACzC,EAAS,EAAsB,IAAK,IAAK,sBACzC,EAAS,EAAsB,IAAK,IAAK,sBACzC,EAAU,EAAsB,IAAK,IAAK,uBAC1C,EAAU,EAAsB,IAAK,IAAK,uBAC1C,EAAU,EAAsB,IAAK,KAAM,uBAC3C,EAAU,EAAsB,KAAM,KAAM,uBAElD,MAAO,CACL,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,WAIJ,aACE,KAAM,GAAS,EAA2B,KAAM,IAAK,EAAG,2BAClD,EAAS,EAA2B,IAAK,IAAK,EAAG,2BACjD,EAAS,EAA2B,IAAK,IAAK,EAAG,2BACjD,EAAS,EAA2B,IAAK,IAAK,EAAG,2BACjD,EAAS,EAA2B,IAAK,IAAK,EAAG,2BACjD,EAAS,EAA2B,IAAK,IAAK,EAAG,2BACjD,EAAS,EAA2B,IAAK,GAAI,EAAG,2BAChD,EAAS,EAA2B,GAAI,IAAK,EAAG,2BAEhD,EAA2B,EAAkB,IAAK,GAAI,EAAG,2DACzD,EAAoB,EAAkB,IAAK,EAAG,EAAG,oDACjD,EAA2B,EAAkB,KAAM,GAAI,EAAG,2DAC1D,EAAoB,EAAkB,KAAM,GAAI,EAAG,oDACnD,EAA2B,EAAkB,IAAK,GAAI,EAAG,2DACzD,EAAoB,EAAkB,IAAK,GAAI,EAAG,oDAClD,EAA2B,EAAkB,IAAK,GAAI,EAAG,2DACzD,EAAoB,EAAkB,IAAK,GAAI,EAAG,oDAClD,GAA2B,EAAkB,IAAK,GAAI,EAAG,2DACzD,GAAoB,EAAkB,IAAK,GAAI,EAAG,oDAClD,GAA2B,EAAkB,IAAK,GAAI,EAAG,2DACzD,GAAoB,EAAkB,IAAK,GAAI,EAAG,oDAElD,GAAkB,CACtB,uBAAwB,EACxB,gBAAiB,GAEb,GAAkB,CACtB,uBAAwB,EACxB,gBAAiB,GAEb,GAAkB,CACtB,uBAAwB,EACxB,gBAAiB,GAEb,GAAkB,CACtB,uBAAwB,EACxB,gBAAiB,GAEb,GAAkB,CACtB,uBAAwB,GACxB,gBAAiB,IAEb,GAAkB,CACtB,uBAAwB,GACxB,gBAAiB,IAGnB,MAAO,CACL,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,mBACA,mBACA,mBACA,mBACA,mBACA,oBAIJ,MAAO,CACL,2BACA,gCAKG,YAAuB,GAE5B,KAAM,GAAgC,GAEhC,CACJ,iBACA,uBACE,EAAsB,GAEpB,CACJ,2BACA,gCACE,GAAkB,EAAgB,GAEhC,EAAc,IACd,EAAmB,IACnB,EAAY,AAAG,GACnB,EAAe,KAAO,GACtB,CAAC,EAAG,KAAM,IAEN,EAAe,CACnB,aAKF,GAFA,EAAc,KAAK,CAAE,UAAW,2BAE5B,IAAsB,SAAW,EACnC,KAAM,IAAI,OAAM,kCAAkC,IAAsB,UAG1E,MAAO,CACL,OAAQ,CACN,cACA,mBACA,gBAEF,iBC/NJ,YAA2B,EAAgB,GAEzC,KAAM,GAAqB,EAA0B,EAAW,GAEhE,WAAoC,EAAgB,EAAa,GAE/D,KAAM,GAAU,EAAgC,GAAG,YAAiB,sBAAyB,EAAG,GAAG,aAC7F,EAAoB,EAAgC,GAAG,YAAiB,oCAAuC,EAAG,GAAG,uBAE3H,MAAO,CAAE,UAAS,qBAGpB,WAA+B,GAE7B,KAAM,GAAe,oBAAoB,IACnC,EAAsB,sBAAsB,cAC5C,EAA4B,GAAG,mBAC/B,EAA4B,GAAG,mBAE/B,EAAU,EAAgC,GAAG,sBAAyC,EAAG,GAAG,aAC5F,EAAmB,EAAgC,GAAG,oBAAuC,EAAG,GAAG,sBACnG,EAAoB,EAAgC,GAAG,mBAAsC,EAAG,GAAG,uBACnG,EAAkB,EAAgC,GAAG,0BAA6C,EAAG,GAAG,qBACxG,EAAsB,EAAgC,GAAG,8BAAiD,EAAG,GAAG,yBAEtH,MAAO,CACL,eAAgB,CACd,UACA,mBACA,oBACA,kBACA,uBAEF,eAAgB,EAA2B,cAAe,EAAK,IAInE,aACE,MAAO,CACL,OAAQ,EAA2B,cAAe,EAAG,sBACrD,OAAQ,EAAsB,GAC9B,OAAQ,EAAsB,GAC9B,OAAQ,EAAsB,GAC9B,OAAQ,EAAsB,GAC9B,OAAQ,EAAsB,GAC9B,OAAQ,EAAsB,GAC9B,OAAQ,EAAsB,GAC9B,OAAQ,EAAsB,GAC9B,OAAQ,EAAsB,GAC9B,QAAS,EAAsB,IAC/B,QAAS,EAAsB,IAC/B,QAAS,EAAsB,IAC/B,QAAS,EAAsB,KAInC,WAA2B,EAAgB,GACzC,KAAM,GAAU,EAAgC,GAAG,YAAkB,EAAG,GAAG,aACrE,EAAO,EAAgC,GAAG,WAAiB,EAAG,GAAG,UAEvE,MAAO,CAAE,UAAS,QAGpB,WAAmC,GAEjC,KAAM,GAAyB,EAC7B,2BAA2B,yBAC3B,kCAAkC,4BAE9B,EAAkB,EACtB,2BAA2B,mBAC3B,kCAAkC,qBAGpC,MAAO,CAAE,yBAAwB,mBAGnC,aACE,MAAO,CACL,OAAQ,EAA2B,aAAc,EAAG,2BACpD,OAAQ,EAA2B,aAAc,EAAG,2BACpD,OAAQ,EAA2B,aAAc,EAAG,2BACpD,OAAQ,EAA2B,aAAc,EAAG,2BACpD,OAAQ,EAA2B,aAAc,EAAG,2BACpD,OAAQ,EAA2B,aAAc,EAAG,2BACpD,OAAQ,EAA2B,aAAc,EAAG,2BACpD,OAAQ,EAA2B,aAAc,EAAG,2BACpD,gBAAiB,EAA0B,GAC3C,gBAAiB,EAA0B,GAC3C,gBAAiB,EAA0B,GAC3C,gBAAiB,EAA0B,GAC3C,gBAAiB,EAA0B,GAC3C,gBAAiB,EAA0B,IAI/C,MAAO,CACL,2BACA,gCAIG,YACL,GAGA,KAAM,GAAgC,GAEhC,CACJ,2BACA,gCACE,GAAkB,EAAW,GAE3B,EAAY,EAAU,oBAG5B,GAFA,EAAc,KAAK,CAAE,aAAc,mBAAoB,UAAW,2BAE9D,CAAC,EAAW,GACd,KAAM,IAAI,OAAM,yEAAyE,KAG3F,KAAM,GAAS,CACb,YAAa,IACb,iBAAkB,IAClB,aAAc,CACZ,cAIJ,SAA2B,EAAW,GAE/B,CAAE,SAAQ,iBCxInB,oGAIO,WACL,EACA,EACA,GAEA,MAAO,AAAG,IAAK,KAEb,GAAI,GAAM,AAAG,GAAO,EAAG,EAAO,QAAS,EAAS,QAChD,SAAM,AAAG,GAAI,EAAK,EAAO,mBAClB,AAAG,GAAY,EAAK,EAAG,KCblC,mHAKA,KAAM,IAAU,qBAEhB,YACE,EACA,EACA,GAEA,MAAO,AAAG,IAAK,KAEb,GAAI,GAAM,AAAG,GAAgB,EAAG,EAAO,QAAS,EAAS,QACzD,SAAM,AAAG,GACP,EACA,EAAO,gBACP,EAAO,oBACP,EAAO,kBACP,EAAO,iBACP,IAEK,AAAG,GAAY,EAAK,EAAG,KAKlC,YAA+B,GAC7B,MAAO,CAAC,EAAG,EAAG,EAAG,IAAI,KAAK,GAAO,IAAQ,GAAY,CAAC,EAAG,GAAK,CAAC,EAAG,GAG7D,YAAqB,EAAgB,GAC1C,MAAO,AAAG,IAAK,KAEb,GAAI,GACA,EAAM,EAAmB,EAAG,EAAO,OAAQ,CAAC,EAAG,IAEnD,KAAM,GAAiB,CACrB,EAAO,OACP,EAAO,OACP,EAAO,OACP,EAAO,OACP,EAAO,OACP,EAAO,OACP,EAAO,OACP,EAAO,OACP,EAAO,OACP,EAAO,QACP,EAAO,QACP,EAAO,QACP,EAAO,SAaT,GAVA,EAAe,QAAQ,CAAC,EAAO,KAC7B,KAAM,GAAW,EAAI,EACf,EAAuB,GAAsB,GACnD,EAAM,GAAmB,EAAK,EAAM,eAAgB,GACpD,EAAM,EAAmB,EAAK,EAAM,eAAgB,CAAC,EAAG,IACxD,AAAI,IAAa,IACf,GAAS,KAIT,IAAW,KACb,KAAM,IAAI,OAAM,iDAGlB,MAAO,CACL,MACA,OAAQ,KCpEP,YACL,EACA,EACA,EACA,EACA,GAGA,KAAM,GAAW,EAAM,MAAM,GACvB,EAAa,KAAK,IACtB,EACA,GAGI,EAAa,EAChB,IAAI,CAAC,EAAO,IAAc,EAAE,QAAO,cACnC,OAAO,GAAK,EAAE,MAAQ,GACtB,KAAK,CAAC,EAAI,IAAO,EAAG,MAAQ,EAAG,OAE5B,EAAe,AAAC,GAAc,GAAK,EAAe,EAAI,EAEtD,EAAqB,GAE3B,SAAW,QAAQ,IACjB,GAAI,EAAS,QAAU,EACrB,OAEF,KAAM,GAAgB,EAAE,MAExB,OAAS,GAAI,EAAS,OAAS,EAAG,GAAK,EAAG,EAAE,GAC1C,KAAM,GAAM,GAAI,EAAO,EAAE,SAAU,EAAS,IAC5C,GAAI,IAAQ,EACV,SAGF,GADA,EAAE,OAAS,EAAa,GACpB,EAAE,OAAS,EACb,MAIJ,AAAI,IAAkB,EAAE,OACtB,EAAS,KAAK,EAAE,YAIb,EAGT,YAAa,EAAoB,EAAW,GAC1C,KAAM,GAAY,EAAM,YAClB,EAAQ,KAAK,IAAI,EAAU,GAAG,GAAI,EAAU,GAAG,IAC/C,EAAQ,KAAK,IAAI,EAAU,GAAG,GAAI,EAAU,GAAG,IAC/C,EAAQ,KAAK,IAAI,EAAU,GAAG,GAAI,EAAU,GAAG,IAC/C,EAAQ,KAAK,IAAI,EAAU,GAAG,GAAI,EAAU,GAAG,IAC/C,EAAQ,KAAK,IAAI,EAAU,GAAG,GAAI,EAAU,GAAG,IAC/C,EAAQ,KAAK,IAAI,EAAU,GAAG,GAAI,EAAU,GAAG,IAC/C,EAAQ,KAAK,IAAI,EAAU,GAAG,GAAI,EAAU,GAAG,IAC/C,EAAQ,KAAK,IAAI,EAAU,GAAG,GAAI,EAAU,GAAG,IAC/C,EAAS,GAAQ,GAAU,GAAQ,GACnC,EAAS,GAAQ,GAAU,GAAQ,GACzC,GAAI,GAAS,GAAK,GAAS,EACzB,MAAO,GAET,KAAM,GAAmB,KAAK,IAAI,EAAO,GACnC,EAAmB,KAAK,IAAI,EAAO,GACnC,EAAmB,KAAK,IAAI,EAAO,GACnC,EAAmB,KAAK,IAAI,EAAO,GACnC,EACF,KAAK,IAAI,EAAmB,EAAkB,GAC9C,KAAK,IAAI,EAAmB,EAAkB,GAClD,MAAO,GAAoB,GAAQ,EAAQ,GCxE7C,uNAKA,YAA2C,GACzC,KAAM,GAAM,AAAG,GAAQ,AAAG,GAAU,EAAG,CAAC,EAAG,KAErC,EAAQ,CACZ,AAAG,GAAI,EAAI,GAAI,EAAI,IACnB,AAAG,GAAI,EAAI,GAAI,EAAI,KAGf,EAAU,CACd,AAAG,GAAI,EAAI,GAAI,AAAG,GAAI,EAAM,GAAI,AAAG,GAAO,KAC1C,AAAG,GAAI,EAAI,GAAI,AAAG,GAAI,EAAM,GAAI,AAAG,GAAO,MAG5C,MAAO,CACL,QACA,WAIJ,YAA0B,EAAiB,GACzC,KAAM,CACJ,QACA,WACE,GAAkC,GAEhC,EAAM,AAAG,GAAQ,AAAG,GAAU,EAAI,CAAC,EAAG,KAEtC,EAAW,AAAG,GAAI,AAAG,GAAI,AAAG,GAAI,AAAG,GAAI,EAAI,GAAI,AAAG,GAAO,KAAM,EAAM,IAAK,AAAG,GAAO,IACpF,EAAW,AAAG,GAAI,AAAG,GAAI,AAAG,GAAI,EAAI,GAAI,AAAG,GAAO,KAAM,EAAM,IAAK,EAAQ,IAE3E,EAAW,AAAG,GAAI,AAAG,GAAI,AAAG,GAAI,AAAG,GAAI,EAAI,GAAI,AAAG,GAAO,KAAM,EAAM,IAAK,AAAG,GAAO,IACpF,EAAW,AAAG,GAAI,AAAG,GAAI,AAAG,GAAI,EAAI,GAAI,AAAG,GAAO,KAAM,EAAM,IAAK,EAAQ,IAEjF,MAAO,AAAG,IACR,AAAG,GAAM,CACP,AAAG,GAAI,EAAU,GACjB,AAAG,GAAI,EAAU,GACjB,AAAG,GAAI,EAAU,GACjB,AAAG,GAAI,EAAU,KAEnB,CAAC,EAAG,IAID,YACL,EACA,EACA,GAEA,MAAO,AAAG,IAAK,KAEb,KAAM,GAAY,EAAe,MAAM,GAEvC,GAAI,GAAQ,GACV,AAAG,GAAQ,AAAG,GAAK,EAAO,UAAW,CAAC,EAAW,EAAG,IAAK,CAAC,GAAI,IAC9D,AAAG,GAAQ,EAAgB,CAAC,GAAI,KAElC,EAAQ,AAAG,GACT,EACA,CAAC,EAAY,EAAM,MAAM,GAAK,EAAY,IAG5C,KAAM,GAAmB,AAAG,GAAQ,AAAG,GAAM,EAAkB,CAAC,EAAG,EAAG,GAAI,CAAC,GAAI,GAAI,MACnF,GAAI,GAAS,AAAG,GAAM,EAAkB,CAAC,EAAG,EAAG,GAAI,CAAC,GAAI,GAAI,IAE5D,EAAS,AAAG,GACV,EACA,CAAC,EAAW,EAAO,MAAM,KAG3B,KAAM,GAAe,AAAG,GAAQ,GAC1B,EAAgB,AAAG,GAAQ,GAEjC,MAAO,CACL,MAAO,EACP,OAAQ,KChFd,yEAMO,YACL,EACA,GAEA,MAAO,AAAG,IAAK,KAEb,KAAM,GAAY,EAAE,MAAM,GAEpB,EAAwB,AAAG,GAC/B,GAAU,EAAG,EAAO,wBACpB,CAAC,EAAW,GAAI,EAAG,IAEf,EAAkB,AAAG,GACzB,GAAU,EAAG,EAAO,iBACpB,CAAC,EAAW,GAAI,IAGlB,MAAO,CACL,wBACA,qBCzBN,wEAMO,YACL,EACA,EACA,GAEA,MAAO,AAAG,IAAK,KAEb,KAAM,GAAQ,EAAmB,EAAG,EAAO,OAAQ,CAAC,EAAG,IACjD,EAAQ,EAAmB,EAAO,EAAO,OAAQ,CAAC,EAAG,IACrD,EAAQ,EAAmB,EAAO,EAAO,OAAQ,CAAC,EAAG,IACrD,EAAQ,EAAmB,EAAO,EAAO,OAAQ,CAAC,EAAG,IACrD,EAAQ,EAAmB,EAAO,EAAO,OAAQ,CAAC,EAAG,IACrD,EAAQ,EAAmB,EAAO,EAAO,OAAQ,CAAC,EAAG,IACrD,EAAQ,EAAmB,EAAO,EAAO,OAAQ,CAAC,EAAG,IACrD,EAAQ,EAAmB,EAAO,EAAO,OAAQ,CAAC,EAAG,IAErD,EAAiB,GAAmB,EAAQ,EAAO,iBACnD,EAAiB,GAAmB,EAAG,EAAO,iBAC9C,EAAiB,GAAmB,EAAO,EAAO,iBAClD,EAAiB,GAAmB,EAAO,EAAO,iBAClD,EAAiB,GAAmB,EAAO,EAAO,iBAClD,EAAiB,GAAmB,EAAO,EAAO,iBAElD,EAAiB,AAAG,GAAO,CAC/B,EAAe,sBACf,EAAe,sBACf,EAAe,sBACf,EAAe,sBACf,EAAe,sBACf,EAAe,uBACd,GAEG,EAAmB,AAAG,GAAO,CACjC,EAAe,gBACf,EAAe,gBACf,EAAe,gBACf,EAAe,gBACf,EAAe,gBACf,EAAe,iBACd,GAEH,MAAO,CACL,iBACA,sBCjDN,QAWE,YAAY,CAAE,gBAAe,cAAuC,IAL1D,WAAgB,wBASxB,GAHA,KAAK,eAAiB,GAAiB,GACvC,KAAK,YAAc,GAAc,IAE7B,MAAO,MAAK,gBAAmB,UAAY,KAAK,gBAAkB,GAAK,KAAK,gBAAkB,EAChG,KAAM,IAAI,OAAM,GAAG,KAAK,iEAG1B,GAAI,MAAO,MAAK,aAAgB,SAC9B,KAAM,IAAI,OAAM,GAAG,KAAK,iDAIxB,iBAA0B,MAAO,MAAK,kBACtC,cAAuB,MAAO,MAAK,aCzBzC,uHAgBoC,GAElC,cACE,MAAM,kBAGD,aAAa,GAElB,KAAM,CAAE,UAAW,KAEnB,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,gDAGlB,MAAO,AAAG,IAAK,KAEb,KAAM,GAAc,AAAG,GAAK,EAAM,cAAc,IAAK,IAAQ,WAEvD,EAAI,AAAG,GAAI,AAAG,GAAI,EAAa,AAAG,GAAO,sBAAwB,AAAG,GAAO,IAC3E,EAAW,GAAY,EAAG,EAAO,aAEjC,CACJ,iBACA,oBACE,GAAgB,EAAS,IAAK,EAAS,OAAQ,EAAO,kBAE1D,MAAO,IAAY,EAAgB,EAAkB,EAAO,qBAInD,SAAQ,GACnB,MAAO,MAAK,aAAa,KAAM,GAAW,SAG/B,aACX,EACA,EAAkC,IAGlC,KAAM,CAAE,aAAY,iBAAkB,GAAI,GAAsB,GAE1D,EAAW,KAAM,GAAW,GAE5B,CACJ,MAAO,EACP,OAAQ,GACN,KAAK,aAAa,GAIhB,EAAQ,EAAO,GACf,EAAS,EAAQ,GACvB,OAAS,GAAI,EAAG,EAAI,EAAO,OAAQ,IACjC,EAAO,GAAG,UACV,EAAQ,GAAG,UAIb,KAAM,GAAa,MAAM,KAAK,KAAM,GAAO,QAErC,EAAe,GACf,EAAU,GACd,EACA,EACA,EACA,EACA,GAGI,EAAe,EAAS,2BAA2B,GACnD,EAAY,EAAS,UACrB,EAAO,EAAY,EAAa,MAChC,EAAO,EAAY,EAAa,OAEhC,EAAY,EAAM,YAClB,EAAU,EACb,IAAI,IACH,KAAM,CAAC,EAAK,GAAU,CACpB,KAAK,IAAI,EAAG,EAAU,GAAK,IAC3B,KAAK,IAAI,EAAK,EAAU,GAAK,KAC7B,IAAI,GAAO,EAAM,GACb,CAAC,EAAM,GAAS,CACpB,KAAK,IAAI,EAAG,EAAU,GAAK,IAC3B,KAAK,IAAI,EAAK,EAAU,GAAK,KAC7B,IAAI,GAAO,EAAM,GACnB,MAAO,IAAI,GACT,EAAW,GACX,GAAI,IACF,EACA,EACA,EAAQ,EACR,EAAS,GAEX,CACE,OAAQ,EAAS,eAAe,GAChC,MAAO,EAAS,cAAc,OAKtC,SAAM,UACN,EAAO,UAEA,EAGC,sBACR,MAAO,wBAGC,2BAA2B,GACnC,MAAO,IAA2B,GAG1B,cAAc,GACtB,MAAO,IAAc,IC9HlB,YAA8B,GACnC,KAAM,GAAM,GAAI,IAChB,SAAI,eAAe,GACZ,EAGF,YAAgC,GACrC,MAAO,IAAqB,GAZ9B,gBAgBsC,KCd/B,KAAM,IAAgB,GAEhB,GAAc,CACzB,GAAI,GAAM,QAAU,SACpB,GAAI,GAAM,QAAS,SACnB,GAAI,GAAM,QAAS,SACnB,GAAI,GAAM,OAAQ,SAClB,GAAI,GAAM,QAAS,UAGR,GAAwB,CACnC,GAAI,GAAM,SAAU,UACpB,GAAI,GAAM,SAAU,UACpB,GAAI,GAAM,SAAU,UACpB,GAAI,GAAM,SAAU,UACpB,GAAI,GAAM,SAAU,WAGT,GAA+C,CAAC,QAAS,QAAS,QAElE,GAAqB,oBACrB,GAAoC,mCCVjD,KAAM,IAAW,AAAC,GAAa,MAAO,IAAQ,SAEvC,YAAwB,GAC7B,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,mBAAmB,KAGrC,GAAI,MAAO,GAAO,oBAAuB,UACvC,KAAM,IAAI,OAAM,wDAAwD,EAAO,sBAGjF,GAAI,CAAC,GAAS,EAAO,eAAiB,EAAO,aAAe,GAAK,EAAO,aAAe,EACrF,KAAM,IAAI,OAAM,gEAAgE,EAAO,gBAGzF,GACE,CAAC,MAAM,QAAQ,EAAO,UACnB,CAAC,EAAO,QAAQ,QAChB,CAAC,EAAO,QAAQ,MAAM,AAAC,GAAW,MAAO,IAAM,UAGlD,KAAM,IAAI,OAAM,kEAAkE,KAAK,UAAU,EAAO,YAG1G,GACE,CAAC,MAAM,QAAQ,EAAO,UACnB,CAAC,EAAO,QAAQ,QAChB,CAAC,EAAO,QAAQ,IAAI,AAAC,GAAW,GAAK,IAAI,MAAM,AAAC,GAAW,GAAS,EAAE,IAAM,GAAS,EAAE,IAG1F,KAAM,IAAI,OAAM,wEAAwE,KAAK,UAAU,EAAO,YAGhH,GAAI,EAAO,SACT,EAAC,MAAM,QAAQ,EAAO,UACnB,EAAO,QAAQ,SAAW,GAC1B,CAAC,EAAO,QAAQ,MAAM,KAGzB,KAAM,IAAI,OAAM,8EAA8E,KAAK,UAAU,EAAO,YCpDxH,iHAEO,YAAe,GACpB,MAAO,AAAG,IAAK,KACb,KAAM,GAAM,AAAG,GAAI,EAAG,AAAG,GAAO,qBAChC,MAAO,AAAG,IAAI,AAAG,GAAK,AAAG,GAAI,EAAG,IAAO,KCL3C,gHAKO,YAA2B,EAAgB,GAChD,MAAO,AAAG,IAAK,KACb,GAAI,GAAM,AAAG,GAAI,EAAG,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,KAEjD,SAAM,AAAG,GAAO,EAAK,EAAO,KAAK,QAAS,CAAC,EAAG,GAAI,SAClD,EAAM,AAAG,GAAI,EAAK,EAAO,GAAG,KAC5B,EAAM,AAAG,GAAI,EAAK,EAAO,GAAG,SAC5B,EAAM,AAAG,GAAI,EAAK,EAAO,KAAK,MAEvB,GAAM,KCdjB,qGAKO,YAAgC,EAAgB,GACrD,MAAO,AAAG,IAAK,KACb,GAAI,GAAM,AAAG,GAAI,EAAG,CAAC,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,CAAC,EAAG,KAEjD,SAAM,AAAG,GAAgB,EAAK,EAAO,iBAAkB,EAAO,iBAAkB,CAAC,EAAG,GAAI,SACxF,EAAM,AAAG,GAAI,EAAK,EAAO,MAElB,GAAM,KCZjB,+DASA,YAA2B,EAAwC,GAEjE,KAAM,GAAoB,GAAyB,EAAgB,GAEnE,WAAgC,EAAc,GAE5C,KAAM,GAAM,AAAG,GAAS,EAAe,IACjC,EAAU,AAAG,GAAS,EAAe,IAE3C,SAAc,KACZ,CAAE,UAAW,GAAG,SAChB,CAAE,UAAW,GAAG,cAGX,CAAE,MAAK,WAGhB,WAAwC,EAAoB,EAAqB,GAE/E,KAAM,GAAO,EAAkB,EAAY,EAAa,EAAG,GAAG,UACxD,EAAK,EAAuB,EAAa,GAAG,QAElD,MAAO,CAAE,OAAM,MAEjB,KAAM,GAA6B,GAAkC,EAAgB,GAErF,MAAO,CACL,oBACA,iCACA,8BAKG,YACL,EACA,EACA,EACA,GAGA,KAAM,CACJ,iBACA,uBACE,EAAsB,GAEpB,EAAgC,GAEhC,CACJ,oBACA,iCACA,8BACE,GAAkB,EAAgB,GAEtC,GAAI,GAEJ,GAAI,EAAO,oBACT,KAAM,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAM,EAEvC,EAAQ,EAAO,mBACjB,EAAkB,EAAI,EAAI,EAAG,SAC7B,EAA2B,EAAI,EAAI,SACjC,EAAQ,EAA2B,EAAI,EAAI,SAC3C,EAAQ,EAA2B,EAAI,EAAI,SAC3C,EAAQ,EAA2B,EAAI,EAAI,SAC3C,GAAQ,EAA2B,EAAI,EAAI,SAC3C,GAAQ,EAA2B,EAAI,EAAI,SAC3C,GAAQ,EAAK,EAA2B,EAAI,EAAI,SAAW,OAC3D,GAAQ,EAAK,EAA2B,EAAI,EAAI,SAAW,OAC3D,GAAQ,EAAkB,GAAM,GAAM,EAAI,EAAI,EAAiB,EAAG,SACxE,EAAS,CAAE,QAAO,QAAO,QAAO,QAAO,SAAO,SAAO,SAAO,SAAO,eAEnE,KAAM,CAAC,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,EAAI,GAAM,EACvC,EAAQ,EAA+B,EAAI,EAAI,SAC/C,EAAQ,EAA+B,EAAI,EAAI,SAC/C,EAAQ,EAA+B,EAAI,EAAI,SAC/C,EAAQ,EAA+B,EAAI,EAAI,SAC/C,GAAQ,EAA+B,EAAI,EAAI,SAC/C,GAAQ,EAA+B,EAAI,EAAI,SAC/C,GAAQ,EAA+B,EAAI,EAAI,SAC/C,GAAQ,EAA+B,EAAI,EAAI,SAC/C,GAAQ,EAAkB,EAAI,EAAI,EAAiB,EAAG,SAC5D,EAAS,CAAE,QAAO,QAAO,QAAO,QAAO,SAAO,SAAO,SAAO,SAAO,UAGrE,GAAI,IAAsB,SAAW,EACnC,KAAM,IAAI,OAAM,kCAAkC,IAAsB,UAI1E,MAAO,CAAE,SAAQ,iBCzFnB,YAA2B,EAAgB,GAEzC,KAAM,GAAqB,EAA0B,EAAW,GAEhE,WAAgC,GAC9B,KAAM,GAAM,EAAgC,GAAG,QAAc,GACvD,EAAU,EAAgC,GAAG,YAAkB,GACrE,MAAO,CAAE,MAAK,WAGhB,WAA2B,GACzB,KAAM,GAAU,EAAgC,GAAG,YAAkB,GAC/D,EAAO,EAAgC,GAAG,SAAe,GAC/D,MAAO,CAAE,UAAS,QAGpB,WAAwC,GACtC,KAAM,GAAO,EAAkB,GAAG,UAC5B,EAAK,EAAuB,GAAG,QACrC,MAAO,CAAE,OAAM,MAGjB,KAAM,GAA6B,GAA+B,GAElE,MAAO,CACL,oBACA,iCACA,8BAKG,YACL,EACA,GAGA,KAAM,GAAgC,GAEhC,CACJ,oBACA,iCACA,8BACE,GAAkB,EAAW,GAEjC,GAAI,GAEJ,GAAI,EAAO,oBACT,KAAM,GAAc,EAAO,aAAe,EAAO,YAAY,QAAU,EACvE,EAAS,CACP,MAAO,EAAO,mBAAqB,EAAkB,SAAW,EAA2B,SAC3F,MAAO,EAA2B,SAClC,MAAO,EAA2B,SAClC,MAAO,EAA2B,SAClC,MAAO,EAA2B,SAClC,MAAO,EAA2B,SAClC,MAAO,EAAa,EAAI,EAA2B,SAAW,OAC9D,MAAO,EAAa,EAAI,EAA2B,SAAW,OAC9D,MAAO,EAAkB,cAG3B,GAAS,CACP,MAAO,EAA+B,SACtC,MAAO,EAA+B,SACtC,MAAO,EAA+B,SACtC,MAAO,EAA+B,SACtC,MAAO,EAA+B,SACtC,MAAO,EAA+B,SACtC,MAAO,EAA+B,SACtC,MAAO,EAA+B,SACtC,MAAO,EAAkB,UAI7B,SAA2B,EAAW,GAE/B,CAAE,SAAQ,iBCtFZ,GAAK,IAAL,UAAK,GACV,OAAK,KAAL,KACA,OAAK,KAAL,KACA,OAAK,KAAL,KACA,OAAK,KAAL,OAJU,aAAZ,SAkBE,YAAY,CAAE,YAAW,kBAAuC,IALtD,WAAgB,oBASxB,GAHA,KAAK,WAAa,GAAa,IAC/B,KAAK,gBAAkB,GAAkB,GAErC,MAAO,MAAK,YAAe,UAAY,KAAK,WAAa,KAAO,EAClE,KAAM,IAAI,OAAM,GAAG,KAAK,6DAG1B,GAAI,MAAO,MAAK,iBAAoB,UAAY,KAAK,iBAAmB,GAAK,KAAK,iBAAmB,EACnG,KAAM,IAAI,OAAM,GAAG,KAAK,qEAIxB,aAAsB,MAAO,MAAK,cAClC,kBAA2B,MAAO,MAAK,iBChC7C,4IAuBoC,GAQlC,YAAY,GACV,MAAM,cACN,GAAe,GACf,KAAK,QAAU,KAGN,UACT,MAAO,MAAK,WAGH,mBACT,MAAO,MAAK,OAAO,iBAAmB,KAAK,OAAO,QAAQ,OAAS,KAG1D,mBACT,MAAO,GAAK,MAAK,gBAAkB,KAAK,OAAO,QAAQ,OAAS,GAG3D,cAAc,EAAgB,GAEnC,GAAI,GAAM,GAAkB,EAAG,EAAO,OACtC,SAAM,AAAG,EAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,QACtC,EAAM,GAAkB,EAAK,EAAO,OACpC,EAAM,AAAG,EAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,QACtC,EAAM,GAAkB,EAAK,EAAO,OACpC,EAAM,AAAG,EAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,QACtC,EAAM,GAAkB,EAAK,EAAO,OACpC,EAAM,AAAG,EAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,QACtC,EAAM,GAAkB,EAAK,EAAO,OACpC,EAAM,AAAG,EAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,QACtC,EAAM,GAAkB,EAAK,EAAO,OACpC,EAAM,AAAG,EAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,QACtC,EAAM,GAAkB,EAAK,EAAO,OACpC,EAAM,GAAkB,EAAK,EAAO,OAE7B,GAAU,EAAK,EAAO,MAAO,QAAS,IAGxC,aAAa,EAAgB,GAElC,GAAI,GAAM,KAAK,OAAO,mBAClB,GAAM,GAAU,EAAG,EAAO,MAAqB,QAAS,KACxD,GAAuB,EAAG,EAAO,OACrC,SAAM,AAAG,EAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,QACtC,EAAM,GAAuB,EAAK,EAAO,OACzC,EAAM,AAAG,EAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,QACtC,EAAM,GAAuB,EAAK,EAAO,OACzC,EAAM,AAAG,EAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,QACtC,EAAM,GAAuB,EAAK,EAAO,OACzC,EAAM,AAAG,EAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,QACtC,EAAM,GAAuB,EAAK,EAAO,OACzC,EAAM,AAAG,EAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,QACtC,EAAM,GAAuB,EAAK,EAAO,OACzC,EAAM,AAAG,EAAQ,EAAK,CAAC,EAAG,GAAI,CAAC,EAAG,GAAI,QACtC,EAAM,EAAO,MAAQ,GAAuB,EAAK,EAAO,OAAS,EACjE,EAAM,EAAO,MAAQ,GAAuB,EAAK,EAAO,OAAS,EAE1D,GAAU,EAAK,EAAO,MAAO,QAAS,IAGxC,aAAa,EAAiB,GAEnC,KAAM,CAAE,UAAW,KAEnB,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,4CAGlB,MAAO,AAAG,IAAK,KAGb,GAAI,GAAc,AAAG,GAAK,EAAM,cAAc,EAAW,IAAQ,WACjE,SAAc,KAAK,OAAO,QACtB,EAAU,EAAa,KAAK,OAAO,SACnC,EACJ,EAAc,EAAY,IAAI,AAAG,GAAO,MAEjC,KAAK,OAAO,mBACf,KAAK,aAAa,EAAa,GAC/B,KAAK,cAAc,EAAa,UAI3B,SAAQ,EAAkB,GACrC,MAAO,MAAM,MAAK,aAAa,KAAM,GAAW,GAAQ,QAG7C,QAAO,EAAkB,EAAoC,IAExE,KAAM,CAAE,YAAW,kBAAmB,GAAI,IAAkB,GAEtD,EAAW,KAAM,GAAW,GAC5B,EAAM,KAAM,MAAK,aAAa,EAAU,GACxC,EAAO,AAAG,GAAK,IAAM,AAAG,GAAQ,GAAK,GAAG,cAExC,EAAkB,CACtB,MAAO,EAAS,cAAc,GAC9B,OAAQ,EAAS,eAAe,IAG5B,EAAU,KAAM,MAAK,aAAa,EAAM,EAAS,2BAA2B,GAAI,GACtF,EAAI,UACJ,EAAK,UAEL,KAAM,GAAQ,EAAQ,IAAI,GAAO,EAAI,KAC/B,EAAS,EAAQ,IAAI,GAAO,EAAI,OAChC,EAAc,EAAQ,IAAI,GAAO,EAAI,YACrC,EAAa,EAAQ,IAAI,GAAO,KAAK,OAAO,QAAQ,EAAI,QAExD,EAAU,GACd,EAAM,IAAI,GAAO,EAAI,QAAQ,IAC7B,EACA,KAAK,OAAO,aACZ,IAGI,EAAa,EAAQ,IAAI,GAC7B,GAAI,IACF,EAAO,GACP,EAAY,GACZ,EAAW,GACX,EAAM,GACN,IAIJ,MAAO,GAGC,sBACR,MAAO,GAGC,2BAA2B,GACnC,MAAO,IAA2B,EAAW,KAAK,QAG1C,cAAc,GACtB,KAAM,GAAc,KAAK,OAAO,aAAe,GAAe,qBAExD,EAAa,EAAc,EAAY,OAAS,OACtD,GAAI,IAAe,GAAK,IAAe,GAAK,IAAe,EACzD,KAAM,IAAI,OAAM,oEAAoE,2BAEtF,MAAO,IAAc,EAAS,KAAK,OAAQ,KAAK,gBAAiB,QAGnD,cACd,EACA,EACA,GAGA,KAAM,CAAE,QAAO,UAAW,EACpB,EAAY,KAAK,IAAI,EAAO,GAC5B,EAAoB,EAAY,EAChC,EAAoB,EAAY,EAEhC,EAAW,EAAa,MAAM,GAC9B,EAAW,KAAK,OAAO,QAAQ,OAE/B,CAAC,EAAa,EAAc,GAAqB,AAAG,GAAK,KAC7D,KAAM,GAAW,EAAa,QAAQ,CAAC,EAAU,EAAU,EAAU,KAAK,kBAEpE,EAAQ,EAAS,MAAM,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAU,EAAU,EAAU,IACpE,EAAS,EAAS,MAAM,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAU,EAAU,EAAU,IACrE,EAAc,KAAK,gBACrB,AAAG,GAAQ,EAAS,MAAM,CAAC,EAAG,EAAG,EAAG,GAAI,CAAC,EAAU,EAAU,EAAU,KAAK,OAAO,QAAQ,SAAU,GACrG,AAAG,GAAO,GACd,MAAO,CAAC,EAAO,EAAQ,KAGnB,EAAU,GAEV,EAAa,KAAM,GAAa,QAChC,EAAY,KAAM,GAAY,QACpC,OAAS,GAAM,EAAG,EAAM,EAAU,IAChC,OAAS,GAAM,EAAG,EAAM,EAAU,IAChC,OAAS,GAAS,EAAG,EAAS,EAAU,KAEtC,KAAM,GAAQ,GAAQ,EAAW,GAAK,GAAK,GAAQ,IACnD,GAAI,CAAC,GAAkB,EAAQ,GAC7B,KAAM,GAAQ,GAAM,GAAQ,EAAU,GAAK,GAAK,GAAQ,KAAO,EAAY,EACrE,EAAQ,GAAM,GAAQ,EAAU,GAAK,GAAK,GAAQ,KAAO,EAAY,EACrE,EAAU,KAAK,IAAI,EAAU,GAAK,GAAK,GAAQ,IAAM,KAAK,OAAO,QAAQ,GAAQ,EAAK,EAAY,EAClG,EAAW,KAAK,IAAI,EAAU,GAAK,GAAK,GAAQ,IAAM,KAAK,OAAO,QAAQ,GAAQ,EAAK,EAAY,EAEnG,GAAK,EAAO,EAAQ,EACpB,GAAK,EAAO,EAAS,EAErB,GAAM,CAAE,MAAK,MAAK,UAClB,CAAE,cAAY,UAAU,KAAK,gBAC/B,KAAM,MAAK,sBAAsB,EAAkC,IACnE,CAAE,WAAY,EAAG,MAAO,GAE5B,EAAQ,KAAK,CACX,IAAK,GAAI,IAAY,GAAG,GAAG,GAAI,EAAO,GAAI,GAC1C,MAAO,EACP,WAAY,EAAQ,GACpB,YACG,MAOb,SAAY,UACZ,EAAa,UACb,EAAkB,UAEX,OAGK,uBAAsB,EAA4B,GAC9D,KAAM,CAAE,MAAK,MAAK,UAAW,EACvB,EAAc,KAAM,GAAc,QACxC,MAAO,OAAM,KAAK,OAAO,QAAQ,QAAQ,KAAK,GAC3C,IAAI,CAAC,EAAG,IAAM,EAAY,GAAK,GAAK,GAAQ,IAC5C,IAAI,CAAC,EAAY,IAAW,EAC3B,aACA,WAED,OAAO,CAAC,EAAK,IAAS,EAAI,WAAa,EAAK,WAAa,EAAM,IArOtD,AAzBhB,GAyBgB,qBAAuB,CACnC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,KAAM,MC1BxC,gBAiBgC,IAE9B,YAAY,EAA8B,IACxC,KAAM,GAAS,OAAO,OAAO,GAAI,CAC/B,qBACA,aAAc,GACd,QAAS,CAAC,SAEZ,EACI,CACA,QAAS,GACT,QAAS,IAET,CACA,QAAS,GACT,gBAAiB,KAIrB,MAAM,MAGG,sBACT,MAAO,MAAK,OAAO,sBAGV,WACT,MAAO,MAAK,OAAO,aAGR,aAAY,EAAkB,GACzC,KAAM,GAAmB,KAAM,MAAK,OAAO,EAAO,GAClD,MAAO,GAAiB,IAAI,GAAO,GAAI,GAAc,EAAI,MAAO,EAAI,YAAa,CAAE,MAAO,EAAI,WAAY,OAAQ,EAAI,eAG9G,sBACR,MAAO,MAAK,mBAAqB,GAAoC,GAG7D,2BAA2B,GACnC,MAAO,OAAM,2BAA2B,IChDrC,YAA0B,EAAuB,EAA8B,IACpF,KAAM,GAAM,GAAI,IAAW,GAC3B,SAAI,eAAe,GACZ,ECZT,gBAI6C,IAJ7C,kCAKY,WAAgB,2BCL5B,aAEe,MACX,GAEA,MAAO,GAAY,KAAM,MAAK,YAGnB,OACX,KAAM,IAAI,OAAM,4CCTpB,6DAOA,kBACE,EACA,EACA,EACA,EACA,EAAwF,CAAC,CAAE,iBAAkB,GAE7G,KAAM,GAAY,EAAc,IAAI,GAClC,GAAoB,GAChB,EAAoB,GACpB,EAAa,WAEb,EAAgD,GACpD,aAAoB,IAChB,KAAM,IAAmB,EAAO,GAChC,KAAM,IAAa,EAAO,IAG1B,EAAU,KAAM,GAAe,GAErC,SAAM,QAAQ,GAAK,YAAgB,KAAU,EAAE,WAExC,EAGT,kBACE,EACA,EACA,EACA,EACA,GAEA,MAAO,IACL,CAAC,GACD,EACA,KAAM,IAAS,EAAc,EAAM,IACnC,EACA,GC1CG,KAAM,IAAgB,GAEhB,GAAc,CACzB,GAAI,GAAM,SAAU,UACpB,GAAI,GAAM,SAAU,UACpB,GAAI,GAAM,SAAU,UACpB,GAAI,GAAM,SAAU,UACpB,GAAI,GAAM,SAAU,WAGT,GAAqC,CAAC,QAAS,QAAS,QCZrE,gBAUsC,IAEpC,cACE,KAAM,GAAS,CACb,mBAAoB,GACpB,aAAc,GACd,QAAS,CAAC,QACV,QAAS,GACT,QAAS,GACT,mBAAoB,GACpB,YAAa,CAAC,EAAG,GAAI,GAAI,GAAI,IAAK,IAAK,MAGzC,MAAM,MAGG,WACT,MAAO,MAAK,OAAO,aAGR,aAAY,EAAkB,GACzC,KAAM,GAAmB,KAAM,MAAK,OAAO,EAAO,GAClD,MAAO,GAAiB,IAAI,GAAO,GAAI,GAAc,EAAI,MAAO,EAAI,YAAa,CAAE,MAAO,EAAI,WAAY,OAAQ,EAAI,eAG9G,sBACR,MAAO,2BAGC,2BAA2B,GACnC,MAAO,OAAM,2BAA2B,ICrBrC,KAAM,GAAO,CAClB,eAAgB,GAAI,IACpB,iBAAkB,GAAI,IACtB,WAAY,GAAI,IAChB,kBAAmB,GAAI,IACvB,sBAAuB,GAAI,IAC3B,mBAAoB,GAAI,IACxB,kBAAmB,GAAI,IACvB,aAAc,GAAI,KAUP,GAAiB,CAAC,EAAkB,IAC/C,EAAK,eAAe,YAAY,EAAO,GAS5B,GAAmB,CAAC,EAAkB,IACjD,EAAK,iBAAiB,YAAY,EAAO,GAS9B,GAAa,CAAC,EAAkB,IAC3C,EAAK,WAAW,YAAY,EAAO,GASxB,GAAsB,AAAC,GAClC,EAAK,kBAAkB,gBAAgB,GAW5B,GAA0B,AAAC,GACtC,EAAK,sBAAsB,gBAAgB,GAYhC,GAAwB,AAAC,GACpC,EAAK,mBAAmB,sBAAsB,GAUnC,GAA2B,AAAC,GACvC,EAAK,kBAAkB,mBAAmB,GAS/B,GAAsB,AAAC,GAClC,EAAK,aAAa,oBAAoB,GAE3B,GAA0B,AAAC,GAAgB,EAAK,eAAe,KAAK,GACpE,GAA4B,AAAC,GAAgB,EAAK,iBAAiB,KAAK,GACxE,GAAsB,AAAC,GAAgB,EAAK,WAAW,KAAK,GAC5D,GAAwB,AAAC,GAAgB,EAAK,kBAAkB,KAAK,GACrE,GAA4B,AAAC,GAAgB,EAAK,sBAAsB,KAAK,GAC7E,GAA2B,AAAC,GAAgB,EAAK,mBAAmB,KAAK,GACzE,GAA0B,AAAC,GAAgB,EAAK,kBAAkB,KAAK,GACvE,GAAqB,AAAC,GAAgB,EAAK,aAAa,KAAK,GAG7D,GAAyB,GACzB,GAAc,GACd,GAAkB,GChI/B,gBAkB4E,GAC1E,YACY,EACA,EACA,GAEV,QAJU,kBACA,aACA,uBAtBd,gBA8BU,SAEK,OAEX,KAAM,GAAgB,KAAM,MAAK,WAE3B,EAAwB,KAAM,IAClC,EACA,KAAK,MACL,KAAM,IAAS,KAAM,SAAQ,IAAI,EAAM,IACrC,GAAQ,EAAK,kBAAkB,mBAAmB,KAEpD,KAAK,gBAGP,MAAO,GAAc,IACnB,CAAC,EAAc,IAAM,GAAmC,EAAc,EAAsB,KAIhG,mBACE,MAAO,IAAI,IAA2B,KAAM,KAAK,QAnDrD,gBAyDW,SAEI,OAEX,KAAM,GAAe,KAAM,MAAK,WAChC,GAAI,CAAC,EACH,OAGF,KAAM,GAAkB,KAAM,IAC5B,EACA,KAAK,MACL,GAAQ,EAAK,kBAAkB,mBAAmB,GAClD,KAAK,gBAGP,MAAO,IAA0B,EAAc,GAGjD,mBACE,MAAO,IAAI,IAA8B,KAAM,KAAK,QA7ExD,gBAmFU,IAER,mBACE,MAAO,IAAI,IAA4C,KAAM,KAAK,OAGpE,sBACE,MAAO,IAAI,IAA8B,KAAM,KAAK,QA1FxD,gBAgGU,IAER,mBACE,MAAO,IAAI,IAA+C,KAAM,KAAK,OAGvE,qBACE,MAAO,IAAI,IAAgC,KAAM,KAAK,QCvG1D,gBAmByE,GACvE,YACY,EACA,EACA,GAEV,QAJU,kBACA,aACA,uBAvBd,gBA+BU,SAEK,OAEX,KAAM,GAAgB,KAAM,MAAK,WAE3B,EAAqB,KAAM,IAC/B,EACA,KAAK,MACL,KAAM,IAAS,KAAM,SAAQ,IAAI,EAAM,IACrC,GAAQ,EAAK,aAAa,oBAAoB,KAEhD,KAAK,gBAGP,MAAO,GAAc,IAAI,CAAC,EAAc,KACtC,KAAM,CAAE,MAAK,SAAQ,qBAAsB,EAAmB,GAC9D,MAAO,IAAc,GAAiB,EAAc,EAAQ,GAAoB,KAIpF,sBACE,MAAO,IAAI,IAA8B,KAAM,KAAK,QArDxD,gBA2DW,SAEI,OAEX,KAAM,GAAe,KAAM,MAAK,WAChC,GAAI,CAAC,EACH,OAGF,KAAM,CAAE,MAAK,SAAQ,qBAAsB,KAAM,IAC/C,EACA,KAAK,MACL,GAAQ,EAAK,aAAa,oBAAoB,GAC9C,KAAK,gBAGP,MAAO,IAAc,GAAiB,EAAc,EAAQ,GAAoB,GAGlF,sBACE,MAAO,IAAI,IAAiC,KAAM,KAAK,QA/E3D,gBAqFU,IAER,sBACE,MAAO,IAAI,IAA+C,KAAM,KAAK,OAGvE,sBACE,MAAO,IAAI,IAA8B,KAAM,KAAK,QA5FxD,gBAkGU,IAER,sBACE,MAAO,IAAI,IAAkD,KAAM,KAAK,OAG1E,qBACE,MAAO,IAAI,IAAgC,KAAM,KAAK,QCzG1D,gBAgB4E,GAC1E,YACY,EACA,GAEV,QAHU,kBACA,cAnBd,gBA2BU,SAEK,OAEX,KAAM,GAAgB,KAAM,MAAK,WAE3B,EAAc,KAAM,IACxB,EACA,KAAK,MACL,GAAS,QAAQ,IAAI,EAAM,IAAI,GAC7B,EAAK,mBAAmB,sBAAsB,KAEhD,KACA,GAAgB,EAAa,UAAU,MAAM,KAAM,CAAE,iBAAkB,MAGzE,MAAO,GAAY,IAAI,CAAC,EAAY,IAAM,GAAkC,EAAc,GAAI,IAGhG,sBACE,MAAO,IAAI,IAA+C,KAAM,KAAK,OAGvE,mBACE,MAAO,IAAI,IAA4C,KAAM,KAAK,QAnDtE,gBAyDU,SAEK,OAEX,KAAM,GAAe,KAAM,MAAK,WAChC,GAAI,CAAC,EACH,OAEF,KAAM,GAAa,KAAM,IACvB,EACA,KAAK,MACL,GAAQ,EAAK,mBAAmB,sBAAsB,GACtD,KACA,GAAgB,EAAa,UAAU,MAAM,KAAM,CAAE,iBAAkB,MAGzE,MAAO,IAAyB,EAAc,GAGhD,sBACE,MAAO,IAAI,IAAkD,KAAM,KAAK,OAG1E,mBACE,MAAO,IAAI,IAA+C,KAAM,KAAK,QCjFzE,6EAoByE,GACvE,YACY,EACA,EACA,GAEV,QAJU,kBACA,aACA,6BAKE,eACZ,MAAO,MAAK,mBACR,EAAK,sBACL,EAAK,mBAhCb,gBAsCU,SAEK,OAEX,KAAM,GAAgB,KAAM,MAAK,WAC3B,EAAa,EAAc,IAAI,GAAO,EAAI,WAE1C,EAAgD,KAAK,gBAAoB,IAC3E,KAAM,IAAmB,KAAK,MAAO,GACrC,KAAM,IAAa,KAAK,MAAO,GAE7B,EAAsB,KAAM,SAAQ,IAAI,EAAM,IAClD,GAAQ,KAAK,YAAY,gBAAgB,KAG3C,SAAM,QAAQ,GAAK,YAAgB,KAAU,EAAE,WAExC,EAAc,IAAI,CAAC,EAAc,IACtC,GAAiC,EAAc,EAAoB,KAIvE,sBACE,MAAO,IAAI,IAA+C,KAAM,KAAK,OAGvE,mBACE,MAAO,IAAI,IAA4C,KAAM,KAAK,OAGpE,sBACE,MAAO,IAAI,IAA8B,KAAM,KAAK,QArExD,gBA2EW,SAEI,OAEX,KAAM,GAAe,KAAM,MAAK,WAChC,GAAI,CAAC,EACH,OAGF,KAAM,CAAE,aAAc,EAChB,EAAgD,KAAK,gBAAoB,IAC3E,KAAM,IAAmB,KAAK,MAAO,CAAC,IACtC,KAAM,IAAa,KAAK,MAAO,CAAC,IAE9B,EAAY,KAAM,MAAK,YAAY,gBAAgB,EAAM,IAE/D,SAAM,QAAQ,GAAK,YAAgB,KAAU,EAAE,WAExC,GAAiC,EAAc,GAGxD,sBACE,MAAO,IAAI,IAAkD,KAAM,KAAK,OAG1E,mBACE,MAAO,IAAI,IAA+C,KAAM,KAAK,OAGvE,qBACE,MAAO,IAAI,IAAgC,KAAM,KAAK,QCzG1D,gBAakD,GAChD,YACY,EACA,EAAgC,GAAI,IAE9C,QAHU,aACA,gBAhBd,gBAsBwC,SAEzB,OAEX,KAAM,CAAE,QAAO,WAAY,KAErB,EAAwB,YAAmB,IAC7C,AAAC,GAAqB,EAAK,iBAAiB,YAAY,EAAO,GAE/D,YAAmB,GACf,AAAC,GAAqB,EAAK,eAAe,YAAY,EAAO,GAE7D,YAAmB,IACf,AAAC,GAAqB,EAAK,WAAW,YAAY,EAAO,GACzD,KAIZ,GAAI,CAAC,EACH,KAAM,IAAI,OAAM,uIAGlB,MAAO,GAAsB,GAGvB,iCACN,MAAO,IAAI,SAAiC,KAAM,KAChD,KAAM,GAAa,KAAM,MAAK,MAC9B,MAAO,GAAI,EAAW,IAAI,GAAa,GAAwB,GAAI,OAIvE,kBAAkB,EAA8B,IAC9C,MAAO,IAAI,IACT,KAAK,iCACL,KAAK,MACL,GAIJ,sBACE,MAAO,IAAI,IACT,KAAK,iCACL,KAAK,OAIT,mBACE,MAAO,IAAI,IACT,KAAK,iCACL,KAAK,QAxEX,gBA6E0C,SAE3B,OACX,KAAM,GAAiB,KAAM,IAAI,IAAmB,KAAK,MAAO,KAAK,SACrE,GAAI,GAAgC,EAAe,GACnD,SAAe,QAAQ,IACrB,AAAI,EAAc,MAAQ,EAA8B,OACtD,GAAgC,KAG7B,EAGD,gCACN,MAAO,IAAI,SAA2C,KAAM,KAC1D,KAAM,GAAY,KAAM,MAAK,MAC7B,MAAO,GAAI,EAAY,GAA4B,GAAI,GAAa,UAIxE,kBAAkB,EAA8B,IAC9C,MAAO,IAAI,IACT,KAAK,gCACL,KAAK,MACL,GAIJ,sBACE,MAAO,IAAI,IACT,KAAK,gCACL,KAAK,OAIT,mBACE,MAAO,IAAI,IACT,KAAK,gCACL,KAAK,QC9GJ,YACL,EACA,EAAgC,GAAI,IAEpC,MAAO,IAAI,IAAqB,EAAO,GAGlC,YACL,EACA,EAAgC,GAAI,IAEpC,MAAO,IAAI,IAAmB,EAAO,GCRvC,kBACE,EACA,GAEA,eAAQ,KAAK,iGACN,KAAM,IAAe,EAAO,GAAI,GAAsB,EAAgB,CAAE,iBAAkB,KAC9F,oBACA,sBAGL,kBACE,EACA,EAAoC,IAEpC,eAAQ,KAAK,6FACN,KAAM,IAAe,EAAO,GAAI,IAAkB,IACtD,oBACA,sBAGE,KAAM,IAAW,GC5BjB,YAA2B,EAA+B,GAC/D,GAAI,EAAK,SAAW,EAAK,OACvB,KAAM,IAAI,OAAM,kDAElB,KAAM,GAAQ,MAAM,KAAK,GACnB,EAAQ,MAAM,KAAK,GAEzB,MAAO,MAAK,KACV,EACG,IAAI,CAAC,EAAK,IAAM,EAAM,EAAM,IAC5B,OAAO,CAAC,EAAK,IAAS,EAAM,KAAK,IAAI,EAAM,GAAI,ICVtD,SAUE,YACE,EACA,EAA4B,IAG5B,KAAK,mBAAqB,EAE1B,KAAM,GAAa,MAAM,QAAQ,GAAU,EAAS,CAAC,GAErD,GAAI,CAAC,EAAW,OACd,KAAM,IAAI,OAAM,2DAGlB,GAAI,GAAQ,EACZ,KAAM,GAAoB,IAAM,UAAU,MAE1C,KAAK,oBAAsB,EAAW,IAAI,AAAC,IACzC,GAAI,YAAgB,IAClB,MAAO,GAGT,GAAI,YAAgB,cAClB,MAAO,IAAI,IAAuB,IAAqB,CAAC,IAG1D,GAAI,EAAK,YAAc,EAAK,qBAAsB,cAChD,MAAO,IAAI,IAAuB,IAAqB,CAAC,EAAK,aAG/D,KAAM,IAAI,OAAM,4MAIT,sBAAiD,MAAO,MAAK,uBAC7D,qBAA8B,MAAO,MAAK,mBAE9C,oBAAoB,EAA+B,GACxD,MAAO,GACJ,IAAI,GAAK,GAAkB,EAAG,IAC9B,OAAO,CAAC,EAAI,IAAO,EAAK,EAAI,GACxB,GAAY,QAAU,GAGxB,gBAAgB,GACrB,MAAO,MAAK,mBACT,IAAI,CAAC,CAAE,cAAa,WAAY,GAAI,IACjC,EACA,KAAK,oBAAoB,EAAiB,KAE7C,OAAO,CAAC,EAAM,IAAS,EAAK,SAAW,EAAK,SAAW,EAAO,GAG5D,cAAc,GACnB,KAAM,GAAY,KAAK,gBAAgB,GACvC,MAAO,GAAU,SAAW,KAAK,kBAC7B,EACA,GAAI,IAAU,UAAW,EAAU,UAGlC,SACL,MAAO,CACL,kBAAmB,KAAK,kBACxB,mBAAoB,KAAK,mBAAmB,IAAI,AAAC,GAAO,EAAG,iBAIjD,UAAS,GACrB,KAAM,GAAqB,EAAK,mBAC7B,IAAI,AAAC,GAAY,GAAuB,SAAS,IACpD,MAAO,IAAI,IAAY,EAAoB,EAAK,oBC1E7C,YAAgC,GACrC,KAAM,GAAM,GAAI,IAChB,SAAI,eAAe,GACZ,ECFF,YAA0B,EAAY,GAE3C,KAAM,CAAE,QAAO,UAAW,GAAI,GAAW,EAAW,MAAO,EAAW,QAEtE,GAAI,GAAS,GAAK,GAAU,EAC1B,KAAM,IAAI,OAAM,uCAAuC,KAAK,UAAU,CAAE,QAAO,cAGjF,GAAI,MAAM,QAAQ,GAEhB,MAAQ,GAAuB,IAAI,GAAO,GAAc,EAAK,CAAE,QAAO,YAGxE,GAAI,GAAoB,IACtB,KAAM,GAAmB,EAAQ,UAAU,QAAQ,EAAO,GACpD,EAAmB,EAAQ,mBAAmB,QAAQ,EAAiB,IAAI,MAAO,EAAiB,IAAI,QAC7G,MAAO,IAAwB,GAAwB,EAAS,GAAmB,GAGrF,MAAI,GAAoB,GACf,GAAwB,EAAS,EAAQ,UAAU,QAAQ,EAAO,IAGvE,YAAmB,IAAiB,YAAmB,GACjD,EAAgB,QAAQ,EAAO,GAGlC,iBChCT,sDA0BA,KAAM,IAAQ,MAAO,UAAY,YAC3B,GAAW,MAAO,YAAc,aAAiB,MAAO,WAAU,WAAc,YACzE,GAAU,CAAE,QAAa,GAAS,QAAM",
  "names": []
}
